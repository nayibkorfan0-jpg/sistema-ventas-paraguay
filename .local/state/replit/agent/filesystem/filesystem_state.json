{"file_contents":{"main.py":{"content":"import os\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.staticfiles import StaticFiles\nfrom contextlib import asynccontextmanager\nfrom sqlalchemy import text\nfrom sqlalchemy.orm import Session\nfrom dotenv import load_dotenv\n\n# Cargar variables de entorno\nload_dotenv()\n\n# Importar configuraci√≥n de base de datos unificada\nfrom app.core.database import engine, Base, get_database\n\n# Importar todos los modelos para que las tablas se creen\nfrom app.models import user, customer, product, sales, invoice, deposit, company\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    # C√≥digo de inicio\n    print(\"Iniciando el sistema de gesti√≥n de ventas...\")\n    print(\"Base de datos configurada - usar 'alembic upgrade head' para crear tablas\")\n    yield\n    # C√≥digo de limpieza al cerrar\n    print(\"Cerrando el sistema de gesti√≥n de ventas...\")\n\n# Crear la aplicaci√≥n FastAPI\napp = FastAPI(\n    title=\"Sistema de Gesti√≥n de Ventas\",\n    description=\"Sistema completo de gesti√≥n de ventas con CRM, cotizaciones, facturaci√≥n e inventario\",\n    version=\"1.0.0\",\n    lifespan=lifespan\n)\n\n# Configurar CORS para producci√≥n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Temporalmente permitir todos los or√≠genes para debugging\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Importar routers de API\nfrom app.api.auth import router as auth_router\nfrom app.api.users import router as users_router\nfrom app.api.customers import router as customers_router\nfrom app.api.quotes import router as quotes_router\nfrom app.api.sales_orders import router as sales_orders_router\nfrom app.api.products import router as products_router\nfrom app.api.invoices import router as invoices_router\nfrom app.api.dashboard import router as dashboard_router\nfrom app.api.notifications import router as notifications_router\nfrom app.api.deposits import router as deposits_router\nfrom app.api.company import router as company_router\n\n# Incluir routers\napp.include_router(auth_router, prefix=\"/api\")\napp.include_router(users_router, prefix=\"/api\")\napp.include_router(customers_router, prefix=\"/api\")\napp.include_router(quotes_router, prefix=\"/api\")\napp.include_router(sales_orders_router, prefix=\"/api\")\napp.include_router(products_router, prefix=\"/api\")\napp.include_router(invoices_router, prefix=\"/api\")\napp.include_router(dashboard_router, prefix=\"/api/dashboard\")\napp.include_router(notifications_router, prefix=\"/api/notifications\")\napp.include_router(deposits_router, prefix=\"/api\")\napp.include_router(company_router, prefix=\"/api\")\n\n# Servir archivos est√°ticos del frontend React\napp.mount(\"/assets\", StaticFiles(directory=\"frontend/dist/assets\"), name=\"assets\")\n# Servir archivos p√∫blicos del frontend (vite.svg, favicon, etc.)\napp.mount(\"/public\", StaticFiles(directory=\"frontend/dist\"), name=\"public\")\n\n# Ruta de prueba\n@app.get(\"/api\")\nasync def api_info():\n    return {\n        \"message\": \"Sistema de Gesti√≥n de Ventas\",\n        \"version\": \"1.0.0\",\n        \"status\": \"active\",\n        \"description\": \"API para gesti√≥n completa de ventas, CRM, inventario y facturaci√≥n\"\n    }\n\n# Servir la interfaz React SPA\nfrom fastapi.responses import FileResponse\n@app.get(\"/\")\nasync def main():\n    return FileResponse('frontend/dist/index.html')\n\n# Servir rutas de React Router (SPA)\n@app.get(\"/{path:path}\")\nasync def serve_spa(path: str):\n    # Para rutas de la SPA, servir index.html\n    if path.startswith(\"api/\"):\n        # Si es una ruta de API no encontrada, dejar que FastAPI maneje el 404\n        from fastapi import HTTPException\n        raise HTTPException(status_code=404, detail=\"API endpoint not found\")\n    \n    # Para todas las dem√°s rutas, servir el index.html para que React Router maneje la navegaci√≥n\n    return FileResponse('frontend/dist/index.html')\n\n# Ruta de health check\n@app.get(\"/health\")\nasync def health_check(db: Session = Depends(get_database)):\n    try:\n        # Verificar conexi√≥n a la base de datos\n        db.execute(text(\"SELECT 1\"))\n        return {\n            \"status\": \"healthy\",\n            \"database\": \"connected\",\n            \"timestamp\": \"2025-01-16\"\n        }\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Database connection failed: {str(e)}\")\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=5000)","size_bytes":4433},"pyproject.toml":{"content":"[project]\nname = \"sales-management-system\"\nversion = \"0.1.0\"\ndescription = \"Sistema completo de gesti√≥n de ventas con CRM, cotizaciones, facturaci√≥n e inventario\"\nauthors = [\"Sales Management Team <team@sales.com>\"]\nrequires-python = \">=3.11\"\ndependencies = [\n    \"fastapi>=0.104.1\",\n    \"uvicorn[standard]>=0.23.2\",\n    \"sqlalchemy>=2.0.23\",\n    \"alembic>=1.12.1\",\n    \"psycopg2-binary>=2.9.7\",\n    \"pydantic>=2.4.2\",\n    \"python-jose[cryptography]>=3.3.0\",\n    \"passlib[bcrypt]>=1.7.4\",\n    \"bcrypt==3.2.2\",\n    \"python-multipart>=0.0.6\",\n    \"jinja2>=3.1.2\",\n    \"aiofiles>=23.2.1\",\n    \"python-dotenv>=1.0.0\",\n    \"reportlab>=4.0.4\",\n    \"redis>=5.0.1\",\n    \"celery>=5.3.4\",\n    \"fastapi-mail>=1.4.1\",\n    \"pydantic-settings>=2.0.3\",\n]\n","size_bytes":742},"replit.md":{"content":"# Sistema de Gesti√≥n de Ventas para Paraguay\n\n## Descripci√≥n del Proyecto\nSistema completo de gesti√≥n de ventas espec√≠ficamente dise√±ado para empresas paraguayas. Incluye cumplimiento fiscal paraguayo, gesti√≥n de clientes con r√©gimen tur√≠stico, facturaci√≥n con IVA, cotizaciones, inventario y reportes. Totalmente funcional y listo para producci√≥n.\n\n## Estado Actual del Proyecto\n\n### ‚úÖ SISTEMA COMPLETAMENTE FUNCIONAL\n1. **Arquitectura Base**: FastAPI + React + PostgreSQL completamente configurado y ejecut√°ndose\n2. **Base de Datos**: Esquema completo con migraciones aplicadas exitosamente\n3. **Autenticaci√≥n**: Sistema JWT + RBAC funcionando (admin/admin123)\n4. **Configuraci√≥n de Empresa**: M√≥dulo completo con datos fiscales paraguayos\n5. **Gesti√≥n de Clientes**: Incluye r√©gimen tur√≠stico prominente con validaciones\n6. **Dashboard Funcional**: Estad√≠sticas reales del negocio con datos paraguayos\n7. **Facturaci√≥n Fiscal**: Cumplimiento total de normativas paraguayas\n8. **Documentos PDF**: Generaci√≥n de cotizaciones y facturas con formato oficial\n\n### üáµüáæ CARACTER√çSTICAS ESPEC√çFICAS DE PARAGUAY\n- **Validaci√≥n RUC**: Algoritmo completo con d√≠gito verificador\n- **Timbrado**: Control de numeraci√≥n fiscal y fechas de vencimiento\n- **IVA Paraguayo**: C√°lculos autom√°ticos (10%, 5%, exento)\n- **Punto de Expedici√≥n**: Configuraci√≥n por empresa\n- **R√©gimen Tur√≠stico**: Exenciones fiscales autom√°ticas\n- **Numeraci√≥n Oficial**: Formato 001-0000001 seg√∫n normativas\n- **PDFs Oficiales**: Facturas y cotizaciones con formato paraguayo\n\n## Tecnolog√≠as Utilizadas\n- **Backend**: FastAPI, SQLAlchemy, Alembic, PostgreSQL\n- **Frontend**: React con TypeScript, Vite\n- **Autenticaci√≥n**: JWT con bcrypt\n- **Base de Datos**: PostgreSQL\n- **Containerizaci√≥n**: Docker & Docker Compose\n\n## Estructura del Proyecto\n```\n/\n‚îú‚îÄ‚îÄ app/\n‚îÇ   ‚îú‚îÄ‚îÄ api/         # Endpoints de la API\n‚îÇ   ‚îú‚îÄ‚îÄ core/        # Configuraci√≥n y utilidades\n‚îÇ   ‚îú‚îÄ‚îÄ crud/        # Operaciones de base de datos\n‚îÇ   ‚îú‚îÄ‚îÄ models/      # Modelos SQLAlchemy\n‚îÇ   ‚îî‚îÄ‚îÄ schemas/     # Esquemas Pydantic\n‚îú‚îÄ‚îÄ frontend/        # Aplicaci√≥n React\n‚îú‚îÄ‚îÄ alembic/         # Migraciones de base de datos\n‚îî‚îÄ‚îÄ docker-compose.yml\n```\n\n## C√≥mo Ejecutar\n```bash\n# Con Docker\ndocker-compose up --build\n\n# Sin Docker\nalembic upgrade head\npython main.py\n```\n\n## APIs Disponibles\n- `POST /api/auth/register` - Registro de usuario\n- `POST /api/auth/login` - Inicio de sesi√≥n\n- `GET /health` - Verificaci√≥n de estado\n\n## Pr√≥ximos Pasos\n1. Completar pruebas de autenticaci√≥n\n2. Desarrollar CRUD para clientes\n3. Implementar sistema de cotizaciones\n4. Crear dashboard de ventas","size_bytes":2720},"alembic/env.py":{"content":"import os\nfrom logging.config import fileConfig\n\nfrom sqlalchemy import engine_from_config\nfrom sqlalchemy import pool\n\nfrom alembic import context\n\n# Importar la configuraci√≥n de la base de datos y modelos\nfrom app.core.database import Base\nfrom app.models import user, customer, product, sales, invoice, deposit\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Configurar la URL de la base de datos desde las variables de entorno\ndatabase_url = os.environ.get(\"DATABASE_URL\")\nif database_url is None:\n    raise RuntimeError(\"DATABASE_URL is required for Alembic\")\nconfig.set_main_option(\"sqlalchemy.url\", database_url)\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n\n# add your model's MetaData object here\n# for 'autogenerate' support\ntarget_metadata = Base.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\") or os.getenv(\"DATABASE_URL\")\n    context.configure(\n        url=url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata\n        )\n\n        with context.begin_transaction():\n            context.run_migrations()\n\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n","size_bytes":2509},"app/__init__.py":{"content":"# App package","size_bytes":13},"frontend/README.md":{"content":"# React + TypeScript + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n\n## Expanding the ESLint configuration\n\nIf you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:\n\n```js\nexport default tseslint.config([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      // Other configs...\n\n      // Remove tseslint.configs.recommended and replace with this\n      ...tseslint.configs.recommendedTypeChecked,\n      // Alternatively, use this for stricter rules\n      ...tseslint.configs.strictTypeChecked,\n      // Optionally, add this for stylistic rules\n      ...tseslint.configs.stylisticTypeChecked,\n\n      // Other configs...\n    ],\n    languageOptions: {\n      parserOptions: {\n        project: ['./tsconfig.node.json', './tsconfig.app.json'],\n        tsconfigRootDir: import.meta.dirname,\n      },\n      // other options...\n    },\n  },\n])\n```\n\nYou can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:\n\n```js\n// eslint.config.js\nimport reactX from 'eslint-plugin-react-x'\nimport reactDom from 'eslint-plugin-react-dom'\n\nexport default tseslint.config([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      // Other configs...\n      // Enable lint rules for React\n      reactX.configs['recommended-typescript'],\n      // Enable lint rules for React DOM\n      reactDom.configs.recommended,\n    ],\n    languageOptions: {\n      parserOptions: {\n        project: ['./tsconfig.node.json', './tsconfig.app.json'],\n        tsconfigRootDir: import.meta.dirname,\n      },\n      // other options...\n    },\n  },\n])\n```\n","size_bytes":2269},"frontend/eslint.config.js":{"content":"import js from '@eslint/js'\nimport globals from 'globals'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\nimport tseslint from 'typescript-eslint'\nimport { globalIgnores } from 'eslint/config'\n\nexport default tseslint.config([\n  globalIgnores(['dist']),\n  {\n    files: ['**/*.{ts,tsx}'],\n    extends: [\n      js.configs.recommended,\n      tseslint.configs.recommended,\n      reactHooks.configs['recommended-latest'],\n      reactRefresh.configs.vite,\n    ],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n  },\n])\n","size_bytes":610},"frontend/vite.config.ts":{"content":"import { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\n// https://vite.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    strictPort: true,\n    hmr: {\n      clientPort: 443,\n    },\n  },\n  build: {\n    outDir: 'dist',\n    assetsDir: 'assets',\n    rollupOptions: {\n      output: {\n        manualChunks: undefined,\n      },\n    },\n  },\n  base: '/',\n})\n","size_bytes":438},"alembic/versions/c72dfa0b3d92_initial_migration_with_sales_management_.py":{"content":"\"\"\"Initial migration with sales management schema\n\nRevision ID: c72dfa0b3d92\nRevises: \nCreate Date: 2025-09-16 19:35:37.224250\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'c72dfa0b3d92'\ndown_revision: Union[str, Sequence[str], None] = None\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('product_categories',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.Column('is_active', sa.Boolean(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_product_categories_id'), 'product_categories', ['id'], unique=False)\n    op.create_table('users',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('email', sa.String(), nullable=False),\n    sa.Column('username', sa.String(), nullable=False),\n    sa.Column('full_name', sa.String(), nullable=False),\n    sa.Column('hashed_password', sa.String(), nullable=False),\n    sa.Column('is_active', sa.Boolean(), nullable=True),\n    sa.Column('is_superuser', sa.Boolean(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)\n    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)\n    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)\n    op.create_table('customers',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('customer_code', sa.String(), nullable=False),\n    sa.Column('company_name', sa.String(), nullable=False),\n    sa.Column('contact_name', sa.String(), nullable=True),\n    sa.Column('email', sa.String(), nullable=True),\n    sa.Column('phone', sa.String(), nullable=True),\n    sa.Column('address', sa.Text(), nullable=True),\n    sa.Column('city', sa.String(), nullable=True),\n    sa.Column('state', sa.String(), nullable=True),\n    sa.Column('postal_code', sa.String(), nullable=True),\n    sa.Column('country', sa.String(), nullable=True),\n    sa.Column('tax_id', sa.String(), nullable=True),\n    sa.Column('credit_limit', sa.Numeric(precision=10, scale=2), nullable=True),\n    sa.Column('payment_terms', sa.Integer(), nullable=True),\n    sa.Column('is_active', sa.Boolean(), nullable=True),\n    sa.Column('notes', sa.Text(), nullable=True),\n    sa.Column('created_by_id', sa.Integer(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_customers_customer_code'), 'customers', ['customer_code'], unique=True)\n    op.create_index(op.f('ix_customers_email'), 'customers', ['email'], unique=False)\n    op.create_index(op.f('ix_customers_id'), 'customers', ['id'], unique=False)\n    op.create_table('products',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('product_code', sa.String(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.Column('category_id', sa.Integer(), nullable=True),\n    sa.Column('unit_of_measure', sa.String(), nullable=True),\n    sa.Column('cost_price', sa.Numeric(precision=10, scale=2), nullable=True),\n    sa.Column('selling_price', sa.Numeric(precision=10, scale=2), nullable=False),\n    sa.Column('min_stock_level', sa.Integer(), nullable=True),\n    sa.Column('max_stock_level', sa.Integer(), nullable=True),\n    sa.Column('current_stock', sa.Integer(), nullable=True),\n    sa.Column('is_active', sa.Boolean(), nullable=True),\n    sa.Column('is_trackable', sa.Boolean(), nullable=True),\n    sa.Column('image_url', sa.String(), nullable=True),\n    sa.Column('barcode', sa.String(), nullable=True),\n    sa.Column('weight', sa.Numeric(precision=8, scale=3), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.ForeignKeyConstraint(['category_id'], ['product_categories.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)\n    op.create_index(op.f('ix_products_product_code'), 'products', ['product_code'], unique=True)\n    op.create_table('contacts',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('customer_id', sa.Integer(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('title', sa.String(), nullable=True),\n    sa.Column('email', sa.String(), nullable=True),\n    sa.Column('phone', sa.String(), nullable=True),\n    sa.Column('mobile', sa.String(), nullable=True),\n    sa.Column('is_primary', sa.Boolean(), nullable=True),\n    sa.Column('is_active', sa.Boolean(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_contacts_id'), 'contacts', ['id'], unique=False)\n    op.create_table('quotes',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('quote_number', sa.String(), nullable=False),\n    sa.Column('customer_id', sa.Integer(), nullable=False),\n    sa.Column('quote_date', sa.Date(), nullable=False),\n    sa.Column('valid_until', sa.Date(), nullable=False),\n    sa.Column('status', sa.String(), nullable=True),\n    sa.Column('subtotal', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('tax_amount', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('notes', sa.Text(), nullable=True),\n    sa.Column('terms_conditions', sa.Text(), nullable=True),\n    sa.Column('created_by_id', sa.Integer(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),\n    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_quotes_id'), 'quotes', ['id'], unique=False)\n    op.create_index(op.f('ix_quotes_quote_number'), 'quotes', ['quote_number'], unique=True)\n    op.create_table('stock_movements',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('product_id', sa.Integer(), nullable=False),\n    sa.Column('movement_type', sa.String(), nullable=False),\n    sa.Column('quantity', sa.Integer(), nullable=False),\n    sa.Column('unit_cost', sa.Numeric(precision=10, scale=2), nullable=True),\n    sa.Column('reference_type', sa.String(), nullable=True),\n    sa.Column('reference_id', sa.Integer(), nullable=True),\n    sa.Column('notes', sa.Text(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_stock_movements_id'), 'stock_movements', ['id'], unique=False)\n    op.create_table('quote_lines',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('quote_id', sa.Integer(), nullable=False),\n    sa.Column('product_id', sa.Integer(), nullable=False),\n    sa.Column('quantity', sa.Integer(), nullable=False),\n    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),\n    sa.Column('discount_percent', sa.Numeric(precision=5, scale=2), nullable=True),\n    sa.Column('line_total', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.ForeignKeyConstraint(['quote_id'], ['quotes.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_quote_lines_id'), 'quote_lines', ['id'], unique=False)\n    op.create_table('sales_orders',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('order_number', sa.String(), nullable=False),\n    sa.Column('quote_id', sa.Integer(), nullable=True),\n    sa.Column('customer_id', sa.Integer(), nullable=False),\n    sa.Column('order_date', sa.Date(), nullable=False),\n    sa.Column('delivery_date', sa.Date(), nullable=True),\n    sa.Column('status', sa.String(), nullable=True),\n    sa.Column('subtotal', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('tax_amount', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('shipping_cost', sa.Numeric(precision=10, scale=2), nullable=True),\n    sa.Column('notes', sa.Text(), nullable=True),\n    sa.Column('shipping_address', sa.Text(), nullable=True),\n    sa.Column('created_by_id', sa.Integer(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),\n    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),\n    sa.ForeignKeyConstraint(['quote_id'], ['quotes.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_sales_orders_id'), 'sales_orders', ['id'], unique=False)\n    op.create_index(op.f('ix_sales_orders_order_number'), 'sales_orders', ['order_number'], unique=True)\n    op.create_table('invoices',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('invoice_number', sa.String(), nullable=False),\n    sa.Column('sales_order_id', sa.Integer(), nullable=True),\n    sa.Column('customer_id', sa.Integer(), nullable=False),\n    sa.Column('invoice_date', sa.Date(), nullable=False),\n    sa.Column('due_date', sa.Date(), nullable=False),\n    sa.Column('status', sa.String(), nullable=True),\n    sa.Column('subtotal', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('tax_amount', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('paid_amount', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('balance_due', sa.Numeric(precision=12, scale=2), nullable=True),\n    sa.Column('notes', sa.Text(), nullable=True),\n    sa.Column('payment_terms', sa.String(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),\n    sa.ForeignKeyConstraint(['sales_order_id'], ['sales_orders.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_invoices_id'), 'invoices', ['id'], unique=False)\n    op.create_index(op.f('ix_invoices_invoice_number'), 'invoices', ['invoice_number'], unique=True)\n    op.create_table('sales_order_lines',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('order_id', sa.Integer(), nullable=False),\n    sa.Column('product_id', sa.Integer(), nullable=False),\n    sa.Column('quantity', sa.Integer(), nullable=False),\n    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),\n    sa.Column('discount_percent', sa.Numeric(precision=5, scale=2), nullable=True),\n    sa.Column('line_total', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.Column('quantity_shipped', sa.Integer(), nullable=True),\n    sa.Column('quantity_invoiced', sa.Integer(), nullable=True),\n    sa.ForeignKeyConstraint(['order_id'], ['sales_orders.id'], ),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_sales_order_lines_id'), 'sales_order_lines', ['id'], unique=False)\n    op.create_table('invoice_lines',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('invoice_id', sa.Integer(), nullable=False),\n    sa.Column('product_id', sa.Integer(), nullable=False),\n    sa.Column('quantity', sa.Integer(), nullable=False),\n    sa.Column('unit_price', sa.Numeric(precision=10, scale=2), nullable=False),\n    sa.Column('discount_percent', sa.Numeric(precision=5, scale=2), nullable=True),\n    sa.Column('line_total', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('description', sa.Text(), nullable=True),\n    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),\n    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_invoice_lines_id'), 'invoice_lines', ['id'], unique=False)\n    op.create_table('payments',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('invoice_id', sa.Integer(), nullable=False),\n    sa.Column('payment_date', sa.Date(), nullable=False),\n    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('payment_method', sa.String(), nullable=False),\n    sa.Column('reference_number', sa.String(), nullable=True),\n    sa.Column('notes', sa.Text(), nullable=True),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_payments_id'), 'payments', ['id'], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_payments_id'), table_name='payments')\n    op.drop_table('payments')\n    op.drop_index(op.f('ix_invoice_lines_id'), table_name='invoice_lines')\n    op.drop_table('invoice_lines')\n    op.drop_index(op.f('ix_sales_order_lines_id'), table_name='sales_order_lines')\n    op.drop_table('sales_order_lines')\n    op.drop_index(op.f('ix_invoices_invoice_number'), table_name='invoices')\n    op.drop_index(op.f('ix_invoices_id'), table_name='invoices')\n    op.drop_table('invoices')\n    op.drop_index(op.f('ix_sales_orders_order_number'), table_name='sales_orders')\n    op.drop_index(op.f('ix_sales_orders_id'), table_name='sales_orders')\n    op.drop_table('sales_orders')\n    op.drop_index(op.f('ix_quote_lines_id'), table_name='quote_lines')\n    op.drop_table('quote_lines')\n    op.drop_index(op.f('ix_stock_movements_id'), table_name='stock_movements')\n    op.drop_table('stock_movements')\n    op.drop_index(op.f('ix_quotes_quote_number'), table_name='quotes')\n    op.drop_index(op.f('ix_quotes_id'), table_name='quotes')\n    op.drop_table('quotes')\n    op.drop_index(op.f('ix_contacts_id'), table_name='contacts')\n    op.drop_table('contacts')\n    op.drop_index(op.f('ix_products_product_code'), table_name='products')\n    op.drop_index(op.f('ix_products_id'), table_name='products')\n    op.drop_table('products')\n    op.drop_index(op.f('ix_customers_id'), table_name='customers')\n    op.drop_index(op.f('ix_customers_email'), table_name='customers')\n    op.drop_index(op.f('ix_customers_customer_code'), table_name='customers')\n    op.drop_table('customers')\n    op.drop_index(op.f('ix_users_username'), table_name='users')\n    op.drop_index(op.f('ix_users_id'), table_name='users')\n    op.drop_index(op.f('ix_users_email'), table_name='users')\n    op.drop_table('users')\n    op.drop_index(op.f('ix_product_categories_id'), table_name='product_categories')\n    op.drop_table('product_categories')\n    # ### end Alembic commands ###\n","size_bytes":16316},"app/api/__init__.py":{"content":"# API package","size_bytes":13},"app/api/auth.py":{"content":"from datetime import timedelta\nfrom typing import cast\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom sqlalchemy.orm import Session\n\nfrom app.core.database import get_database\nfrom app.core.auth import create_user_token\nfrom app.core.dependencies import get_current_active_user\nfrom app.crud.user import user_crud\nfrom app.schemas.auth import Token, User, UserCreate, UserLogin\n\nrouter = APIRouter(prefix=\"/auth\", tags=[\"autenticaci√≥n\"])\n\n@router.post(\"/register\", response_model=User)\ndef register_user(\n    user_in: UserCreate,\n    db: Session = Depends(get_database)\n):\n    \"\"\"Registrar nuevo usuario\"\"\"\n    # Verificar si el usuario ya existe\n    user = user_crud.get_by_email(db, email=user_in.email)\n    if user:\n        raise HTTPException(\n            status_code=400,\n            detail=\"El email ya est√° registrado\"\n        )\n    \n    user = user_crud.get_by_username(db, username=user_in.username)\n    if user:\n        raise HTTPException(\n            status_code=400,\n            detail=\"El nombre de usuario ya est√° en uso\"\n        )\n    \n    # Crear nuevo usuario\n    user = user_crud.create(db, user_in=user_in)\n    return user\n\n@router.post(\"/login\", response_model=Token)\ndef login_user(\n    user_credentials: UserLogin,\n    db: Session = Depends(get_database)\n):\n    \"\"\"Iniciar sesi√≥n\"\"\"\n    user = user_crud.authenticate(\n        db, \n        username=user_credentials.username, \n        password=user_credentials.password\n    )\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Credenciales incorrectas\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    if not user_crud.is_active(user):\n        raise HTTPException(status_code=400, detail=\"Usuario inactivo\")\n    \n    # Crear token de acceso\n    access_token = create_user_token(cast(int, user.id), cast(str, user.username))\n    \n    return Token(\n        access_token=access_token,\n        token_type=\"bearer\",\n        user=User.from_orm(user)\n    )\n\n@router.post(\"/token\", response_model=Token)\ndef login_for_access_token(\n    form_data: OAuth2PasswordRequestForm = Depends(),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Endpoint compatible con OAuth2 para obtener token\"\"\"\n    user = user_crud.authenticate(db, username=form_data.username, password=form_data.password)\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Credenciales incorrectas\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    access_token = create_user_token(cast(int, user.id), cast(str, user.username))\n    \n    return Token(\n        access_token=access_token,\n        token_type=\"bearer\",\n        user=User.from_orm(user)\n    )\n\n@router.get(\"/me\", response_model=User)\ndef get_current_user_info(\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener informaci√≥n del usuario actual\"\"\"\n    return current_user","size_bytes":3035},"app/api/customers.py":{"content":"from typing import List, Optional\nfrom fastapi import APIRouter, Depends, HTTPException, status, Query, UploadFile, File\nfrom fastapi.responses import FileResponse\nfrom sqlalchemy.orm import Session\nimport os\nimport uuid\nfrom datetime import datetime\n\nfrom app.core.database import get_database\nfrom app.core.dependencies import get_current_active_user, check_user_limits\nfrom app.crud.customer import customer_crud, contact_crud\nfrom app.schemas.customer import (\n    Customer, CustomerCreate, CustomerUpdate, CustomerList,\n    Contact, ContactCreate, ContactUpdate\n)\nfrom app.models.user import User\n\nrouter = APIRouter(prefix=\"/customers\", tags=[\"clientes\"])\n\n# Endpoints para Clientes\n@router.get(\"/\", response_model=List[CustomerList])\ndef list_customers(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    skip: int = Query(0, ge=0, description=\"N√∫mero de registros a omitir\"),\n    limit: int = Query(100, ge=1, le=1000, description=\"L√≠mite de registros\"),\n    search: Optional[str] = Query(None, description=\"Buscar por nombre, c√≥digo o email\"),\n    is_active: Optional[bool] = Query(None, description=\"Filtrar por estado activo\")\n):\n    \"\"\"Obtener lista de clientes con filtros opcionales\"\"\"\n    customers = customer_crud.get_multi(\n        db=db, \n        skip=skip, \n        limit=limit, \n        search=search, \n        is_active=is_active\n    )\n    return customers\n\n@router.get(\"/{customer_id}\", response_model=Customer)\ndef get_customer(\n    customer_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener cliente espec√≠fico por ID\"\"\"\n    customer = customer_crud.get(db=db, customer_id=customer_id)\n    if not customer:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cliente no encontrado\"\n        )\n    return customer\n\n@router.post(\"/\", response_model=Customer)\ndef create_customer(\n    customer_in: CustomerCreate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    _: User = Depends(check_user_limits('customers'))\n):\n    \"\"\"Crear nuevo cliente\"\"\"\n    # Verificar si ya existe un cliente con el mismo email\n    if customer_in.email:\n        existing_customer = customer_crud.get_by_email(db=db, email=customer_in.email)\n        if existing_customer:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Ya existe un cliente con este email\"\n            )\n    \n    customer = customer_crud.create(\n        db=db, \n        customer_in=customer_in, \n        created_by_id=getattr(current_user, 'id', 0)\n    )\n    return customer\n\n@router.put(\"/{customer_id}\", response_model=Customer)\ndef update_customer(\n    customer_id: int,\n    customer_in: CustomerUpdate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar cliente existente\"\"\"\n    db_customer = customer_crud.get(db=db, customer_id=customer_id)\n    if not db_customer:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cliente no encontrado\"\n        )\n    \n    # Verificar email √∫nico si se est√° actualizando\n    if customer_in.email and customer_in.email != db_customer.email:\n        existing_customer = customer_crud.get_by_email(db=db, email=customer_in.email)\n        if existing_customer:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Ya existe un cliente con este email\"\n            )\n    \n    customer = customer_crud.update(db=db, db_customer=db_customer, customer_in=customer_in)\n    return customer\n\n@router.delete(\"/{customer_id}\")\ndef delete_customer(\n    customer_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Desactivar cliente (eliminaci√≥n suave)\"\"\"\n    success = customer_crud.delete(db=db, customer_id=customer_id)\n    if not success:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cliente no encontrado\"\n        )\n    return {\"message\": \"Cliente desactivado exitosamente\"}\n\n# Endpoints para Contactos\n@router.get(\"/{customer_id}/contacts\", response_model=List[Contact])\ndef list_customer_contacts(\n    customer_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener todos los contactos de un cliente\"\"\"\n    # Verificar que el cliente existe\n    customer = customer_crud.get(db=db, customer_id=customer_id)\n    if not customer:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cliente no encontrado\"\n        )\n    \n    contacts = contact_crud.get_by_customer(db=db, customer_id=customer_id)\n    return contacts\n\n@router.post(\"/{customer_id}/contacts\", response_model=Contact)\ndef create_contact(\n    customer_id: int,\n    contact_in: ContactCreate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Crear nuevo contacto para un cliente\"\"\"\n    # Verificar que el cliente existe\n    customer = customer_crud.get(db=db, customer_id=customer_id)\n    if not customer:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cliente no encontrado\"\n        )\n    \n    # Asegurar que el contact_in tenga el customer_id correcto\n    contact_in.customer_id = customer_id\n    contact = contact_crud.create(db=db, contact_in=contact_in)\n    return contact\n\n@router.get(\"/contacts/{contact_id}\", response_model=Contact)\ndef get_contact(\n    contact_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener contacto espec√≠fico por ID\"\"\"\n    contact = contact_crud.get(db=db, contact_id=contact_id)\n    if not contact:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Contacto no encontrado\"\n        )\n    return contact\n\n@router.put(\"/contacts/{contact_id}\", response_model=Contact)\ndef update_contact(\n    contact_id: int,\n    contact_in: ContactUpdate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar contacto existente\"\"\"\n    db_contact = contact_crud.get(db=db, contact_id=contact_id)\n    if not db_contact:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Contacto no encontrado\"\n        )\n    \n    contact = contact_crud.update(db=db, db_contact=db_contact, contact_in=contact_in)\n    return contact\n\n@router.delete(\"/contacts/{contact_id}\")\ndef delete_contact(\n    contact_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Desactivar contacto (eliminaci√≥n suave)\"\"\"\n    success = contact_crud.delete(db=db, contact_id=contact_id)\n    if not success:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Contacto no encontrado\"\n        )\n    return {\"message\": \"Contacto desactivado exitosamente\"}\n\n# ===== ENDPOINTS PARA GESTI√ìN DE PDFs DE R√âGIMEN DE TURISMO =====\n\n@router.post(\"/{customer_id}/upload-tourism-pdf\")\nasync def upload_tourism_pdf(\n    customer_id: int,\n    pdf_file: UploadFile = File(..., description=\"Archivo PDF del r√©gimen de turismo\"),\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Subir PDF del r√©gimen de turismo para un cliente espec√≠fico\"\"\"\n    \n    # Verificar que el cliente existe\n    customer = customer_crud.get(db=db, customer_id=customer_id)\n    if not customer:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cliente no encontrado\"\n        )\n    \n    # Leer el contenido del archivo para validaciones\n    pdf_content = await pdf_file.read()\n    \n    # SECURITY: Validar que es realmente un archivo PDF verificando los magic bytes\n    if not pdf_content.startswith(b'%PDF-'):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"El archivo no es un PDF v√°lido\"\n        )\n    \n    # Validaci√≥n adicional de content-type (defensa en profundidad)\n    if not pdf_file.content_type == \"application/pdf\":\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Solo se permiten archivos PDF\"\n        )\n    \n    # Validar tama√±o del archivo (m√°ximo 10MB)\n    if len(pdf_content) > 10 * 1024 * 1024:  # 10MB\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"El archivo es demasiado grande. M√°ximo permitido: 10MB\"\n        )\n    \n    # Generar nombre √∫nico para el archivo\n    file_extension = \".pdf\"\n    unique_filename = f\"tourism_regime_{customer_id}_{uuid.uuid4().hex[:8]}_{datetime.now().strftime('%Y%m%d')}{file_extension}\"\n    \n    # Asegurar que el directorio existe\n    upload_dir = \"uploads/tourism_pdfs\"\n    os.makedirs(upload_dir, exist_ok=True)\n    \n    # Guardar el archivo\n    file_path = os.path.join(upload_dir, unique_filename)\n    with open(file_path, \"wb\") as buffer:\n        buffer.write(pdf_content)\n    \n    # Actualizar el cliente con el nombre del archivo PDF usando el m√©todo seguro dedicado\n    customer_crud.update_tourism_pdf(db=db, customer_id=customer_id, pdf_filename=unique_filename)\n    \n    return {\n        \"message\": \"PDF del r√©gimen de turismo subido exitosamente\",\n        \"filename\": unique_filename,\n        \"customer_id\": customer_id,\n        \"file_size_bytes\": len(pdf_content)\n    }\n\n@router.get(\"/{customer_id}/tourism-pdf\")\nasync def download_tourism_pdf(\n    customer_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Descargar PDF del r√©gimen de turismo de un cliente espec√≠fico\"\"\"\n    \n    # Verificar que el cliente existe\n    customer = customer_crud.get(db=db, customer_id=customer_id)\n    if not customer:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cliente no encontrado\"\n        )\n    \n    # Verificar que el cliente tiene un PDF\n    tourism_pdf_filename = str(customer.tourism_regime_pdf) if customer.tourism_regime_pdf is not None else None\n    if not tourism_pdf_filename:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Este cliente no tiene un PDF de r√©gimen de turismo\"\n        )\n    \n    # SECURITY: Sanitize filename to prevent path traversal attacks\n    safe_filename = os.path.basename(tourism_pdf_filename)\n    \n    # SECURITY: Validate filename doesn't contain directory separators or malicious patterns\n    if \"..\" in tourism_pdf_filename or \"/\" in tourism_pdf_filename or \"\\\\\" in tourism_pdf_filename:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Nombre de archivo inv√°lido\"\n        )\n    \n    # SECURITY: Ensure the file path stays within the uploads directory\n    upload_dir = os.path.abspath(\"uploads/tourism_pdfs\")\n    file_path = os.path.join(upload_dir, safe_filename)\n    \n    # SECURITY: Verify the resolved path is still within the upload directory\n    if not os.path.abspath(file_path).startswith(upload_dir):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Acceso no autorizado al archivo\"\n        )\n    \n    # Verificar que el archivo existe en el sistema\n    if not os.path.exists(file_path):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Archivo PDF no encontrado en el servidor\"\n        )\n    \n    # Devolver el archivo para descarga\n    return FileResponse(\n        path=file_path,\n        filename=f\"regimen_turismo_{customer.company_name}_{safe_filename}\",\n        media_type=\"application/pdf\"\n    )\n\n@router.delete(\"/{customer_id}/tourism-pdf\")\nasync def delete_tourism_pdf(\n    customer_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Eliminar PDF del r√©gimen de turismo de un cliente espec√≠fico\"\"\"\n    \n    # Verificar que el cliente existe\n    customer = customer_crud.get(db=db, customer_id=customer_id)\n    if not customer:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cliente no encontrado\"\n        )\n    \n    # Verificar que el cliente tiene un PDF\n    tourism_pdf_filename = str(customer.tourism_regime_pdf) if customer.tourism_regime_pdf is not None else None\n    if not tourism_pdf_filename:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Este cliente no tiene un PDF de r√©gimen de turismo\"\n        )\n    \n    # SECURITY: Sanitize filename to prevent path traversal attacks\n    safe_filename = os.path.basename(tourism_pdf_filename)\n    \n    # SECURITY: Validate filename doesn't contain directory separators or malicious patterns\n    if \"..\" in tourism_pdf_filename or \"/\" in tourism_pdf_filename or \"\\\\\" in tourism_pdf_filename:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Nombre de archivo inv√°lido\"\n        )\n    \n    # SECURITY: Ensure the file path stays within the uploads directory\n    upload_dir = os.path.abspath(\"uploads/tourism_pdfs\")\n    file_path = os.path.join(upload_dir, safe_filename)\n    \n    # SECURITY: Verify the resolved path is still within the upload directory\n    if not os.path.abspath(file_path).startswith(upload_dir):\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Acceso no autorizado al archivo\"\n        )\n    \n    # Eliminar el archivo del sistema de archivos si existe\n    if os.path.exists(file_path):\n        os.remove(file_path)\n    \n    # Actualizar el cliente removiendo la referencia al PDF (using direct CRUD method to bypass schema)\n    customer_crud.update_tourism_pdf(db=db, customer_id=customer_id, pdf_filename=None, regime_active=False, expiry_date=None)\n    \n    return {\n        \"message\": \"PDF del r√©gimen de turismo eliminado exitosamente\",\n        \"customer_id\": customer_id\n    }","size_bytes":14446},"app/api/quotes.py":{"content":"from typing import List, Optional\nfrom datetime import date\nfrom fastapi import APIRouter, Depends, HTTPException, status, Query\nfrom sqlalchemy.orm import Session\n\nfrom app.core.database import get_database\nfrom app.core.dependencies import get_current_active_user, check_user_limits\nfrom app.crud.quote import quote_crud\nfrom app.schemas.quote import (\n    Quote, QuoteCreate, QuoteUpdate, QuoteList, QuoteStatus, QuotePDFResponse, QuoteLine, parse_quote_status\n)\nfrom app.services.pdf_generator import pdf_generator\nfrom app.models.user import User\n\nrouter = APIRouter(prefix=\"/quotes\", tags=[\"cotizaciones\"])\n\n@router.get(\"/\", response_model=List[QuoteList])\ndef list_quotes(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    skip: int = Query(0, ge=0, description=\"N√∫mero de registros a omitir\"),\n    limit: int = Query(100, ge=1, le=1000, description=\"L√≠mite de registros\"),\n    customer_id: Optional[int] = Query(None, description=\"Filtrar por cliente\"),\n    status: Optional[QuoteStatus] = Query(None, description=\"Filtrar por estado\"),\n    date_from: Optional[date] = Query(None, description=\"Fecha desde\"),\n    date_to: Optional[date] = Query(None, description=\"Fecha hasta\"),\n    search: Optional[str] = Query(None, description=\"Buscar por n√∫mero, cliente o notas\")\n):\n    \"\"\"Obtener lista de cotizaciones con filtros opcionales\"\"\"\n    quotes = quote_crud.get_multi(\n        db=db,\n        skip=skip,\n        limit=limit,\n        customer_id=customer_id,\n        status=status,\n        date_from=date_from,\n        date_to=date_to,\n        search=search\n    )\n    \n    # Mapear a QuoteList (solo campos necesarios para listado)\n    quotes_list = []\n    for quote in quotes:\n        quote_list = QuoteList(\n            id=quote.id,\n            quote_number=quote.quote_number,\n            customer_id=quote.customer_id,\n            customer_name=quote.customer.company_name if quote.customer else \"\",\n            quote_date=quote.quote_date,\n            valid_until=quote.valid_until,\n            status=parse_quote_status(str(quote.status)),\n            total_amount=quote.total_amount,\n            created_at=quote.created_at\n        )\n        quotes_list.append(quote_list)\n    \n    return quotes_list\n\n@router.get(\"/{quote_id}\", response_model=Quote)\ndef get_quote(\n    quote_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener cotizaci√≥n espec√≠fica por ID\"\"\"\n    quote = quote_crud.get(db=db, quote_id=quote_id)\n    if not quote:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cotizaci√≥n no encontrada\"\n        )\n    \n    # Convertir a esquema de respuesta\n    quote_response = Quote(\n        id=quote.id,\n        quote_number=quote.quote_number,\n        customer_id=quote.customer_id,\n        quote_date=quote.quote_date,\n        valid_until=quote.valid_until,\n        status=parse_quote_status(str(quote.status)),\n        subtotal=quote.subtotal,\n        tax_amount=quote.tax_amount,\n        total_amount=quote.total_amount,\n        notes=quote.notes,\n        terms_conditions=quote.terms_conditions,\n        created_by_id=quote.created_by_id,\n        created_at=quote.created_at,\n        updated_at=quote.updated_at,\n        lines=[],\n        customer_name=quote.customer.company_name if quote.customer else \"\",\n        customer_email=quote.customer.email if quote.customer else \"\"\n    )\n    \n    # Agregar l√≠neas\n    for line in quote.lines:\n        quote_line = QuoteLine(\n            id=line.id,\n            quote_id=line.quote_id,\n            product_id=line.product_id,\n            quantity=line.quantity,\n            unit_price=line.unit_price,\n            discount_percent=line.discount_percent,\n            line_total=line.line_total,\n            description=line.description\n        )\n        quote_response.lines.append(quote_line)\n    \n    return quote_response\n\n@router.post(\"/\", response_model=Quote)\ndef create_quote(\n    quote_in: QuoteCreate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    _: User = Depends(check_user_limits('quotes'))\n):\n    \"\"\"Crear nueva cotizaci√≥n\"\"\"\n    try:\n        quote = quote_crud.create(\n            db=db,\n            quote_in=quote_in,\n            created_by_id=int(current_user.id)\n        )\n        \n        # Obtener la cotizaci√≥n completa con relaciones\n        created_quote = quote_crud.get(db=db, quote_id=int(quote.id))\n        if not created_quote:\n            raise HTTPException(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                detail=\"Error al obtener la cotizaci√≥n creada\"\n            )\n        \n        # Convertir a esquema de respuesta\n        quote_response = Quote(\n            id=created_quote.id,\n            quote_number=created_quote.quote_number,\n            customer_id=created_quote.customer_id,\n            quote_date=created_quote.quote_date,\n            valid_until=created_quote.valid_until,\n            status=parse_quote_status(str(created_quote.status)),\n            subtotal=created_quote.subtotal,\n            tax_amount=created_quote.tax_amount,\n            total_amount=created_quote.total_amount,\n            notes=created_quote.notes,\n            terms_conditions=created_quote.terms_conditions,\n            created_by_id=created_quote.created_by_id,\n            created_at=created_quote.created_at,\n            updated_at=created_quote.updated_at,\n            lines=[],\n            customer_name=created_quote.customer.company_name if created_quote.customer else \"\",\n            customer_email=created_quote.customer.email if created_quote.customer else \"\"\n        )\n        \n        # Agregar l√≠neas\n        for line in created_quote.lines:\n            quote_line = QuoteLine(\n                id=line.id,\n                quote_id=line.quote_id,\n                product_id=line.product_id,\n                quantity=line.quantity,\n                unit_price=line.unit_price,\n                discount_percent=line.discount_percent,\n                line_total=line.line_total,\n                description=line.description\n            )\n            quote_response.lines.append(quote_line)\n        \n        return quote_response\n        \n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.put(\"/{quote_id}\", response_model=Quote)\ndef update_quote(\n    quote_id: int,\n    quote_in: QuoteUpdate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar cotizaci√≥n existente\"\"\"\n    db_quote = quote_crud.get(db=db, quote_id=quote_id)\n    if not db_quote:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cotizaci√≥n no encontrada\"\n        )\n    \n    # Solo permitir actualizaci√≥n si est√° en borrador\n    if parse_quote_status(str(db_quote.status)) != QuoteStatus.draft:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Solo se pueden actualizar cotizaciones en borrador\"\n        )\n    \n    try:\n        quote = quote_crud.update(db=db, db_quote=db_quote, quote_in=quote_in)\n        \n        # Obtener la cotizaci√≥n actualizada con relaciones\n        updated_quote = quote_crud.get(db=db, quote_id=int(quote.id))\n        if not updated_quote:\n            raise HTTPException(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                detail=\"Error al obtener la cotizaci√≥n actualizada\"\n            )\n        \n        # Convertir a esquema de respuesta\n        quote_response = Quote(\n            id=updated_quote.id,\n            quote_number=updated_quote.quote_number,\n            customer_id=updated_quote.customer_id,\n            quote_date=updated_quote.quote_date,\n            valid_until=updated_quote.valid_until,\n            status=parse_quote_status(str(updated_quote.status)),\n            subtotal=updated_quote.subtotal,\n            tax_amount=updated_quote.tax_amount,\n            total_amount=updated_quote.total_amount,\n            notes=updated_quote.notes,\n            terms_conditions=updated_quote.terms_conditions,\n            created_by_id=updated_quote.created_by_id,\n            created_at=updated_quote.created_at,\n            updated_at=updated_quote.updated_at,\n            lines=[],\n            customer_name=updated_quote.customer.company_name if updated_quote.customer else \"\",\n            customer_email=updated_quote.customer.email if updated_quote.customer else \"\"\n        )\n        \n        # Agregar l√≠neas\n        for line in updated_quote.lines:\n            quote_line = QuoteLine(\n                id=line.id,\n                quote_id=line.quote_id,\n                product_id=line.product_id,\n                quantity=line.quantity,\n                unit_price=line.unit_price,\n                discount_percent=line.discount_percent,\n                line_total=line.line_total,\n                description=line.description\n            )\n            quote_response.lines.append(quote_line)\n        \n        return quote_response\n        \n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.patch(\"/{quote_id}/status\")\ndef update_quote_status(\n    quote_id: int,\n    new_status: QuoteStatus,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar estado de cotizaci√≥n\"\"\"\n    quote = quote_crud.update_status(db=db, quote_id=quote_id, status=new_status)\n    if not quote:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cotizaci√≥n no encontrada\"\n        )\n    \n    return {\"message\": f\"Estado de cotizaci√≥n actualizado a {new_status.value}\"}\n\n@router.delete(\"/{quote_id}\")\ndef delete_quote(\n    quote_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Eliminar cotizaci√≥n (solo si est√° en borrador)\"\"\"\n    success = quote_crud.delete(db=db, quote_id=quote_id)\n    if not success:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"No se puede eliminar la cotizaci√≥n. Solo se permiten eliminar cotizaciones en borrador.\"\n        )\n    \n    return {\"message\": \"Cotizaci√≥n eliminada exitosamente\"}\n\n@router.get(\"/{quote_id}/pdf\", response_model=QuotePDFResponse)\ndef generate_quote_pdf(\n    quote_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Generar PDF de cotizaci√≥n\"\"\"\n    quote = quote_crud.get(db=db, quote_id=quote_id)\n    if not quote:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cotizaci√≥n no encontrada\"\n        )\n    \n    try:\n        # Generar PDF\n        pdf_path = pdf_generator.generate_quote_pdf(quote)\n        filename = f\"cotizacion_{quote.quote_number}.pdf\"\n        \n        return QuotePDFResponse(\n            quote_id=quote.id,\n            pdf_filename=filename,\n            download_url=f\"/api/quotes/{quote_id}/pdf/download\"\n        )\n        \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error generando PDF: {str(e)}\"\n        )\n\n@router.get(\"/{quote_id}/pdf/download\")\ndef download_quote_pdf(\n    quote_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Descargar PDF de cotizaci√≥n\"\"\"\n    quote = quote_crud.get(db=db, quote_id=quote_id)\n    if not quote:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Cotizaci√≥n no encontrada\"\n        )\n    \n    from fastapi.responses import FileResponse\n    import os\n    \n    try:\n        # Generar PDF si no existe\n        pdf_path = pdf_generator.generate_quote_pdf(quote)\n        \n        if not os.path.exists(pdf_path):\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND,\n                detail=\"Archivo PDF no encontrado\"\n            )\n        \n        filename = f\"cotizacion_{quote.quote_number}.pdf\"\n        return FileResponse(\n            path=pdf_path,\n            filename=filename,\n            media_type=\"application/pdf\"\n        )\n        \n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=f\"Error descargando PDF: {str(e)}\"\n        )","size_bytes":12739},"app/api/users.py":{"content":"from typing import List\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\n\nfrom app.core.database import get_database\nfrom app.core.dependencies import get_current_user, get_current_active_user, get_current_superuser, get_admin_only, get_admin_or_manager\nfrom app.crud.user import user_crud\nfrom app.schemas.auth import User, UserCreate, UserUpdate\nfrom app.models.user import User as UserModel\n\nrouter = APIRouter(prefix=\"/users\", tags=[\"usuarios\"])\n\n@router.get(\"/me\", response_model=User)\ndef get_current_user_info(\n    current_user: UserModel = Depends(get_current_active_user)\n):\n    \"\"\"Obtener informaci√≥n del usuario actual\"\"\"\n    return current_user\n\n@router.get(\"/\", response_model=List[User])\ndef list_users(\n    db: Session = Depends(get_database),\n    current_user: UserModel = Depends(get_admin_or_manager),\n    skip: int = 0,\n    limit: int = 100\n):\n    \"\"\"Listar todos los usuarios (admin o manager)\"\"\"\n    users = db.query(UserModel).offset(skip).limit(limit).all()\n    return users\n\n@router.post(\"/\", response_model=User)\ndef create_user(\n    user_in: UserCreate,\n    db: Session = Depends(get_database),\n    current_user: UserModel = Depends(get_admin_only)\n):\n    \"\"\"Crear nuevo usuario (solo administradores)\"\"\"\n    # Verificar si el usuario ya existe\n    user = user_crud.get_by_email(db, email=user_in.email)\n    if user:\n        raise HTTPException(\n            status_code=400,\n            detail=\"El email ya est√° registrado\"\n        )\n    \n    user = user_crud.get_by_username(db, username=user_in.username)\n    if user:\n        raise HTTPException(\n            status_code=400,\n            detail=\"El nombre de usuario ya est√° en uso\"\n        )\n    \n    # Crear nuevo usuario\n    user = user_crud.create(db, user_in=user_in)\n    return user\n\n@router.get(\"/{user_id}\", response_model=User)\ndef get_user(\n    user_id: int,\n    db: Session = Depends(get_database),\n    current_user: UserModel = Depends(get_admin_or_manager)\n):\n    \"\"\"Obtener usuario por ID (admin o manager)\"\"\"\n    user = user_crud.get(db, user_id=user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"Usuario no encontrado\")\n    return user\n\n@router.put(\"/{user_id}\", response_model=User)\ndef update_user(\n    user_id: int,\n    user_in: UserUpdate,\n    db: Session = Depends(get_database),\n    current_user: UserModel = Depends(get_admin_only)\n):\n    \"\"\"Actualizar usuario por ID (solo administradores)\"\"\"\n    user = user_crud.get(db, user_id=user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"Usuario no encontrado\")\n    \n    # Prevent downgrading superuser status unless current user is superuser\n    if not current_user.is_superuser and user.is_superuser:\n        raise HTTPException(\n            status_code=403,\n            detail=\"No se puede modificar un superusuario\"\n        )\n    \n    # Update user\n    updated_user = user_crud.update(db, db_user=user, user_in=user_in)\n    return updated_user\n\n@router.get(\"/usage/{user_id}\")\ndef get_user_usage_stats(\n    user_id: int,\n    db: Session = Depends(get_database),\n    current_user: UserModel = Depends(get_admin_or_manager)\n):\n    \"\"\"Obtener estad√≠sticas de uso del usuario (admin o manager)\"\"\"\n    from app.crud.usage_limits import get_user_limits_summary\n    \n    user = user_crud.get(db, user_id=user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"Usuario no encontrado\")\n    \n    user_limits = {\n        \"max_customers\": user.max_customers,\n        \"max_quotes\": user.max_quotes,\n        \"max_orders\": user.max_orders,\n        \"max_invoices\": user.max_invoices\n    }\n    \n    return get_user_limits_summary(db, user_id, user_limits)\n\n@router.put(\"/me\", response_model=User)\ndef update_current_user(\n    user_in: UserUpdate,\n    db: Session = Depends(get_database),\n    current_user: UserModel = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar informaci√≥n del usuario actual\"\"\"\n    # Los usuarios no pueden cambiar su propio estado is_superuser\n    if user_in.dict().get(\"is_superuser\") is not None:\n        del user_in.__dict__[\"is_superuser\"]\n    \n    user = user_crud.update(db, db_user=current_user, user_in=user_in)\n    return user","size_bytes":4228},"app/core/auth.py":{"content":"from datetime import datetime, timedelta\nfrom typing import Optional\nfrom jose import JWTError, jwt\nfrom passlib.context import CryptContext\nfrom fastapi import HTTPException, status\nfrom .config import settings\n\n# Configuraci√≥n de password hashing\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"Verificar password contra hash\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password: str) -> str:\n    \"\"\"Generar hash de password\"\"\"\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    \"\"\"Crear JWT token\"\"\"\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=settings.access_token_expire_minutes)\n    \n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, settings.secret_key, algorithm=settings.algorithm)\n    return encoded_jwt\n\ndef verify_token(token: str) -> Optional[str]:\n    \"\"\"Verificar y decodificar JWT token\"\"\"\n    try:\n        payload = jwt.decode(token, settings.secret_key, algorithms=[settings.algorithm])\n        username = payload.get(\"sub\")\n        if username is None or not isinstance(username, str):\n            return None\n        return username\n    except JWTError:\n        return None\n\ndef create_user_token(user_id: int, username: str) -> str:\n    \"\"\"Crear token para usuario espec√≠fico\"\"\"\n    token_data = {\"sub\": username, \"user_id\": user_id}\n    return create_access_token(data=token_data)","size_bytes":1669},"app/core/config.py":{"content":"import os\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    # Database\n    database_url: str = os.getenv(\"DATABASE_URL\", \"\")\n    \n    # JWT\n    secret_key: str = os.getenv(\"SECRET_KEY\", \"your-secret-key-here-change-in-production\")\n    algorithm: str = \"HS256\"\n    access_token_expire_minutes: int = 30\n    \n    # CORS\n    backend_cors_origins: list = [\"*\"]\n    \n    # Redis\n    redis_url: str = os.getenv(\"REDIS_URL\", \"redis://localhost:6379\")\n    \n    # Email\n    mail_username: str = os.getenv(\"MAIL_USERNAME\", \"\")\n    mail_password: str = os.getenv(\"MAIL_PASSWORD\", \"\")\n    mail_from: str = os.getenv(\"MAIL_FROM\", \"\")\n    mail_port: int = int(os.getenv(\"MAIL_PORT\", 587))\n    mail_server: str = os.getenv(\"MAIL_SERVER\", \"\")\n    \n    class Config:\n        case_sensitive = True\n\nsettings = Settings()","size_bytes":830},"app/core/database.py":{"content":"from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nfrom .config import settings\n\nengine = create_engine(\n    settings.database_url,\n    pool_pre_ping=True,\n    pool_recycle=300,\n)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\nBase = declarative_base()\n\ndef get_database():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()","size_bytes":467},"app/core/dependencies.py":{"content":"from typing import Optional\nfrom fastapi import Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy.orm import Session\n\nfrom app.core.database import get_database\nfrom app.core.auth import verify_token\nfrom app.crud.user import user_crud\nfrom app.models.user import User\n\n# Configurar security scheme\nsecurity = HTTPBearer()\n\ndef get_current_user(\n    db: Session = Depends(get_database),\n    credentials: HTTPAuthorizationCredentials = Depends(security)\n) -> User:\n    \"\"\"Obtener usuario actual desde JWT token\"\"\"\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"No se pudieron validar las credenciales\",\n        headers={\"WWW-Authenticate\": \"Bearer\"},\n    )\n    \n    username = verify_token(credentials.credentials)\n    if username is None:\n        raise credentials_exception\n        \n    user = user_crud.get_by_username(db, username=username)\n    if user is None:\n        raise credentials_exception\n        \n    return user\n\ndef get_current_active_user(current_user: User = Depends(get_current_user)) -> User:\n    \"\"\"Obtener usuario actual activo\"\"\"\n    if not user_crud.is_active(current_user):\n        raise HTTPException(status_code=400, detail=\"Usuario inactivo\")\n    return current_user\n\ndef get_current_superuser(current_user: User = Depends(get_current_user)) -> User:\n    \"\"\"Obtener usuario actual que sea superusuario\"\"\"\n    if not user_crud.is_superuser(current_user):\n        raise HTTPException(\n            status_code=400, \n            detail=\"El usuario no tiene suficientes privilegios\"\n        )\n    return current_user\n\n# ===== NEW ROLE-BASED ACCESS CONTROL =====\n\ndef get_admin_or_manager(current_user: User = Depends(get_current_user)) -> User:\n    \"\"\"Requiere usuario con rol admin o manager\"\"\"\n    from app.models.user import UserRole\n    \n    allowed_roles = [UserRole.ADMIN, UserRole.MANAGER]\n    if current_user.role not in allowed_roles and not bool(current_user.is_superuser):  # type: ignore\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Acceso denegado: Se requiere rol de administrador o gerente\"\n        )\n    return current_user\n\ndef get_admin_only(current_user: User = Depends(get_current_user)) -> User:\n    \"\"\"Requiere usuario con rol admin solamente\"\"\"\n    from app.models.user import UserRole\n    \n    if current_user.role != UserRole.ADMIN and not bool(current_user.is_superuser):  # type: ignore\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Acceso denegado: Se requiere rol de administrador\"\n        )\n    return current_user\n\ndef check_user_permission(permission: str):\n    \"\"\"Decorator para verificar permisos espec√≠ficos del usuario\"\"\"\n    def permission_checker(current_user: User = Depends(get_current_user)) -> User:\n        if bool(current_user.is_superuser):\n            return current_user\n            \n        # Check specific permissions\n        user_permissions = {\n            'manage_inventory': getattr(current_user, 'can_manage_inventory', False),\n            'view_reports': getattr(current_user, 'can_view_reports', False),\n            'manage_tourism_regime': getattr(current_user, 'can_manage_tourism_regime', False),\n            'manage_deposits': getattr(current_user, 'can_manage_deposits', False),\n            'export_data': getattr(current_user, 'can_export_data', False)\n        }\n        \n        if not user_permissions.get(permission, False):\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=f\"Acceso denegado: No tiene permisos para {permission}\"\n            )\n        return current_user\n    return permission_checker\n\n# ===== USAGE LIMIT ENFORCEMENT =====\n\ndef check_user_limits(limit_type: str):\n    \"\"\"Decorator para verificar l√≠mites de uso del usuario\"\"\"\n    def limit_checker(\n        current_user: User = Depends(get_current_user),\n        db: Session = Depends(get_database)\n    ) -> User:\n        from app.models.user import UserRole\n        \n        if bool(current_user.is_superuser) or current_user.role == UserRole.ADMIN:  # type: ignore\n            return current_user  # Admin users have no limits\n            \n        # Get current usage from database\n        from app.crud.usage_limits import get_user_usage\n        \n        current_usage = get_user_usage(db, int(current_user.id), limit_type)  # type: ignore\n        user_limits = {\n            'customers': int(getattr(current_user, 'max_customers', 0)),\n            'quotes': int(getattr(current_user, 'max_quotes', 0)),\n            'orders': int(getattr(current_user, 'max_orders', 0)),\n            'invoices': int(getattr(current_user, 'max_invoices', 0))\n        }\n        \n        max_allowed = user_limits.get(limit_type, 0)\n        \n        if current_usage >= max_allowed:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=f\"L√≠mite excedido: M√°ximo {max_allowed} {limit_type} permitidos para su rol ({current_user.role})\"\n            )\n        return current_user\n    return limit_checker","size_bytes":5202},"app/crud/__init__.py":{"content":"# CRUD operations package","size_bytes":25},"app/crud/customer.py":{"content":"from typing import List, Optional\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import and_, or_\n\nfrom app.models.customer import Customer, Contact\nfrom app.schemas.customer import CustomerCreate, CustomerUpdate, ContactCreate, ContactUpdate\n\nclass CustomerCRUD:\n    def get(self, db: Session, customer_id: int) -> Optional[Customer]:\n        \"\"\"Obtener cliente por ID\"\"\"\n        return db.query(Customer).filter(Customer.id == customer_id).first()\n    \n    def get_by_code(self, db: Session, customer_code: str) -> Optional[Customer]:\n        \"\"\"Obtener cliente por c√≥digo\"\"\"\n        return db.query(Customer).filter(Customer.customer_code == customer_code).first()\n    \n    def get_by_email(self, db: Session, email: str) -> Optional[Customer]:\n        \"\"\"Obtener cliente por email\"\"\"\n        return db.query(Customer).filter(Customer.email == email).first()\n    \n    def get_multi(\n        self, \n        db: Session, \n        skip: int = 0, \n        limit: int = 100,\n        search: Optional[str] = None,\n        is_active: Optional[bool] = None\n    ) -> List[Customer]:\n        \"\"\"Obtener m√∫ltiples clientes con filtros opcionales\"\"\"\n        query = db.query(Customer)\n        \n        if is_active is not None:\n            query = query.filter(Customer.is_active == is_active)\n        \n        if search:\n            search_filter = or_(\n                Customer.company_name.ilike(f\"%{search}%\"),\n                Customer.contact_name.ilike(f\"%{search}%\"),\n                Customer.customer_code.ilike(f\"%{search}%\"),\n                Customer.email.ilike(f\"%{search}%\")\n            )\n            query = query.filter(search_filter)\n        \n        return query.offset(skip).limit(limit).all()\n    \n    def create(self, db: Session, customer_in: CustomerCreate, created_by_id: int) -> Customer:\n        \"\"\"Crear nuevo cliente\"\"\"\n        # Generar c√≥digo de cliente autom√°ticamente\n        last_customer = db.query(Customer).order_by(Customer.id.desc()).first()\n        if last_customer:\n            last_number = int(last_customer.customer_code.replace(\"CLI\", \"\"))\n            new_number = last_number + 1\n        else:\n            new_number = 1\n        \n        customer_code = f\"CLI{new_number:06d}\"\n        \n        db_customer = Customer(\n            customer_code=customer_code,\n            created_by_id=created_by_id,\n            **customer_in.dict()\n        )\n        db.add(db_customer)\n        db.commit()\n        db.refresh(db_customer)\n        return db_customer\n    \n    def update(self, db: Session, db_customer: Customer, customer_in: CustomerUpdate) -> Customer:\n        \"\"\"Actualizar cliente existente\"\"\"\n        update_data = customer_in.dict(exclude_unset=True)\n        \n        # SECURITY: Prevent tourism_regime_pdf updates through general update (extra protection)\n        update_data.pop('tourism_regime_pdf', None)\n        \n        for field, value in update_data.items():\n            setattr(db_customer, field, value)\n        \n        db.add(db_customer)\n        db.commit()\n        db.refresh(db_customer)\n        return db_customer\n    \n    def update_tourism_pdf(\n        self, \n        db: Session, \n        customer_id: int, \n        pdf_filename: Optional[str], \n        regime_active: Optional[bool] = None,\n        expiry_date: Optional[str] = None\n    ) -> bool:\n        \"\"\"M√©todo seguro para actualizar √∫nicamente los campos relacionados con el PDF de turismo\"\"\"\n        db_customer = self.get(db, customer_id)\n        if not db_customer:\n            return False\n        \n        # Actualizar √∫nicamente campos espec√≠ficos del r√©gimen de turismo\n        if pdf_filename is not None:\n            setattr(db_customer, 'tourism_regime_pdf', pdf_filename)\n        \n        if regime_active is not None:\n            setattr(db_customer, 'tourism_regime', regime_active)\n            \n        if expiry_date is not None:\n            setattr(db_customer, 'tourism_regime_expiry', expiry_date)\n        \n        db.add(db_customer)\n        db.commit()\n        db.refresh(db_customer)\n        return True\n    \n    def delete(self, db: Session, customer_id: int) -> bool:\n        \"\"\"Eliminar cliente (soft delete)\"\"\"\n        db_customer = self.get(db, customer_id)\n        if db_customer:\n            setattr(db_customer, 'is_active', False)\n            db.add(db_customer)\n            db.commit()\n            return True\n        return False\n\nclass ContactCRUD:\n    def get(self, db: Session, contact_id: int) -> Optional[Contact]:\n        \"\"\"Obtener contacto por ID\"\"\"\n        return db.query(Contact).filter(Contact.id == contact_id).first()\n    \n    def get_by_customer(self, db: Session, customer_id: int) -> List[Contact]:\n        \"\"\"Obtener todos los contactos de un cliente\"\"\"\n        return db.query(Contact).filter(\n            and_(Contact.customer_id == customer_id, Contact.is_active == True)\n        ).all()\n    \n    def get_primary_contact(self, db: Session, customer_id: int) -> Optional[Contact]:\n        \"\"\"Obtener contacto principal de un cliente\"\"\"\n        return db.query(Contact).filter(\n            and_(\n                Contact.customer_id == customer_id,\n                Contact.is_primary == True,\n                Contact.is_active == True\n            )\n        ).first()\n    \n    def create(self, db: Session, contact_in: ContactCreate) -> Contact:\n        \"\"\"Crear nuevo contacto\"\"\"\n        # Si es contacto principal, desactivar otros contactos principales del mismo cliente\n        if contact_in.is_primary:\n            db.query(Contact).filter(\n                and_(Contact.customer_id == contact_in.customer_id, Contact.is_primary == True)\n            ).update({\"is_primary\": False})\n        \n        db_contact = Contact(**contact_in.dict())\n        db.add(db_contact)\n        db.commit()\n        db.refresh(db_contact)\n        return db_contact\n    \n    def update(self, db: Session, db_contact: Contact, contact_in: ContactUpdate) -> Contact:\n        \"\"\"Actualizar contacto existente\"\"\"\n        update_data = contact_in.dict(exclude_unset=True)\n        \n        # Si se marca como principal, desactivar otros contactos principales del mismo cliente\n        if update_data.get(\"is_primary\"):\n            db.query(Contact).filter(\n                and_(\n                    Contact.customer_id == db_contact.customer_id,\n                    Contact.id != db_contact.id,\n                    Contact.is_primary == True\n                )\n            ).update({\"is_primary\": False})\n        \n        for field, value in update_data.items():\n            setattr(db_contact, field, value)\n        \n        db.add(db_contact)\n        db.commit()\n        db.refresh(db_contact)\n        return db_contact\n    \n    def delete(self, db: Session, contact_id: int) -> bool:\n        \"\"\"Eliminar contacto (soft delete)\"\"\"\n        db_contact = self.get(db, contact_id)\n        if db_contact:\n            setattr(db_contact, 'is_active', False)\n            db.add(db_contact)\n            db.commit()\n            return True\n        return False\n\n# Instancias globales\ncustomer_crud = CustomerCRUD()\ncontact_crud = ContactCRUD()","size_bytes":7090},"app/crud/quote.py":{"content":"from typing import List, Optional\nfrom datetime import date, datetime\nfrom decimal import Decimal\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import and_, or_, desc\n\nfrom app.models.sales import Quote, QuoteLine\nfrom app.models.customer import Customer\nfrom app.models.product import Product\nfrom app.schemas.quote import QuoteCreate, QuoteUpdate, QuoteStatus\n\nclass QuoteCRUD:\n    def get(self, db: Session, quote_id: int) -> Optional[Quote]:\n        \"\"\"Obtener cotizaci√≥n por ID\"\"\"\n        return db.query(Quote).filter(Quote.id == quote_id).first()\n    \n    def get_by_number(self, db: Session, quote_number: str) -> Optional[Quote]:\n        \"\"\"Obtener cotizaci√≥n por n√∫mero\"\"\"\n        return db.query(Quote).filter(Quote.quote_number == quote_number).first()\n    \n    def get_multi(\n        self, \n        db: Session, \n        skip: int = 0, \n        limit: int = 100,\n        customer_id: Optional[int] = None,\n        status: Optional[QuoteStatus] = None,\n        date_from: Optional[date] = None,\n        date_to: Optional[date] = None,\n        search: Optional[str] = None\n    ) -> List[Quote]:\n        \"\"\"Obtener m√∫ltiples cotizaciones con filtros\"\"\"\n        query = db.query(Quote).join(Customer)\n        \n        if customer_id:\n            query = query.filter(Quote.customer_id == customer_id)\n        \n        if status:\n            query = query.filter(Quote.status == status.value)\n        \n        if date_from:\n            query = query.filter(Quote.quote_date >= date_from)\n        \n        if date_to:\n            query = query.filter(Quote.quote_date <= date_to)\n        \n        if search:\n            search_filter = or_(\n                Quote.quote_number.ilike(f\"%{search}%\"),\n                Customer.company_name.ilike(f\"%{search}%\"),\n                Quote.notes.ilike(f\"%{search}%\")\n            )\n            query = query.filter(search_filter)\n        \n        return query.order_by(desc(Quote.created_at)).offset(skip).limit(limit).all()\n    \n    def create(self, db: Session, quote_in: QuoteCreate, created_by_id: int) -> Quote:\n        \"\"\"Crear nueva cotizaci√≥n\"\"\"\n        # Generar n√∫mero de cotizaci√≥n\n        today = datetime.now()\n        year_month = today.strftime(\"%Y%m\")\n        \n        # Buscar el √∫ltimo n√∫mero de cotizaci√≥n del mes\n        last_quote = db.query(Quote).filter(\n            Quote.quote_number.like(f\"COT{year_month}%\")\n        ).order_by(desc(Quote.quote_number)).first()\n        \n        if last_quote:\n            last_number = int(last_quote.quote_number[-4:])\n            new_number = last_number + 1\n        else:\n            new_number = 1\n        \n        quote_number = f\"COT{year_month}{new_number:04d}\"\n        \n        # Crear cotizaci√≥n\n        db_quote = Quote(\n            quote_number=quote_number,\n            customer_id=quote_in.customer_id,\n            quote_date=quote_in.quote_date,\n            valid_until=quote_in.valid_until,\n            status=QuoteStatus.draft.value,\n            notes=quote_in.notes,\n            terms_conditions=quote_in.terms_conditions,\n            created_by_id=created_by_id\n        )\n        \n        db.add(db_quote)\n        db.flush()  # Para obtener el ID\n        \n        # Crear l√≠neas de cotizaci√≥n\n        total_subtotal = Decimal(\"0.00\")\n        for line_data in quote_in.lines:\n            # Obtener informaci√≥n del producto\n            product = db.query(Product).filter(Product.id == line_data.product_id).first()\n            if not product:\n                raise ValueError(f\"Producto con ID {line_data.product_id} no encontrado\")\n            \n            # Calcular total de la l√≠nea\n            line_subtotal = Decimal(str(line_data.quantity)) * line_data.unit_price\n            discount_amount = line_subtotal * (line_data.discount_percent / 100)\n            line_total = line_subtotal - discount_amount\n            \n            db_line = QuoteLine(\n                quote_id=db_quote.id,\n                product_id=line_data.product_id,\n                quantity=line_data.quantity,\n                unit_price=line_data.unit_price,\n                discount_percent=line_data.discount_percent,\n                line_total=line_total,\n                description=line_data.description\n            )\n            db.add(db_line)\n            total_subtotal += line_total\n        \n        # Calcular totales - verificar exenci√≥n de impuestos por r√©gimen de turismo\n        db_quote.subtotal = total_subtotal\n        \n        # Obtener informaci√≥n del cliente para verificar r√©gimen de turismo\n        customer = db.query(Customer).filter(Customer.id == quote_in.customer_id).first()\n        \n        # Verificar si cliente tiene r√©gimen de turismo activo (no vencido)\n        tax_exempt = False\n        if customer and customer.tourism_regime:\n            if customer.tourism_regime_expiry and customer.tourism_regime_expiry >= date.today():\n                tax_exempt = True\n        \n        if tax_exempt:\n            # Cliente con r√©gimen de turismo v√°lido - exento de impuestos\n            db_quote.tax_amount = Decimal(\"0.00\")\n        else:\n            # Aplicar IVA normal (16%)\n            tax_rate = Decimal(\"0.16\")\n            db_quote.tax_amount = total_subtotal * tax_rate\n            \n        db_quote.total_amount = total_subtotal + db_quote.tax_amount\n        \n        db.commit()\n        db.refresh(db_quote)\n        return db_quote\n    \n    def update(self, db: Session, db_quote: Quote, quote_in: QuoteUpdate) -> Quote:\n        \"\"\"Actualizar cotizaci√≥n existente\"\"\"\n        update_data = quote_in.dict(exclude_unset=True, exclude={\"lines\"})\n        \n        # Actualizar campos de la cotizaci√≥n\n        for field, value in update_data.items():\n            setattr(db_quote, field, value)\n        \n        # Si se proporcionan l√≠neas, actualizar la lista completa\n        if quote_in.lines is not None:\n            # Eliminar l√≠neas existentes\n            db.query(QuoteLine).filter(QuoteLine.quote_id == db_quote.id).delete()\n            \n            # Crear nuevas l√≠neas\n            total_subtotal = Decimal(\"0.00\")\n            for line_data in quote_in.lines:\n                # Obtener informaci√≥n del producto\n                product = db.query(Product).filter(Product.id == line_data.product_id).first()\n                if not product:\n                    raise ValueError(f\"Producto con ID {line_data.product_id} no encontrado\")\n                \n                # Calcular total de la l√≠nea\n                line_subtotal = Decimal(str(line_data.quantity)) * line_data.unit_price\n                discount_amount = line_subtotal * (line_data.discount_percent / 100)\n                line_total = line_subtotal - discount_amount\n                \n                db_line = QuoteLine(\n                    quote_id=db_quote.id,\n                    product_id=line_data.product_id,\n                    quantity=line_data.quantity,\n                    unit_price=line_data.unit_price,\n                    discount_percent=line_data.discount_percent,\n                    line_total=line_total,\n                    description=line_data.description\n                )\n                db.add(db_line)\n                total_subtotal += line_total\n            \n            # Recalcular totales - verificar exenci√≥n de impuestos por r√©gimen de turismo\n            db_quote.subtotal = total_subtotal\n            \n            # Obtener informaci√≥n del cliente para verificar r√©gimen de turismo\n            customer = db.query(Customer).filter(Customer.id == db_quote.customer_id).first()\n            \n            # Verificar si cliente tiene r√©gimen de turismo activo (no vencido)\n            tax_exempt = False\n            if customer and customer.tourism_regime:\n                if customer.tourism_regime_expiry and customer.tourism_regime_expiry >= date.today():\n                    tax_exempt = True\n            \n            if tax_exempt:\n                # Cliente con r√©gimen de turismo v√°lido - exento de impuestos\n                db_quote.tax_amount = Decimal(\"0.00\")\n            else:\n                # Aplicar IVA normal (16%)\n                tax_rate = Decimal(\"0.16\")\n                db_quote.tax_amount = total_subtotal * tax_rate\n                \n            db_quote.total_amount = total_subtotal + db_quote.tax_amount\n        \n        db.add(db_quote)\n        db.commit()\n        db.refresh(db_quote)\n        return db_quote\n    \n    def update_status(self, db: Session, quote_id: int, status: QuoteStatus) -> Optional[Quote]:\n        \"\"\"Actualizar estado de cotizaci√≥n\"\"\"\n        db_quote = self.get(db, quote_id)\n        if db_quote:\n            db_quote.status = status.value\n            db.add(db_quote)\n            db.commit()\n            db.refresh(db_quote)\n        return db_quote\n    \n    def delete(self, db: Session, quote_id: int) -> bool:\n        \"\"\"Eliminar cotizaci√≥n (solo si est√° en borrador)\"\"\"\n        db_quote = self.get(db, quote_id)\n        if db_quote and db_quote.status == QuoteStatus.draft.value:\n            db.delete(db_quote)\n            db.commit()\n            return True\n        return False\n    \n    def get_expired_quotes(self, db: Session) -> List[Quote]:\n        \"\"\"Obtener cotizaciones vencidas que no han sido marcadas como expiradas\"\"\"\n        today = date.today()\n        return db.query(Quote).filter(\n            and_(\n                Quote.valid_until < today,\n                Quote.status.in_([QuoteStatus.draft.value, QuoteStatus.sent.value])\n            )\n        ).all()\n\n# Instancia global\nquote_crud = QuoteCRUD()","size_bytes":9547},"app/crud/user.py":{"content":"from typing import Optional\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import and_\n\nfrom app.models.user import User\nfrom app.schemas.auth import UserCreate, UserUpdate\nfrom app.core.auth import get_password_hash, verify_password\n\nclass CRUDUser:\n    def get(self, db: Session, user_id: int) -> Optional[User]:\n        \"\"\"Obtener usuario por ID\"\"\"\n        return db.query(User).filter(User.id == user_id).first()\n    \n    def get_by_email(self, db: Session, email: str) -> Optional[User]:\n        \"\"\"Obtener usuario por email\"\"\"\n        return db.query(User).filter(User.email == email).first()\n    \n    def get_by_username(self, db: Session, username: str) -> Optional[User]:\n        \"\"\"Obtener usuario por username\"\"\"\n        return db.query(User).filter(User.username == username).first()\n    \n    def create(self, db: Session, user_in: UserCreate) -> User:\n        \"\"\"Crear nuevo usuario\"\"\"\n        hashed_password = get_password_hash(user_in.password)\n        db_user = User(\n            email=user_in.email,\n            username=user_in.username,\n            full_name=user_in.full_name,\n            hashed_password=hashed_password,\n            is_active=user_in.is_active,\n        )\n        db.add(db_user)\n        db.commit()\n        db.refresh(db_user)\n        return db_user\n    \n    def update(self, db: Session, db_user: User, user_in: UserUpdate) -> User:\n        \"\"\"Actualizar usuario\"\"\"\n        update_data = user_in.dict(exclude_unset=True)\n        \n        if \"password\" in update_data:\n            hashed_password = get_password_hash(update_data[\"password\"])\n            del update_data[\"password\"]\n            update_data[\"hashed_password\"] = hashed_password\n            \n        for field, value in update_data.items():\n            setattr(db_user, field, value)\n            \n        db.commit()\n        db.refresh(db_user)\n        return db_user\n    \n    def authenticate(self, db: Session, username: str, password: str) -> Optional[User]:\n        \"\"\"Autenticar usuario\"\"\"\n        user = self.get_by_username(db, username=username)\n        if not user:\n            user = self.get_by_email(db, email=username)\n        if not user or not verify_password(password, str(user.hashed_password)):\n            return None\n        return user\n    \n    def is_active(self, user: User) -> bool:\n        \"\"\"Verificar si usuario est√° activo\"\"\"\n        return bool(user.is_active)\n    \n    def is_superuser(self, user: User) -> bool:\n        \"\"\"Verificar si usuario es superusuario\"\"\"\n        return bool(user.is_superuser)\n\n# Instancia √∫nica del CRUD\nuser_crud = CRUDUser()","size_bytes":2592},"app/models/__init__.py":{"content":"# Models package - Import all models to register them with SQLAlchemy\nfrom .user import User, UserRole\nfrom .customer import Customer, Contact\nfrom .product import Product\nfrom .sales import Quote, SalesOrder, QuoteLine, SalesOrderLine\nfrom .invoice import Invoice, InvoiceLine, Payment\nfrom .deposit import Deposit, DepositApplication, CustomerDepositSummary, DepositType, DepositStatus\nfrom .company import CompanySettings, CurrencyType, PrintFormat\n\n# Export all models for easy imports\n__all__ = [\n    \"User\", \"UserRole\",\n    \"Customer\", \"Contact\", \n    \"Product\",\n    \"Quote\", \"SalesOrder\", \"QuoteLine\", \"SalesOrderLine\",\n    \"Invoice\", \"InvoiceLine\", \"Payment\",\n    \"Deposit\", \"DepositApplication\", \"CustomerDepositSummary\", \"DepositType\", \"DepositStatus\",\n    \"CompanySettings\", \"CurrencyType\", \"PrintFormat\"\n]","size_bytes":817},"app/models/customer.py":{"content":"from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey, Numeric, Date\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Customer(Base):\n    __tablename__ = \"customers\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    customer_code = Column(String, unique=True, index=True, nullable=False)\n    company_name = Column(String, nullable=False)\n    contact_name = Column(String)\n    email = Column(String, index=True)\n    phone = Column(String)\n    address = Column(Text)\n    city = Column(String)\n    state = Column(String)\n    postal_code = Column(String)\n    country = Column(String, default=\"Paraguay\")\n    tax_id = Column(String)  # RUC en Paraguay\n    credit_limit = Column(Numeric(10, 2), default=0)\n    payment_terms = Column(Integer, default=30)  # d√≠as\n    is_active = Column(Boolean, default=True)\n    \n    # Campos espec√≠ficos para r√©gimen de turismo Paraguay\n    tourism_regime = Column(Boolean, default=False)  # Cliente con r√©gimen de turismo (exento de impuestos)\n    tourism_regime_pdf = Column(String)  # Nombre del archivo PDF del r√©gimen\n    tourism_regime_expiry = Column(Date)  # Fecha de vencimiento del r√©gimen de turismo\n    \n    notes = Column(Text)\n    created_by_id = Column(Integer, ForeignKey(\"users.id\"))\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    # Relaciones\n    created_by = relationship(\"User\", back_populates=\"created_customers\")\n    contacts = relationship(\"Contact\", back_populates=\"customer\")\n    quotes = relationship(\"Quote\", back_populates=\"customer\")\n    orders = relationship(\"SalesOrder\", back_populates=\"customer\")\n    invoices = relationship(\"Invoice\", back_populates=\"customer\")\n    deposits = relationship(\"Deposit\", back_populates=\"customer\")\n    deposit_summary = relationship(\"CustomerDepositSummary\", back_populates=\"customer\", uselist=False)\n\nclass Contact(Base):\n    __tablename__ = \"contacts\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    customer_id = Column(Integer, ForeignKey(\"customers.id\"), nullable=False)\n    name = Column(String, nullable=False)\n    title = Column(String)\n    email = Column(String)\n    phone = Column(String)\n    mobile = Column(String)\n    is_primary = Column(Boolean, default=False)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Relaciones\n    customer = relationship(\"Customer\", back_populates=\"contacts\")","size_bytes":2616},"app/models/invoice.py":{"content":"from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey, Numeric, Date\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Invoice(Base):\n    __tablename__ = \"invoices\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    invoice_number = Column(String, unique=True, index=True, nullable=False)\n    sales_order_id = Column(Integer, ForeignKey(\"sales_orders.id\"))\n    customer_id = Column(Integer, ForeignKey(\"customers.id\"), nullable=False)\n    invoice_date = Column(Date, nullable=False)\n    due_date = Column(Date, nullable=False)\n    status = Column(String, default=\"PENDING\")  # PENDING, SENT, PAID, OVERDUE, CANCELLED\n    subtotal = Column(Numeric(12, 2), default=0)\n    tax_amount = Column(Numeric(12, 2), default=0)\n    total_amount = Column(Numeric(12, 2), default=0)\n    paid_amount = Column(Numeric(12, 2), default=0)\n    balance_due = Column(Numeric(12, 2), default=0)\n    currency = Column(String(3), default=\"PYG\", nullable=False)  # PYG, USD\n    notes = Column(Text)\n    payment_terms = Column(String)\n    \n    # CAMPOS FISCALES ESPEC√çFICOS PARA PARAGUAY\n    punto_expedicion = Column(String(10), nullable=True, comment=\"Punto de expedici√≥n (ej: 001)\")\n    condicion_venta = Column(String(20), default=\"CREDITO\", nullable=False, comment=\"CONTADO o CREDITO\")\n    lugar_emision = Column(String(100), nullable=True, comment=\"Ciudad de emisi√≥n de la factura\")\n    \n    # DESGLOSE DE IVA PARAGUAYO\n    subtotal_gravado_10 = Column(Numeric(12, 2), default=0, comment=\"Subtotal gravado al 10%\")\n    subtotal_gravado_5 = Column(Numeric(12, 2), default=0, comment=\"Subtotal gravado al 5%\")\n    subtotal_exento = Column(Numeric(12, 2), default=0, comment=\"Subtotal exento de IVA\")\n    iva_10 = Column(Numeric(12, 2), default=0, comment=\"IVA 10%\")\n    iva_5 = Column(Numeric(12, 2), default=0, comment=\"IVA 5%\")\n    \n    # R√âGIMEN DE TURISMO PARAGUAY\n    tourism_regime_applied = Column(Boolean, default=False, comment=\"Se aplic√≥ r√©gimen tur√≠stico\")\n    tourism_regime_percentage = Column(Numeric(5, 2), default=0, comment=\"Porcentaje de exenci√≥n tur√≠stica\")\n    \n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    # Relaciones\n    sales_order = relationship(\"SalesOrder\", back_populates=\"invoices\")\n    customer = relationship(\"Customer\", back_populates=\"invoices\")\n    lines = relationship(\"InvoiceLine\", back_populates=\"invoice\", cascade=\"all, delete-orphan\")\n    payments = relationship(\"Payment\", back_populates=\"invoice\")\n\nclass InvoiceLine(Base):\n    __tablename__ = \"invoice_lines\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    invoice_id = Column(Integer, ForeignKey(\"invoices.id\"), nullable=False)\n    product_id = Column(Integer, ForeignKey(\"products.id\"), nullable=False)\n    quantity = Column(Integer, nullable=False)\n    unit_price = Column(Numeric(10, 2), nullable=False)\n    discount_percent = Column(Numeric(5, 2), default=0)\n    line_total = Column(Numeric(12, 2), nullable=False)\n    description = Column(Text)\n    \n    # CAMPOS FISCALES PARA IVA PARAGUAYO\n    iva_category = Column(String(10), default=\"10\", nullable=False, comment=\"Categor√≠a IVA: 10, 5, EXENTO\")\n    iva_amount = Column(Numeric(10, 2), default=0, comment=\"Monto de IVA de esta l√≠nea\")\n    \n    # Relaciones\n    invoice = relationship(\"Invoice\", back_populates=\"lines\")\n    product = relationship(\"Product\", back_populates=\"invoice_lines\")\n\nclass Payment(Base):\n    __tablename__ = \"payments\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    invoice_id = Column(Integer, ForeignKey(\"invoices.id\"), nullable=False)\n    payment_date = Column(Date, nullable=False)\n    amount = Column(Numeric(12, 2), nullable=False)\n    payment_method = Column(String, nullable=False)  # CASH, TRANSFER, CHECK, CARD\n    reference_number = Column(String)\n    notes = Column(Text)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Relaciones\n    invoice = relationship(\"Invoice\", back_populates=\"payments\")","size_bytes":4161},"app/models/product.py":{"content":"from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey, Numeric, Date\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass ProductCategory(Base):\n    __tablename__ = \"product_categories\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, nullable=False)\n    description = Column(Text)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Relaciones\n    products = relationship(\"Product\", back_populates=\"category\")\n\nclass Product(Base):\n    __tablename__ = \"products\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    product_code = Column(String, unique=True, index=True, nullable=False)\n    name = Column(String, nullable=False)\n    description = Column(Text)\n    category_id = Column(Integer, ForeignKey(\"product_categories.id\"))\n    unit_of_measure = Column(String, default=\"PZA\")  # PZA, KG, M, etc.\n    cost_price = Column(Numeric(10, 2), default=0)\n    selling_price = Column(Numeric(10, 2), nullable=False)\n    min_stock_level = Column(Integer, default=0)\n    max_stock_level = Column(Integer, default=0)\n    current_stock = Column(Integer, default=0)\n    is_active = Column(Boolean, default=True)\n    is_trackable = Column(Boolean, default=True)  # Si maneja inventario\n    image_url = Column(String)\n    barcode = Column(String)\n    weight = Column(Numeric(8, 3))  # en kg\n    expiry_date = Column(Date)  # fecha de vencimiento para productos perecederos\n    currency = Column(String, default=\"PYG\")  # PYG, USD\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    # Relaciones\n    category = relationship(\"ProductCategory\", back_populates=\"products\")\n    quote_lines = relationship(\"QuoteLine\", back_populates=\"product\")\n    order_lines = relationship(\"SalesOrderLine\", back_populates=\"product\")\n    invoice_lines = relationship(\"InvoiceLine\", back_populates=\"product\")\n    stock_movements = relationship(\"StockMovement\", back_populates=\"product\")\n\nclass StockMovement(Base):\n    __tablename__ = \"stock_movements\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    product_id = Column(Integer, ForeignKey(\"products.id\"), nullable=False)\n    movement_type = Column(String, nullable=False)  # IN, OUT, ADJUSTMENT\n    quantity = Column(Integer, nullable=False)\n    unit_cost = Column(Numeric(10, 2))\n    reference_type = Column(String)  # SALE, PURCHASE, ADJUSTMENT\n    reference_id = Column(Integer)\n    notes = Column(Text)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Relaciones\n    product = relationship(\"Product\", back_populates=\"stock_movements\")","size_bytes":2837},"app/models/sales.py":{"content":"from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey, Numeric, Date\nfrom sqlalchemy.orm import relationship, synonym\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass Quote(Base):\n    __tablename__ = \"quotes\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    quote_number = Column(String, unique=True, index=True, nullable=False)\n    customer_id = Column(Integer, ForeignKey(\"customers.id\"), nullable=False)\n    quote_date = Column(Date, nullable=False)\n    valid_until = Column(Date, nullable=False)\n    status = Column(String, default=\"DRAFT\")  # DRAFT, SENT, APPROVED, REJECTED, EXPIRED\n    subtotal = Column(Numeric(12, 2), default=0)\n    tax_amount = Column(Numeric(12, 2), default=0)\n    total_amount = Column(Numeric(12, 2), default=0)\n    notes = Column(Text)\n    terms_conditions = Column(Text)\n    created_by_id = Column(Integer, ForeignKey(\"users.id\"))\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    # Relaciones\n    customer = relationship(\"Customer\", back_populates=\"quotes\")\n    created_by = relationship(\"User\", back_populates=\"created_quotes\")\n    lines = relationship(\"QuoteLine\", back_populates=\"quote\", cascade=\"all, delete-orphan\")\n    sales_orders = relationship(\"SalesOrder\", back_populates=\"quote\")\n\nclass QuoteLine(Base):\n    __tablename__ = \"quote_lines\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    quote_id = Column(Integer, ForeignKey(\"quotes.id\"), nullable=False)\n    product_id = Column(Integer, ForeignKey(\"products.id\"), nullable=False)\n    quantity = Column(Integer, nullable=False)\n    unit_price = Column(Numeric(10, 2), nullable=False)\n    discount_percent = Column(Numeric(5, 2), default=0)\n    line_total = Column(Numeric(12, 2), nullable=False)\n    description = Column(Text)\n    \n    # Relaciones\n    quote = relationship(\"Quote\", back_populates=\"lines\")\n    product = relationship(\"Product\", back_populates=\"quote_lines\")\n\nclass SalesOrder(Base):\n    __tablename__ = \"sales_orders\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    order_number = Column(String, unique=True, index=True, nullable=False)\n    quote_id = Column(Integer, ForeignKey(\"quotes.id\"))\n    customer_id = Column(Integer, ForeignKey(\"customers.id\"), nullable=False)\n    order_date = Column(Date, nullable=False)\n    delivery_date = Column(Date)\n    status = Column(String, default=\"PENDING\")  # PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED\n    subtotal = Column(Numeric(12, 2), default=0)\n    tax_amount = Column(Numeric(12, 2), default=0)\n    total_amount = Column(Numeric(12, 2), default=0)\n    shipping_cost = Column(Numeric(10, 2), default=0)\n    notes = Column(Text)\n    shipping_address = Column(Text)\n    created_by_id = Column(Integer, ForeignKey(\"users.id\"))\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    # Relaciones\n    quote = relationship(\"Quote\", back_populates=\"sales_orders\")\n    customer = relationship(\"Customer\", back_populates=\"orders\")\n    created_by = relationship(\"User\", back_populates=\"created_orders\")\n    lines = relationship(\"SalesOrderLine\", back_populates=\"order\", cascade=\"all, delete-orphan\")\n    invoices = relationship(\"Invoice\", back_populates=\"sales_order\")\n\nclass SalesOrderLine(Base):\n    __tablename__ = \"sales_order_lines\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    order_id = Column(Integer, ForeignKey(\"sales_orders.id\"), nullable=False)\n    product_id = Column(Integer, ForeignKey(\"products.id\"), nullable=False)\n    quantity = Column(Integer, nullable=False)\n    unit_price = Column(Numeric(10, 2), nullable=False)\n    discount_percent = Column(Numeric(5, 2), default=0)\n    line_total = Column(Numeric(12, 2), nullable=False)\n    total_amount = synonym('line_total')  # Backward compatibility alias\n    description = Column(Text)\n    quantity_shipped = Column(Integer, default=0)\n    quantity_invoiced = Column(Integer, default=0)\n    \n    # Relaciones\n    order = relationship(\"SalesOrder\", back_populates=\"lines\")\n    product = relationship(\"Product\", back_populates=\"order_lines\")","size_bytes":4285},"app/models/user.py":{"content":"from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, Enum\nfrom sqlalchemy.dialects.postgresql import ENUM as PGEnum\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\nimport enum\n\nclass UserRole(enum.Enum):\n    ADMIN = \"admin\"           # Administrador completo\n    MANAGER = \"manager\"       # Gerente con acceso amplio \n    SELLER = \"seller\"         # Vendedor con limitaciones\n    VIEWER = \"viewer\"         # Solo lectura\n    ACCOUNTANT = \"accountant\" # Contador - acceso financiero\n\nclass User(Base):\n    __tablename__ = \"users\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True, nullable=False)\n    username = Column(String, unique=True, index=True, nullable=False)\n    full_name = Column(String, nullable=False)\n    hashed_password = Column(String, nullable=False)\n    is_active = Column(Boolean, default=True)\n    is_superuser = Column(Boolean, default=False)\n    \n    # SISTEMA DE ROLES Y LIMITACIONES PARA PARAGUAY\n    role = Column(\n        PGEnum(\n            UserRole,\n            name=\"userrole\",\n            values_callable=lambda e: [m.value for m in e],\n            create_type=False,   # don't recreate; alembic owns it\n        ),\n        default=UserRole.SELLER,\n        nullable=False,\n    )\n    \n    # Limitaciones de uso\n    max_customers = Column(Integer, default=10, nullable=False)       # M√°ximo clientes que puede crear\n    max_quotes = Column(Integer, default=20, nullable=False)          # M√°ximo cotizaciones por mes\n    max_orders = Column(Integer, default=15, nullable=False)          # M√°ximo √≥rdenes por mes\n    max_invoices = Column(Integer, default=10, nullable=False)        # M√°ximo facturas por mes\n    \n    # Permisos espec√≠ficos\n    can_create_customers = Column(Boolean, default=True)             # Puede crear clientes\n    can_create_quotes = Column(Boolean, default=True)               # Puede crear cotizaciones\n    can_manage_inventory = Column(Boolean, default=False)             # Puede manejar inventario\n    can_view_reports = Column(Boolean, default=True)                 # Puede ver reportes\n    can_manage_tourism_regime = Column(Boolean, default=False)       # Puede gestionar r√©gimen turismo\n    can_manage_deposits = Column(Boolean, default=False)             # Puede manejar dep√≥sitos\n    can_export_data = Column(Boolean, default=False)                 # Puede exportar datos\n    \n    # Informaci√≥n adicional para Paraguay\n    notes = Column(Text, nullable=True)                              # Notas del administrador\n    department = Column(String, nullable=True)                       # Departamento/Sucursal\n    \n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    # Relaciones\n    created_customers = relationship(\"Customer\", back_populates=\"created_by\")\n    created_quotes = relationship(\"Quote\", back_populates=\"created_by\")\n    created_orders = relationship(\"SalesOrder\", back_populates=\"created_by\")","size_bytes":3112},"app/schemas/__init__.py":{"content":"# Schemas package","size_bytes":17},"app/schemas/auth.py":{"content":"from pydantic import BaseModel, EmailStr\nfrom typing import Optional\nfrom enum import Enum\n\nclass UserRole(str, Enum):\n    ADMIN = \"admin\"           # Administrador completo\n    MANAGER = \"manager\"       # Gerente con acceso amplio \n    SELLER = \"seller\"         # Vendedor con limitaciones\n    VIEWER = \"viewer\"         # Solo lectura\n    ACCOUNTANT = \"accountant\" # Contador - acceso financiero\n\nclass UserBase(BaseModel):\n    email: EmailStr\n    username: str\n    full_name: str\n    is_active: bool = True\n    role: UserRole = UserRole.SELLER\n    \n    # Limitaciones de uso\n    max_customers: int = 10\n    max_quotes: int = 20\n    max_orders: int = 15\n    max_invoices: int = 10\n    \n    # Permisos espec√≠ficos\n    can_create_customers: bool = True\n    can_create_quotes: bool = True\n    can_manage_inventory: bool = False\n    can_view_reports: bool = True\n    can_manage_tourism_regime: bool = False\n    can_manage_deposits: bool = False\n    can_export_data: bool = False\n    \n    # Informaci√≥n adicional para Paraguay\n    notes: Optional[str] = None\n    department: Optional[str] = None\n\nclass UserCreate(UserBase):\n    password: str\n\nclass UserUpdate(BaseModel):\n    email: Optional[EmailStr] = None\n    username: Optional[str] = None\n    full_name: Optional[str] = None\n    is_active: Optional[bool] = None\n    password: Optional[str] = None\n    role: Optional[UserRole] = None\n    \n    # Limitaciones opcionales para actualizar\n    max_customers: Optional[int] = None\n    max_quotes: Optional[int] = None\n    max_orders: Optional[int] = None\n    max_invoices: Optional[int] = None\n    \n    # Permisos opcionales para actualizar\n    can_create_customers: Optional[bool] = None\n    can_create_quotes: Optional[bool] = None\n    can_manage_inventory: Optional[bool] = None\n    can_view_reports: Optional[bool] = None\n    can_manage_tourism_regime: Optional[bool] = None\n    can_manage_deposits: Optional[bool] = None\n    can_export_data: Optional[bool] = None\n    \n    # Info adicional opcional\n    notes: Optional[str] = None\n    department: Optional[str] = None\n\nclass UserInDB(UserBase):\n    id: int\n    hashed_password: str\n    is_superuser: bool = False\n    \n    model_config = {\"from_attributes\": True}\n\nclass User(UserBase):\n    id: int\n    is_superuser: bool = False\n    \n    model_config = {\"from_attributes\": True}\n\nclass Token(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n    user: User\n\nclass TokenData(BaseModel):\n    username: Optional[str] = None\n\nclass UserLogin(BaseModel):\n    username: str\n    password: str","size_bytes":2552},"app/schemas/customer.py":{"content":"from typing import List, Optional\nfrom datetime import datetime, date\nfrom decimal import Decimal\nfrom pydantic import BaseModel, EmailStr, Field, model_validator\n\n# Schemas para Contact\nclass ContactBase(BaseModel):\n    name: str = Field(..., description=\"Nombre del contacto\")\n    title: Optional[str] = Field(None, description=\"Cargo del contacto\")\n    email: Optional[EmailStr] = Field(None, description=\"Email del contacto\")\n    phone: Optional[str] = Field(None, description=\"Tel√©fono del contacto\")\n    mobile: Optional[str] = Field(None, description=\"Tel√©fono m√≥vil del contacto\")\n    is_primary: bool = Field(False, description=\"Es contacto principal\")\n    is_active: bool = Field(True, description=\"Contacto activo\")\n\nclass ContactCreate(ContactBase):\n    customer_id: int = Field(..., description=\"ID del cliente\")\n\nclass ContactUpdate(BaseModel):\n    name: Optional[str] = None\n    title: Optional[str] = None\n    email: Optional[EmailStr] = None\n    phone: Optional[str] = None\n    mobile: Optional[str] = None\n    is_primary: Optional[bool] = None\n    is_active: Optional[bool] = None\n\nclass Contact(ContactBase):\n    id: int\n    customer_id: int\n    created_at: datetime\n    \n    class Config:\n        from_attributes = True\n\n# Schemas para Customer\nclass CustomerBase(BaseModel):\n    company_name: str = Field(..., description=\"Raz√≥n social de empresa o nombre de persona individual\")\n    contact_name: Optional[str] = Field(None, description=\"Nombre del contacto principal\")\n    email: Optional[EmailStr] = Field(None, description=\"Email principal\")\n    phone: Optional[str] = Field(None, description=\"Tel√©fono principal\")\n    address: Optional[str] = Field(None, description=\"Direcci√≥n\")\n    city: Optional[str] = Field(None, description=\"Ciudad\")\n    state: Optional[str] = Field(None, description=\"Estado/Provincia\")\n    postal_code: Optional[str] = Field(None, description=\"C√≥digo postal\")\n    country: str = Field(\"Paraguay\", description=\"Pa√≠s\")\n    tax_id: Optional[str] = Field(None, description=\"RUC o identificaci√≥n fiscal\")\n    credit_limit: Decimal = Field(Decimal(\"0.00\"), description=\"L√≠mite de cr√©dito\")\n    payment_terms: int = Field(30, description=\"T√©rminos de pago en d√≠as\")\n    is_active: bool = Field(True, description=\"Cliente activo\")\n    \n    # Campos espec√≠ficos para r√©gimen de turismo Paraguay\n    tourism_regime: bool = Field(False, description=\"Cliente con r√©gimen de turismo (exento de impuestos)\")\n    tourism_regime_pdf: Optional[str] = Field(None, description=\"Archivo PDF del r√©gimen de turismo\")\n    tourism_regime_expiry: Optional[date] = Field(None, description=\"Fecha de vencimiento del r√©gimen de turismo\")\n    \n    notes: Optional[str] = Field(None, description=\"Notas adicionales\")\n\nclass CustomerCreate(BaseModel):\n    # Inherited fields from CustomerBase (excluding tourism_regime_pdf which is managed separately)\n    company_name: str = Field(..., description=\"Raz√≥n social de empresa o nombre de persona individual\")\n    contact_name: Optional[str] = Field(None, description=\"Nombre del contacto principal\")\n    email: Optional[EmailStr] = Field(None, description=\"Email principal\")\n    phone: Optional[str] = Field(None, description=\"Tel√©fono principal\")\n    address: Optional[str] = Field(None, description=\"Direcci√≥n\")\n    city: Optional[str] = Field(None, description=\"Ciudad\")\n    state: Optional[str] = Field(None, description=\"Estado/Provincia\")\n    postal_code: Optional[str] = Field(None, description=\"C√≥digo postal\")\n    country: str = Field(\"Paraguay\", description=\"Pa√≠s\")\n    tax_id: Optional[str] = Field(None, description=\"RUC o identificaci√≥n fiscal\")\n    credit_limit: Decimal = Field(Decimal(\"0.00\"), description=\"L√≠mite de cr√©dito\")\n    payment_terms: int = Field(30, description=\"T√©rminos de pago en d√≠as\")\n    is_active: bool = Field(True, description=\"Cliente activo\")\n    \n    # Campos espec√≠ficos para r√©gimen de turismo Paraguay\n    # NOTE: tourism_regime_pdf is excluded - it's managed via separate upload endpoint\n    tourism_regime: bool = Field(False, description=\"Cliente con r√©gimen de turismo (exento de impuestos)\")\n    tourism_regime_expiry: Optional[date] = Field(None, description=\"Fecha de vencimiento del r√©gimen de turismo\")\n    \n    notes: Optional[str] = Field(None, description=\"Notas adicionales\")\n    \n    @model_validator(mode='after')\n    def validate_tourism_regime(self):\n        \"\"\"Validar que si tourism_regime=True, debe tener fecha de vencimiento futura\"\"\"\n        if self.tourism_regime:\n            if not self.tourism_regime_expiry:\n                raise ValueError(\"Si el cliente tiene r√©gimen de turismo, debe proporcionar la fecha de vencimiento del r√©gimen\")\n            \n            # Verificar que la fecha de vencimiento no sea pasada\n            if self.tourism_regime_expiry <= date.today():\n                raise ValueError(\"La fecha de vencimiento del r√©gimen de turismo debe ser futura\")\n        \n        return self\n\nclass CustomerUpdate(BaseModel):\n    company_name: Optional[str] = None\n    contact_name: Optional[str] = None\n    email: Optional[EmailStr] = None\n    phone: Optional[str] = None\n    address: Optional[str] = None\n    city: Optional[str] = None\n    state: Optional[str] = None\n    postal_code: Optional[str] = None\n    country: Optional[str] = None\n    tax_id: Optional[str] = None\n    credit_limit: Optional[Decimal] = None\n    payment_terms: Optional[int] = None\n    is_active: Optional[bool] = None\n    \n    # Campos espec√≠ficos para r√©gimen de turismo Paraguay\n    # SECURITY: tourism_regime_pdf is read-only and managed only through dedicated upload/delete endpoints\n    tourism_regime: Optional[bool] = None\n    tourism_regime_expiry: Optional[date] = None\n    \n    notes: Optional[str] = None\n    \n    @model_validator(mode='after')\n    def validate_tourism_regime_update(self):\n        \"\"\"Validar que si se activa tourism_regime=True, debe tener fecha de vencimiento futura\"\"\"\n        if self.tourism_regime is True:  # Espec√≠ficamente True, no None\n            if not self.tourism_regime_expiry:\n                raise ValueError(\"Si activa el r√©gimen de turismo, debe proporcionar la fecha de vencimiento del r√©gimen\")\n            \n            # Verificar que la fecha de vencimiento no sea pasada\n            if self.tourism_regime_expiry <= date.today():\n                raise ValueError(\"La fecha de vencimiento del r√©gimen de turismo debe ser futura\")\n        \n        return self\n\nclass Customer(CustomerBase):\n    id: int\n    customer_code: str\n    created_by_id: int\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n    contacts: List[Contact] = []\n    \n    class Config:\n        from_attributes = True\n\nclass CustomerList(BaseModel):\n    id: int\n    customer_code: str\n    company_name: str\n    contact_name: Optional[str] = None\n    email: Optional[EmailStr] = None\n    phone: Optional[str] = None\n    city: Optional[str] = None\n    is_active: bool\n    tourism_regime: bool = False  # Indicador visual de r√©gimen de turismo\n    created_at: datetime\n    \n    class Config:\n        from_attributes = True","size_bytes":7125},"app/schemas/quote.py":{"content":"from typing import List, Optional\nfrom datetime import datetime, date\nfrom decimal import Decimal\nfrom enum import Enum\nfrom pydantic import BaseModel, Field\n\n# Enums\nclass QuoteStatus(str, Enum):\n    draft = \"DRAFT\"\n    sent = \"SENT\"\n    accepted = \"ACCEPTED\"\n    rejected = \"REJECTED\"\n    expired = \"EXPIRED\"\n\ndef parse_quote_status(status_str: str) -> QuoteStatus:\n    \"\"\"\n    Helper function to parse quote status case-insensitively.\n    Handles legacy lowercase status values from database.\n    \"\"\"\n    if not status_str:\n        return QuoteStatus.draft\n    \n    # Convert to uppercase and try to match\n    status_upper = status_str.upper()\n    \n    # Map to enum values\n    for status in QuoteStatus:\n        if status.value == status_upper:\n            return status\n    \n    # Fallback for unknown values\n    raise ValueError(f\"Unknown quote status: {status_str}\")\n\n# Schemas para QuoteLine\nclass QuoteLineBase(BaseModel):\n    product_id: int = Field(..., description=\"ID del producto\")\n    quantity: int = Field(..., gt=0, description=\"Cantidad\")\n    unit_price: Decimal = Field(..., ge=0, description=\"Precio unitario\")\n    discount_percent: Decimal = Field(Decimal(\"0.00\"), ge=0, le=100, description=\"Descuento en porcentaje\")\n    description: Optional[str] = Field(None, description=\"Descripci√≥n del art√≠culo\")\n\nclass QuoteLineCreate(QuoteLineBase):\n    pass\n\nclass QuoteLineUpdate(BaseModel):\n    product_id: Optional[int] = None\n    quantity: Optional[int] = None\n    unit_price: Optional[Decimal] = None\n    discount_percent: Optional[Decimal] = None\n    description: Optional[str] = None\n\nclass QuoteLine(QuoteLineBase):\n    id: int\n    quote_id: int\n    line_total: Decimal = Field(..., description=\"Total de la l√≠nea\")\n    \n    class Config:\n        from_attributes = True\n\n# Schemas para Quote\nclass QuoteBase(BaseModel):\n    customer_id: int = Field(..., description=\"ID del cliente\")\n    quote_date: date = Field(..., description=\"Fecha de la cotizaci√≥n\")\n    valid_until: date = Field(..., description=\"V√°lida hasta\")\n    notes: Optional[str] = Field(None, description=\"Notas adicionales\")\n    terms_conditions: Optional[str] = Field(None, description=\"T√©rminos y condiciones\")\n\nclass QuoteCreate(QuoteBase):\n    lines: List[QuoteLineCreate] = Field(..., min_length=1, description=\"L√≠neas de la cotizaci√≥n\")\n\nclass QuoteUpdate(BaseModel):\n    customer_id: Optional[int] = None\n    quote_date: Optional[date] = None\n    valid_until: Optional[date] = None\n    status: Optional[QuoteStatus] = None\n    notes: Optional[str] = None\n    terms_conditions: Optional[str] = None\n    lines: Optional[List[QuoteLineCreate]] = None\n\nclass Quote(QuoteBase):\n    id: int\n    quote_number: str\n    status: QuoteStatus\n    subtotal: Decimal\n    tax_amount: Decimal\n    total_amount: Decimal\n    created_by_id: int\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n    lines: List[QuoteLine] = []\n    \n    # Informaci√≥n del cliente (para mostrar en listados)\n    customer_name: Optional[str] = None\n    customer_email: Optional[str] = None\n    \n    class Config:\n        from_attributes = True\n\nclass QuoteList(BaseModel):\n    id: int\n    quote_number: str\n    customer_id: int\n    customer_name: str\n    quote_date: date\n    valid_until: date\n    status: QuoteStatus\n    total_amount: Decimal\n    created_at: datetime\n    \n    class Config:\n        from_attributes = True\n\nclass QuotePDFResponse(BaseModel):\n    quote_id: int\n    pdf_filename: str\n    download_url: str","size_bytes":3502},"app/services/pdf_generator.py":{"content":"import os\nimport io\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom typing import Optional\nfrom reportlab.lib import colors\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\nfrom reportlab.lib.units import inch\nfrom reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\nfrom reportlab.platypus.flowables import HRFlowable\nfrom sqlalchemy.orm import Session\n\nfrom app.models.sales import Quote\nfrom app.models.invoice import Invoice\nfrom app.models.company import CompanySettings\nfrom app.core.database import get_database\nfrom app.utils.paraguay_fiscal import ParaguayFiscalUtils, ParaguayFiscalValidator\nfrom app.crud.company import company_settings_crud\n\nclass PDFGenerator:\n    def __init__(self):\n        self.styles = getSampleStyleSheet()\n        self.title_style = ParagraphStyle(\n            'CustomTitle',\n            parent=self.styles['Heading1'],\n            fontSize=18,\n            textColor=colors.darkblue,\n            spaceAfter=30,\n            alignment=1  # Center alignment\n        )\n        self.header_style = ParagraphStyle(\n            'CustomHeader',\n            parent=self.styles['Heading2'],\n            fontSize=14,\n            textColor=colors.darkblue,\n            spaceAfter=12\n        )\n\n    def generate_quote_pdf(self, quote: Quote, output_dir: str = \"temp/pdfs\") -> str:\n        \"\"\"Generar PDF de cotizaci√≥n\"\"\"\n        \n        # Crear directorio si no existe\n        os.makedirs(output_dir, exist_ok=True)\n        \n        # Nombre del archivo\n        filename = f\"cotizacion_{quote.quote_number}.pdf\"\n        filepath = os.path.join(output_dir, filename)\n        \n        # Crear documento PDF\n        doc = SimpleDocTemplate(\n            filepath,\n            pagesize=letter,\n            topMargin=0.5*inch,\n            bottomMargin=0.5*inch,\n            leftMargin=0.5*inch,\n            rightMargin=0.5*inch\n        )\n        \n        # Construir contenido\n        story = []\n        \n        # Encabezado de empresa\n        story.extend(self._create_company_header())\n        story.append(Spacer(1, 20))\n        \n        # T√≠tulo\n        title = Paragraph(\"COTIZACI√ìN\", self.title_style)\n        story.append(title)\n        story.append(Spacer(1, 20))\n        \n        # Informaci√≥n de cotizaci√≥n y cliente\n        story.extend(self._create_quote_info(quote))\n        story.append(Spacer(1, 20))\n        \n        # Tabla de productos/servicios\n        story.extend(self._create_items_table(quote))\n        story.append(Spacer(1, 20))\n        \n        # Totales\n        story.extend(self._create_totals_table(quote))\n        story.append(Spacer(1, 20))\n        \n        # T√©rminos y condiciones\n        if quote.terms_conditions:\n            story.extend(self._create_terms_section(quote.terms_conditions))\n        \n        # Notas adicionales\n        if quote.notes:\n            story.extend(self._create_notes_section(quote.notes))\n        \n        # Pie de p√°gina\n        story.extend(self._create_footer())\n        \n        # Construir PDF\n        doc.build(story)\n        \n        return filepath\n\n    def _create_company_header(self, db: Session = None):\n        \"\"\"Crear encabezado de empresa con datos paraguayos\"\"\"\n        # Obtener configuraci√≥n de empresa desde la base de datos\n        company_settings = None\n        if db:\n            try:\n                company_settings = company_settings_crud.get_settings(db)\n            except:\n                pass\n        \n        if company_settings:\n            # Header con datos reales de la empresa paraguaya - obtener valores actuales\n            razon_social_val = getattr(company_settings, 'razon_social', '') or ''\n            ruc_val = getattr(company_settings, 'ruc', '') or ''\n            direccion_val = getattr(company_settings, 'direccion', '') or ''\n            telefono_val = getattr(company_settings, 'telefono', '') or ''\n            email_val = getattr(company_settings, 'email', '') or ''\n            timbrado_val = getattr(company_settings, 'timbrado', '') or ''\n            punto_expedicion_val = getattr(company_settings, 'punto_expedicion', '') or ''\n            \n            company_data = [\n                [razon_social_val, \"\"],\n                [f\"RUC: {ruc_val}\", f\"Tel: {telefono_val}\"],\n                [direccion_val, f\"Email: {email_val}\"],\n                [f\"Timbrado: {timbrado_val}\", f\"Punto Exp.: {punto_expedicion_val}\"]\n            ]\n        else:\n            # Fallback si no hay configuraci√≥n\n            company_data = [\n                [\"SISTEMA DE GESTI√ìN DE VENTAS\", \"\"],\n                [\"RUC: 80123456-7\", \"Tel: +595 21 123 456\"],\n                [\"Asunci√≥n, Paraguay\", \"Email: ventas@empresa.com\"],\n                [\"Timbrado: 12345678\", \"Punto Exp.: 001\"]\n            ]\n        \n        company_table = Table(company_data, colWidths=[3*inch, 3*inch])\n        company_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (0, 0), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (0, 0), 14),\n            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 1), (-1, -1), 10),\n            ('VALIGN', (0, 0), (-1, -1), 'TOP'),\n        ]))\n        \n        return [company_table, HRFlowable(width=\"100%\", thickness=1, color=colors.darkblue)]\n\n    def _create_quote_info(self, quote: Quote):\n        \"\"\"Crear informaci√≥n de cotizaci√≥n y cliente\"\"\"\n        # Informaci√≥n de cotizaci√≥n\n        quote_data = [\n            [\"N√∫mero de Cotizaci√≥n:\", quote.quote_number],\n            [\"Fecha:\", quote.quote_date.strftime(\"%d/%m/%Y\")],\n            [\"V√°lida hasta:\", quote.valid_until.strftime(\"%d/%m/%Y\")],\n            [\"Estado:\", quote.status.upper()]\n        ]\n        \n        quote_table = Table(quote_data, colWidths=[1.5*inch, 2*inch])\n        quote_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),\n            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 0), (-1, -1), 10),\n            ('VALIGN', (0, 0), (-1, -1), 'TOP'),\n        ]))\n        \n        # Informaci√≥n del cliente\n        customer = quote.customer\n        customer_data = [\n            [\"Cliente:\", customer.company_name],\n            [\"Contacto:\", customer.contact_name or \"\"],\n            [\"Email:\", customer.email or \"\"],\n            [\"Tel√©fono:\", customer.phone or \"\"]\n        ]\n        \n        customer_table = Table(customer_data, colWidths=[1.5*inch, 2*inch])\n        customer_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),\n            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 0), (-1, -1), 10),\n            ('VALIGN', (0, 0), (-1, -1), 'TOP'),\n        ]))\n        \n        # Tabla combinada\n        main_table = Table([[quote_table, customer_table]], colWidths=[3.5*inch, 3.5*inch])\n        main_table.setStyle(TableStyle([\n            ('VALIGN', (0, 0), (-1, -1), 'TOP'),\n        ]))\n        \n        return [main_table]\n\n    def _create_items_table(self, quote: Quote):\n        \"\"\"Crear tabla de productos/servicios\"\"\"\n        # Encabezados\n        headers = [\"Descripci√≥n\", \"Cantidad\", \"Precio Unit.\", \"Descuento\", \"Total\"]\n        \n        # Datos de los productos\n        data = [headers]\n        \n        for line in quote.lines:\n            product_name = line.product.name if line.product else \"Producto\"\n            description = line.description or product_name\n            \n            row = [\n                description,\n                str(line.quantity),\n                f\"${line.unit_price:,.2f}\",\n                f\"{line.discount_percent}%\",\n                f\"${line.line_total:,.2f}\"\n            ]\n            data.append(row)\n        \n        # Crear tabla\n        items_table = Table(data, colWidths=[2.5*inch, 0.8*inch, 1*inch, 0.8*inch, 1*inch])\n        items_table.setStyle(TableStyle([\n            # Encabezados\n            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),\n            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, 0), 10),\n            \n            # Datos\n            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 1), (-1, -1), 9),\n            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),  # Alineaci√≥n derecha para n√∫meros\n            ('ALIGN', (0, 1), (0, -1), 'LEFT'),   # Alineaci√≥n izquierda para descripci√≥n\n            \n            # Bordes\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            \n            # Alternar colores de filas\n            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),\n        ]))\n        \n        return [Paragraph(\"Detalle de Productos/Servicios\", self.header_style), items_table]\n\n    def _create_totals_table(self, quote: Quote):\n        \"\"\"Crear tabla de totales\"\"\"\n        totals_data = [\n            [\"Subtotal:\", f\"${quote.subtotal:,.2f}\"],\n            [\"IVA (16%):\", f\"${quote.tax_amount:,.2f}\"],\n            [\"TOTAL:\", f\"${quote.total_amount:,.2f}\"]\n        ]\n        \n        totals_table = Table(totals_data, colWidths=[1.5*inch, 1.5*inch])\n        totals_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, 1), 10),\n            ('FONTSIZE', (0, 2), (-1, 2), 12),  # Total m√°s grande\n            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n            ('BACKGROUND', (0, 2), (-1, 2), colors.lightblue),  # Resaltar total\n        ]))\n        \n        # Tabla para alinear a la derecha\n        main_table = Table([[\" \", totals_table]], colWidths=[4.5*inch, 3*inch])\n        \n        return [main_table]\n\n    def _create_terms_section(self, terms: str):\n        \"\"\"Crear secci√≥n de t√©rminos y condiciones\"\"\"\n        header = Paragraph(\"T√©rminos y Condiciones\", self.header_style)\n        content = Paragraph(terms, self.styles['Normal'])\n        \n        return [header, content, Spacer(1, 12)]\n\n    def _create_notes_section(self, notes: str):\n        \"\"\"Crear secci√≥n de notas\"\"\"\n        header = Paragraph(\"Notas Adicionales\", self.header_style)\n        content = Paragraph(notes, self.styles['Normal'])\n        \n        return [header, content, Spacer(1, 12)]\n\n    def _create_footer(self):\n        \"\"\"Crear pie de p√°gina\"\"\"\n        footer_text = f\"Cotizaci√≥n generada el {datetime.now().strftime('%d/%m/%Y %H:%M')}\"\n        footer = Paragraph(footer_text, self.styles['Normal'])\n        \n        return [Spacer(1, 20), HRFlowable(width=\"100%\", thickness=0.5, color=colors.grey), footer]\n\n    def generate_invoice_pdf(self, invoice: Invoice, db: Session = None) -> io.BytesIO:\n        \"\"\"Generar PDF de factura y devolver como BytesIO buffer\"\"\"\n        \n        # Crear buffer en memoria\n        buffer = io.BytesIO()\n        \n        # Crear documento PDF\n        doc = SimpleDocTemplate(\n            buffer,\n            pagesize=letter,\n            topMargin=0.5*inch,\n            bottomMargin=0.5*inch,\n            leftMargin=0.5*inch,\n            rightMargin=0.5*inch\n        )\n        \n        # Construir contenido\n        story = []\n        \n        # Encabezado de empresa paraguaya\n        story.extend(self._create_company_header(db))\n        story.append(Spacer(1, 20))\n        \n        # T√≠tulo\n        title = Paragraph(\"FACTURA\", self.title_style)\n        story.append(title)\n        story.append(Spacer(1, 20))\n        \n        # Informaci√≥n de factura y cliente\n        story.extend(self._create_invoice_info(invoice))\n        story.append(Spacer(1, 20))\n        \n        # Tabla de productos/servicios\n        story.extend(self._create_invoice_items_table(invoice))\n        story.append(Spacer(1, 20))\n        \n        # Totales con desglose paraguayo\n        story.extend(self._create_paraguay_invoice_totals(invoice))\n        story.append(Spacer(1, 20))\n        \n        # T√©rminos de pago\n        if invoice.payment_terms:\n            story.extend(self._create_payment_terms_section(invoice.payment_terms))\n        \n        # Notas adicionales\n        if invoice.notes:\n            story.extend(self._create_notes_section(invoice.notes))\n        \n        # Pie de p√°gina\n        story.extend(self._create_footer())\n        \n        # Construir PDF\n        doc.build(story)\n        \n        return buffer\n\n    def _create_invoice_info(self, invoice: Invoice):\n        \"\"\"Crear informaci√≥n de factura y cliente\"\"\"\n        # Informaci√≥n de factura\n        invoice_data = [\n            [\"N√∫mero de Factura:\", invoice.invoice_number],\n            [\"Fecha de Factura:\", invoice.invoice_date.strftime(\"%d/%m/%Y\")],\n            [\"Fecha de Vencimiento:\", invoice.due_date.strftime(\"%d/%m/%Y\")],\n            [\"Estado:\", invoice.status.upper()]\n        ]\n        \n        invoice_table = Table(invoice_data, colWidths=[1.5*inch, 2*inch])\n        invoice_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),\n            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 0), (-1, -1), 10),\n            ('VALIGN', (0, 0), (-1, -1), 'TOP'),\n        ]))\n        \n        # Informaci√≥n del cliente\n        customer = invoice.customer\n        customer_data = [\n            [\"Cliente:\", customer.company_name if customer else \"Cliente\"],\n            [\"RFC/ID:\", customer.tax_id if customer and hasattr(customer, 'tax_id') else \"\"],\n            [\"Email:\", customer.email or \"\"],\n            [\"Tel√©fono:\", customer.phone or \"\"]\n        ]\n        \n        customer_table = Table(customer_data, colWidths=[1.5*inch, 2*inch])\n        customer_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),\n            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 0), (-1, -1), 10),\n            ('VALIGN', (0, 0), (-1, -1), 'TOP'),\n        ]))\n        \n        # Tabla combinada\n        main_table = Table([[invoice_table, customer_table]], colWidths=[3.5*inch, 3.5*inch])\n        main_table.setStyle(TableStyle([\n            ('VALIGN', (0, 0), (-1, -1), 'TOP'),\n        ]))\n        \n        return [main_table]\n\n    def _create_invoice_items_table(self, invoice: Invoice):\n        \"\"\"Crear tabla de productos/servicios de factura\"\"\"\n        # Encabezados\n        headers = [\"Descripci√≥n\", \"Cantidad\", \"Precio Unit.\", \"Descuento\", \"Total\"]\n        \n        # Datos de los productos\n        data = [headers]\n        \n        for line in invoice.lines:\n            product_name = line.product.name if line.product else \"Producto\"\n            description = line.description or product_name\n            \n            row = [\n                description,\n                str(line.quantity),\n                f\"${line.unit_price:,.2f}\",\n                f\"{line.discount_percent}%\",\n                f\"${line.line_total:,.2f}\"\n            ]\n            data.append(row)\n        \n        # Crear tabla\n        items_table = Table(data, colWidths=[2.5*inch, 0.8*inch, 1*inch, 0.8*inch, 1*inch])\n        items_table.setStyle(TableStyle([\n            # Encabezados\n            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),\n            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),\n            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, 0), 10),\n            \n            # Datos\n            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 1), (-1, -1), 9),\n            ('ALIGN', (1, 1), (-1, -1), 'RIGHT'),  # Alineaci√≥n derecha para n√∫meros\n            ('ALIGN', (0, 1), (0, -1), 'LEFT'),   # Alineaci√≥n izquierda para descripci√≥n\n            \n            # Bordes\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            \n            # Alternar colores de filas\n            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),\n        ]))\n        \n        return [Paragraph(\"Detalle de Productos/Servicios\", self.header_style), items_table]\n\n    def _create_invoice_totals_table(self, invoice: Invoice):\n        \"\"\"Crear tabla de totales de factura\"\"\"\n        totals_data = [\n            [\"Subtotal:\", f\"${invoice.subtotal:,.2f}\"],\n            [\"IVA (16%):\", f\"${invoice.tax_amount:,.2f}\"],\n            [\"TOTAL:\", f\"${invoice.total_amount:,.2f}\"],\n            [\"Pagado:\", f\"${invoice.paid_amount:,.2f}\"],\n            [\"Saldo Pendiente:\", f\"${invoice.balance_due:,.2f}\"]\n        ]\n        \n        totals_table = Table(totals_data, colWidths=[1.5*inch, 1.5*inch])\n        totals_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, 3), 10),\n            ('FONTSIZE', (0, 2), (0, 2), 12),  # Total m√°s grande\n            ('FONTSIZE', (0, 4), (0, 4), 11),  # Saldo pendiente destacado\n            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n            ('BACKGROUND', (0, 2), (-1, 2), colors.lightblue),  # Resaltar total\n            ('BACKGROUND', (0, 4), (-1, 4), colors.lightyellow),  # Resaltar saldo\n        ]))\n        \n        # Tabla para alinear a la derecha\n        main_table = Table([[\" \", totals_table]], colWidths=[4.5*inch, 3*inch])\n        \n        return [main_table]\n\n    def _create_payment_terms_section(self, terms: str):\n        \"\"\"Crear secci√≥n de t√©rminos de pago\"\"\"\n        header = Paragraph(\"T√©rminos de Pago\", self.header_style)\n        content = Paragraph(terms, self.styles['Normal'])\n        \n        return [header, content, Spacer(1, 12)]\n    \n    def _create_paraguay_invoice_totals(self, invoice: Invoice):\n        \"\"\"Crear tabla de totales con desglose paraguayo\"\"\"\n        currency = getattr(invoice, 'currency', 'PYG')\n        \n        # Datos para la tabla de totales paraguaya\n        totals_data = [\n            [\"Subtotal Gravado 10%:\", ParaguayFiscalUtils.format_currency(getattr(invoice, 'subtotal_gravado_10', 0), currency)],\n            [\"Subtotal Gravado 5%:\", ParaguayFiscalUtils.format_currency(getattr(invoice, 'subtotal_gravado_5', 0), currency)],\n            [\"Subtotal Exento:\", ParaguayFiscalUtils.format_currency(getattr(invoice, 'subtotal_exento', 0), currency)],\n            [\"IVA 10%:\", ParaguayFiscalUtils.format_currency(getattr(invoice, 'iva_10', 0), currency)],\n            [\"IVA 5%:\", ParaguayFiscalUtils.format_currency(getattr(invoice, 'iva_5', 0), currency)]\n        ]\n        \n        # Agregar r√©gimen tur√≠stico si aplica\n        if getattr(invoice, 'tourism_regime_applied', False):\n            tourism_percent = getattr(invoice, 'tourism_regime_percentage', 0)\n            totals_data.append([f\"Exenci√≥n Tur√≠stica ({tourism_percent}%):\", \n                               ParaguayFiscalUtils.format_currency(getattr(invoice, 'iva_10', 0) + getattr(invoice, 'iva_5', 0) - invoice.tax_amount, currency)])\n        \n        totals_data.extend([\n            [\"TOTAL:\", ParaguayFiscalUtils.format_currency(invoice.total_amount, currency)],\n            [\"Pagado:\", ParaguayFiscalUtils.format_currency(invoice.paid_amount, currency)],\n            [\"Saldo Pendiente:\", ParaguayFiscalUtils.format_currency(invoice.balance_due, currency)]\n        ])\n        \n        # Informaci√≥n fiscal adicional\n        fiscal_info = [\n            [\"Condici√≥n de Venta:\", ParaguayFiscalUtils.get_condicion_venta_display(getattr(invoice, 'condicion_venta', 'CREDITO'))],\n            [\"Lugar de Emisi√≥n:\", getattr(invoice, 'lugar_emision', 'Asunci√≥n')]\n        ]\n        \n        totals_table = Table(totals_data, colWidths=[2*inch, 1.5*inch])\n        totals_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, -3), 9),\n            ('FONTSIZE', (0, -3), (0, -3), 11),  # Total m√°s grande\n            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n            ('BACKGROUND', (0, -3), (-1, -3), colors.lightblue),  # Resaltar total\n            ('BACKGROUND', (0, -1), (-1, -1), colors.lightyellow),  # Resaltar saldo\n        ]))\n        \n        fiscal_table = Table(fiscal_info, colWidths=[2*inch, 1.5*inch])\n        fiscal_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),\n            ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 0), (-1, -1), 9),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            ('GRID', (0, 0), (-1, -1), 1, colors.black),\n        ]))\n        \n        # Tabla principal para alinear a la derecha\n        main_table = Table([[\" \", totals_table]], colWidths=[3.5*inch, 3.5*inch])\n        fiscal_main_table = Table([[\" \", fiscal_table]], colWidths=[3.5*inch, 3.5*inch])\n        \n        return [main_table, Spacer(1, 10), fiscal_main_table]\n\n# Instancia global\npdf_generator = PDFGenerator()","size_bytes":21169},"frontend/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"frontend/src/App.tsx":{"content":"import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { AuthProvider } from './context/AuthContext';\nimport Layout from './components/Layout/Layout';\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport Customers from './pages/Customers';\nimport Quotes from './pages/Quotes';\nimport Invoices from './pages/Invoices';\nimport Products from './pages/Products';\nimport Deposits from './pages/Deposits';\nimport Reports from './pages/Reports';\nimport CompanySettings from './pages/CompanySettings';\nimport './App.css';\n\n// Tema profesional para empresas paraguayas\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#1976d2', // Azul empresarial\n      dark: '#115293',\n      light: '#42a5f5',\n    },\n    secondary: {\n      main: '#ff9800', // Naranja paraguayo\n      dark: '#f57c00',\n      light: '#ffb74d',\n    },\n    background: {\n      default: '#f5f5f5',\n      paper: '#ffffff',\n    },\n    text: {\n      primary: '#212121',\n      secondary: '#757575',\n    },\n  },\n  typography: {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    h4: {\n      fontWeight: 600,\n      fontSize: '2.125rem',\n    },\n    h5: {\n      fontWeight: 600,\n      fontSize: '1.5rem',\n    },\n    h6: {\n      fontWeight: 600,\n      fontSize: '1.25rem',\n    },\n  },\n  components: {\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          textTransform: 'none',\n          borderRadius: 8,\n          fontWeight: 500,\n        },\n      },\n    },\n    MuiPaper: {\n      styleOverrides: {\n        root: {\n          borderRadius: 12,\n        },\n      },\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AuthProvider>\n        <Router>\n          <Routes>\n            <Route path=\"/login\" element={<Login />} />\n            <Route path=\"/\" element={<Layout />}>\n              <Route index element={<Dashboard />} />\n              <Route path=\"clientes\" element={<Customers />} />\n              <Route path=\"cotizaciones\" element={<Quotes />} />\n              <Route path=\"facturas\" element={<Invoices />} />\n              <Route path=\"productos\" element={<Products />} />\n              <Route path=\"depositos\" element={<Deposits />} />\n              <Route path=\"reportes\" element={<Reports />} />\n              <Route path=\"configuracion\" element={<CompanySettings />} />\n            </Route>\n          </Routes>\n        </Router>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;","size_bytes":2666},"frontend/src/index.css":{"content":":root {\n  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;\n  line-height: 1.5;\n  font-weight: 400;\n\n  color-scheme: light dark;\n  color: rgba(255, 255, 255, 0.87);\n  background-color: #242424;\n\n  font-synthesis: none;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\na {\n  font-weight: 500;\n  color: #646cff;\n  text-decoration: inherit;\n}\na:hover {\n  color: #535bf2;\n}\n\nbody {\n  margin: 0;\n  display: flex;\n  place-items: center;\n  min-width: 320px;\n  min-height: 100vh;\n}\n\nh1 {\n  font-size: 3.2em;\n  line-height: 1.1;\n}\n\nbutton {\n  border-radius: 8px;\n  border: 1px solid transparent;\n  padding: 0.6em 1.2em;\n  font-size: 1em;\n  font-weight: 500;\n  font-family: inherit;\n  background-color: #1a1a1a;\n  cursor: pointer;\n  transition: border-color 0.25s;\n}\nbutton:hover {\n  border-color: #646cff;\n}\nbutton:focus,\nbutton:focus-visible {\n  outline: 4px auto -webkit-focus-ring-color;\n}\n\n@media (prefers-color-scheme: light) {\n  :root {\n    color: #213547;\n    background-color: #ffffff;\n  }\n  a:hover {\n    color: #747bff;\n  }\n  button {\n    background-color: #f9f9f9;\n  }\n}\n","size_bytes":1154},"frontend/src/main.tsx":{"content":"import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.tsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n","size_bytes":230},"frontend/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"app/api/products.py":{"content":"from typing import List, Optional\nfrom fastapi import APIRouter, Depends, HTTPException, status, Query\nfrom sqlalchemy.orm import Session\n\nfrom app.core.database import get_database\nfrom app.core.dependencies import get_current_active_user\nfrom app.crud.product import product_crud, product_category_crud, stock_movement_crud\nfrom app.schemas.product import (\n    Product, ProductCreate, ProductUpdate, ProductList,\n    ProductCategory, ProductCategoryCreate, ProductCategoryUpdate,\n    StockMovement, StockMovementCreate, StockAdjustment\n)\nfrom app.models.user import User\n\nrouter = APIRouter(prefix=\"/products\", tags=[\"productos\"])\n\n# Endpoints para Categor√≠as\n@router.get(\"/categories/\", response_model=List[ProductCategory])\ndef list_categories(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    is_active: Optional[bool] = Query(None)\n):\n    \"\"\"Obtener lista de categor√≠as de productos\"\"\"\n    categories = product_category_crud.get_multi(\n        db=db, skip=skip, limit=limit, is_active=is_active\n    )\n    return categories\n\n@router.post(\"/categories/\", response_model=ProductCategory)\ndef create_category(\n    category_in: ProductCategoryCreate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Crear nueva categor√≠a de producto\"\"\"\n    # Verificar si ya existe\n    existing = product_category_crud.get_by_name(db=db, name=category_in.name)\n    if existing:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Ya existe una categor√≠a con este nombre\"\n        )\n    \n    category = product_category_crud.create(db=db, category_in=category_in)\n    return category\n\n@router.put(\"/categories/{category_id}\", response_model=ProductCategory)\ndef update_category(\n    category_id: int,\n    category_in: ProductCategoryUpdate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar categor√≠a existente\"\"\"\n    db_category = product_category_crud.get(db=db, category_id=category_id)\n    if not db_category:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Categor√≠a no encontrada\"\n        )\n    \n    category = product_category_crud.update(db=db, db_category=db_category, category_in=category_in)\n    return category\n\n# Endpoints para Productos\n@router.get(\"/\", response_model=List[ProductList])\ndef list_products(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    skip: int = Query(0, ge=0, description=\"N√∫mero de registros a omitir\"),\n    limit: int = Query(100, ge=1, le=1000, description=\"L√≠mite de registros\"),\n    category_id: Optional[int] = Query(None, description=\"Filtrar por categor√≠a\"),\n    is_active: Optional[bool] = Query(None, description=\"Filtrar por estado activo\"),\n    is_trackable: Optional[bool] = Query(None, description=\"Filtrar por rastreable\"),\n    low_stock: bool = Query(False, description=\"Solo productos con stock bajo\"),\n    search: Optional[str] = Query(None, description=\"Buscar por nombre, c√≥digo o descripci√≥n\")\n):\n    \"\"\"Obtener lista de productos con filtros opcionales\"\"\"\n    products = product_crud.get_multi(\n        db=db,\n        skip=skip,\n        limit=limit,\n        category_id=category_id,\n        is_active=is_active,\n        is_trackable=is_trackable,\n        low_stock=low_stock,\n        search=search\n    )\n    \n    # Mapear a ProductList usando model_validate\n    products_list = []\n    for product in products:\n        product_dict = {\n            \"id\": product.id,\n            \"product_code\": product.product_code,\n            \"name\": product.name,\n            \"category_name\": product.category.name if product.category else None,\n            \"selling_price\": product.selling_price,\n            \"current_stock\": product.current_stock if product.current_stock is not None else 0,\n            \"is_active\": product.is_active if product.is_active is not None else True,\n            \"is_trackable\": product.is_trackable if product.is_trackable is not None else True,\n            \"currency\": product.currency if product.currency is not None else \"PYG\",\n            \"expiry_date\": product.expiry_date\n        }\n        products_list.append(ProductList.model_validate(product_dict))\n    \n    return products_list\n\n@router.get(\"/{product_id}\", response_model=Product)\ndef get_product(\n    product_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener producto espec√≠fico por ID\"\"\"\n    product = product_crud.get(db=db, product_id=product_id)\n    if not product:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Producto no encontrado\"\n        )\n    \n    # Convertir a esquema de respuesta usando model_validate\n    product_dict = {\n        \"id\": product.id,\n        \"product_code\": product.product_code,\n        \"name\": product.name,\n        \"description\": product.description,\n        \"category_id\": product.category_id,\n        \"unit_of_measure\": product.unit_of_measure,\n        \"cost_price\": product.cost_price,\n        \"selling_price\": product.selling_price,\n        \"min_stock_level\": product.min_stock_level,\n        \"max_stock_level\": product.max_stock_level,\n        \"current_stock\": product.current_stock,\n        \"is_active\": product.is_active,\n        \"is_trackable\": product.is_trackable,\n        \"image_url\": product.image_url,\n        \"barcode\": product.barcode,\n        \"weight\": product.weight,\n        \"expiry_date\": product.expiry_date,\n        \"currency\": product.currency if product.currency is not None else \"PYG\",\n        \"created_at\": product.created_at,\n        \"updated_at\": product.updated_at,\n        \"category_name\": product.category.name if product.category else None\n    }\n    \n    return Product.model_validate(product_dict)\n\n@router.post(\"/\", response_model=Product)\ndef create_product(\n    product_in: ProductCreate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Crear nuevo producto\"\"\"\n    # Verificar c√≥digo de barras √∫nico si se proporciona\n    if product_in.barcode:\n        existing = product_crud.get_by_barcode(db=db, barcode=product_in.barcode)\n        if existing:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Ya existe un producto con este c√≥digo de barras\"\n            )\n    \n    product = product_crud.create(db=db, product_in=product_in)\n    \n    # Convertir a esquema de respuesta usando model_validate\n    product_dict = {\n        \"id\": product.id,\n        \"product_code\": product.product_code,\n        \"name\": product.name,\n        \"description\": product.description,\n        \"category_id\": product.category_id,\n        \"unit_of_measure\": product.unit_of_measure,\n        \"cost_price\": product.cost_price,\n        \"selling_price\": product.selling_price,\n        \"min_stock_level\": product.min_stock_level,\n        \"max_stock_level\": product.max_stock_level,\n        \"current_stock\": product.current_stock,\n        \"is_active\": product.is_active,\n        \"is_trackable\": product.is_trackable,\n        \"image_url\": product.image_url,\n        \"barcode\": product.barcode,\n        \"weight\": product.weight,\n        \"expiry_date\": product.expiry_date,\n        \"currency\": product.currency if product.currency is not None else \"PYG\",\n        \"created_at\": product.created_at,\n        \"updated_at\": product.updated_at,\n        \"category_name\": product.category.name if product.category else None\n    }\n    \n    return Product.model_validate(product_dict)\n\n@router.put(\"/{product_id}\", response_model=Product)\ndef update_product(\n    product_id: int,\n    product_in: ProductUpdate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar producto existente\"\"\"\n    db_product = product_crud.get(db=db, product_id=product_id)\n    if not db_product:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Producto no encontrado\"\n        )\n    \n    # Verificar c√≥digo de barras √∫nico si se actualiza\n    if product_in.barcode and product_in.barcode != db_product.barcode:\n        existing = product_crud.get_by_barcode(db=db, barcode=product_in.barcode)\n        if existing:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Ya existe un producto con este c√≥digo de barras\"\n            )\n    \n    product = product_crud.update(db=db, db_product=db_product, product_in=product_in)\n    \n    # Convertir a esquema de respuesta usando model_validate\n    product_dict = {\n        \"id\": product.id,\n        \"product_code\": product.product_code,\n        \"name\": product.name,\n        \"description\": product.description,\n        \"category_id\": product.category_id,\n        \"unit_of_measure\": product.unit_of_measure,\n        \"cost_price\": product.cost_price,\n        \"selling_price\": product.selling_price,\n        \"min_stock_level\": product.min_stock_level,\n        \"max_stock_level\": product.max_stock_level,\n        \"current_stock\": product.current_stock,\n        \"is_active\": product.is_active,\n        \"is_trackable\": product.is_trackable,\n        \"image_url\": product.image_url,\n        \"barcode\": product.barcode,\n        \"weight\": product.weight,\n        \"expiry_date\": product.expiry_date,\n        \"currency\": product.currency if product.currency is not None else \"PYG\",\n        \"created_at\": product.created_at,\n        \"updated_at\": product.updated_at,\n        \"category_name\": product.category.name if product.category else None\n    }\n    \n    return Product.model_validate(product_dict)\n\n# Endpoints para Gesti√≥n de Inventario\n@router.post(\"/{product_id}/adjust-stock\", response_model=Product)\ndef adjust_product_stock(\n    product_id: int,\n    adjustment: StockAdjustment,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Ajustar stock de producto\"\"\"\n    try:\n        # Forzar product_id del URL\n        adjustment.product_id = product_id\n        \n        product = product_crud.adjust_stock(db=db, adjustment=adjustment)\n        \n        # Convertir a esquema de respuesta usando model_validate\n        product_dict = {\n            \"id\": product.id,\n            \"product_code\": product.product_code,\n            \"name\": product.name,\n            \"description\": product.description,\n            \"category_id\": product.category_id,\n            \"unit_of_measure\": product.unit_of_measure,\n            \"cost_price\": product.cost_price,\n            \"selling_price\": product.selling_price,\n            \"min_stock_level\": product.min_stock_level,\n            \"max_stock_level\": product.max_stock_level,\n            \"current_stock\": product.current_stock,\n            \"is_active\": product.is_active,\n            \"is_trackable\": product.is_trackable,\n            \"image_url\": product.image_url,\n            \"barcode\": product.barcode,\n            \"weight\": product.weight,\n            \"created_at\": product.created_at,\n            \"updated_at\": product.updated_at,\n            \"category_name\": product.category.name if product.category else None\n        }\n        \n        return Product.model_validate(product_dict)\n        \n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.get(\"/{product_id}/stock-movements\", response_model=List[StockMovement])\ndef get_product_stock_movements(\n    product_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    limit: int = Query(100, ge=1, le=1000, description=\"L√≠mite de registros\")\n):\n    \"\"\"Obtener movimientos de stock de un producto\"\"\"\n    # Verificar que el producto existe\n    product = product_crud.get(db=db, product_id=product_id)\n    if not product:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Producto no encontrado\"\n        )\n    \n    movements = stock_movement_crud.get_by_product(db=db, product_id=product_id, limit=limit)\n    \n    # Mapear a esquema de respuesta\n    movements_list = []\n    for movement in movements:\n        movement_dict = {\n            \"id\": movement.id,\n            \"product_id\": movement.product_id,\n            \"movement_type\": movement.movement_type,\n            \"quantity\": movement.quantity,\n            \"unit_cost\": movement.unit_cost,\n            \"reference_type\": movement.reference_type,\n            \"reference_id\": movement.reference_id,\n            \"notes\": movement.notes,\n            \"created_at\": movement.created_at,\n            \"product_name\": movement.product.name\n        }\n        movements_list.append(StockMovement.model_validate(movement_dict))\n    \n    return movements_list\n\n@router.get(\"/stock-movements/\", response_model=List[StockMovement])\ndef list_stock_movements(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    skip: int = Query(0, ge=0),\n    limit: int = Query(100, ge=1, le=1000),\n    product_id: Optional[int] = Query(None, description=\"Filtrar por producto\"),\n    movement_type: Optional[str] = Query(None, description=\"Filtrar por tipo de movimiento\"),\n    reference_type: Optional[str] = Query(None, description=\"Filtrar por tipo de referencia\")\n):\n    \"\"\"Obtener lista de movimientos de stock con filtros\"\"\"\n    movements = stock_movement_crud.get_multi(\n        db=db,\n        skip=skip,\n        limit=limit,\n        product_id=product_id,\n        movement_type=movement_type,\n        reference_type=reference_type\n    )\n    \n    # Mapear a esquema de respuesta\n    movements_list = []\n    for movement in movements:\n        movement_dict = {\n            \"id\": movement.id,\n            \"product_id\": movement.product_id,\n            \"movement_type\": movement.movement_type,\n            \"quantity\": movement.quantity,\n            \"unit_cost\": movement.unit_cost,\n            \"reference_type\": movement.reference_type,\n            \"reference_id\": movement.reference_id,\n            \"notes\": movement.notes,\n            \"created_at\": movement.created_at,\n            \"product_name\": movement.product.name\n        }\n        movements_list.append(StockMovement.model_validate(movement_dict))\n    \n    return movements_list","size_bytes":14602},"app/api/sales_orders.py":{"content":"from typing import List, Optional\nfrom datetime import date\nfrom fastapi import APIRouter, Depends, HTTPException, status, Query\nfrom sqlalchemy.orm import Session\n\nfrom app.core.database import get_database\nfrom app.core.dependencies import get_current_active_user, check_user_limits\nfrom app.crud.sales_order import sales_order_crud\nfrom app.crud.quote import quote_crud\nfrom app.schemas.sales_order import (\n    SalesOrder, SalesOrderCreate, SalesOrderUpdate, SalesOrderList, \n    SalesOrderStatus, SalesOrderLine, parse_sales_order_status\n)\nfrom app.models.user import User\n\nrouter = APIRouter(prefix=\"/sales-orders\", tags=[\"√≥rdenes de venta\"])\n\n@router.get(\"/\", response_model=List[SalesOrderList])\ndef list_sales_orders(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    skip: int = Query(0, ge=0, description=\"N√∫mero de registros a omitir\"),\n    limit: int = Query(100, ge=1, le=1000, description=\"L√≠mite de registros\"),\n    customer_id: Optional[int] = Query(None, description=\"Filtrar por cliente\"),\n    status: Optional[SalesOrderStatus] = Query(None, description=\"Filtrar por estado\"),\n    date_from: Optional[date] = Query(None, description=\"Fecha desde\"),\n    date_to: Optional[date] = Query(None, description=\"Fecha hasta\"),\n    search: Optional[str] = Query(None, description=\"Buscar por n√∫mero, cliente o notas\")\n):\n    \"\"\"Obtener lista de √≥rdenes de venta con filtros opcionales\"\"\"\n    orders = sales_order_crud.get_multi(\n        db=db,\n        skip=skip,\n        limit=limit,\n        customer_id=customer_id,\n        status=status,\n        date_from=date_from,\n        date_to=date_to,\n        search=search\n    )\n    \n    # Mapear a SalesOrderList\n    orders_list = []\n    for order in orders:\n        order_list = SalesOrderList(\n            id=order.id,\n            order_number=order.order_number,\n            customer_id=order.customer_id,\n            customer_name=order.customer.company_name if order.customer else \"\",\n            order_date=order.order_date,\n            delivery_date=order.delivery_date,\n            status=parse_sales_order_status(str(order.status)),\n            total_amount=order.total_amount,\n            created_at=order.created_at\n        )\n        orders_list.append(order_list)\n    \n    return orders_list\n\n@router.get(\"/{order_id}\", response_model=SalesOrder)\ndef get_sales_order(\n    order_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener orden de venta espec√≠fica por ID\"\"\"\n    order = sales_order_crud.get(db=db, order_id=order_id)\n    if not order:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Orden de venta no encontrada\"\n        )\n    \n    # Convertir a esquema de respuesta\n    order_response = SalesOrder(\n        id=order.id,\n        order_number=order.order_number,\n        quote_id=order.quote_id,\n        customer_id=order.customer_id,\n        order_date=order.order_date,\n        delivery_date=order.delivery_date,\n        status=parse_sales_order_status(str(order.status)),\n        subtotal=order.subtotal,\n        tax_amount=order.tax_amount,\n        total_amount=order.total_amount,\n        shipping_cost=order.shipping_cost,\n        shipping_address=order.shipping_address,\n        notes=order.notes,\n        created_by_id=order.created_by_id,\n        created_at=order.created_at,\n        updated_at=order.updated_at,\n        lines=[],\n        customer_name=order.customer.company_name if order.customer else \"\",\n        customer_email=order.customer.email if order.customer else \"\"\n    )\n    \n    # Agregar l√≠neas\n    for line in order.lines:\n        order_line = SalesOrderLine(\n            id=line.id,\n            order_id=line.order_id,\n            product_id=line.product_id,\n            quantity=line.quantity,\n            unit_price=line.unit_price,\n            discount_percent=line.discount_percent,\n            line_total=line.line_total,\n            description=line.description,\n            quantity_shipped=line.quantity_shipped,\n            quantity_invoiced=line.quantity_invoiced\n        )\n        order_response.lines.append(order_line)\n    \n    return order_response\n\n@router.post(\"/\", response_model=SalesOrder)\ndef create_sales_order(\n    order_in: SalesOrderCreate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user),\n    _: User = Depends(check_user_limits('orders'))\n):\n    \"\"\"Crear nueva orden de venta\"\"\"\n    try:\n        order = sales_order_crud.create(\n            db=db,\n            order_in=order_in,\n            created_by_id=int(current_user.id)\n        )\n        \n        # Obtener la orden completa con relaciones\n        created_order = sales_order_crud.get(db=db, order_id=int(order.id))\n        if not created_order:\n            raise HTTPException(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                detail=\"Error al obtener la orden creada\"\n            )\n        \n        # Convertir a esquema de respuesta\n        order_response = SalesOrder(\n            id=created_order.id,\n            order_number=created_order.order_number,\n            quote_id=created_order.quote_id,\n            customer_id=created_order.customer_id,\n            order_date=created_order.order_date,\n            delivery_date=created_order.delivery_date,\n            status=parse_sales_order_status(str(created_order.status)),\n            subtotal=created_order.subtotal,\n            tax_amount=created_order.tax_amount,\n            total_amount=created_order.total_amount,\n            shipping_cost=created_order.shipping_cost,\n            shipping_address=created_order.shipping_address,\n            notes=created_order.notes,\n            created_by_id=created_order.created_by_id,\n            created_at=created_order.created_at,\n            updated_at=created_order.updated_at,\n            lines=[],\n            customer_name=created_order.customer.company_name if created_order.customer else \"\",\n            customer_email=created_order.customer.email if created_order.customer else \"\"\n        )\n        \n        # Agregar l√≠neas\n        for line in created_order.lines:\n            order_line = SalesOrderLine(\n                id=line.id,\n                order_id=line.order_id,\n                product_id=line.product_id,\n                quantity=line.quantity,\n                unit_price=line.unit_price,\n                discount_percent=line.discount_percent,\n                line_total=line.line_total,\n                description=line.description,\n                quantity_shipped=line.quantity_shipped,\n                quantity_invoiced=line.quantity_invoiced\n            )\n            order_response.lines.append(order_line)\n        \n        return order_response\n        \n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.post(\"/from-quote/{quote_id}\", response_model=SalesOrder)\ndef create_order_from_quote(\n    quote_id: int,\n    delivery_date: Optional[date] = Query(None, description=\"Fecha de entrega\"),\n    shipping_address: Optional[str] = Query(None, description=\"Direcci√≥n de env√≠o\"),\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Crear orden de venta desde cotizaci√≥n aceptada\"\"\"\n    try:\n        order = sales_order_crud.create_from_quote(\n            db=db,\n            quote_id=quote_id,\n            created_by_id=int(current_user.id),\n            delivery_date=delivery_date,\n            shipping_address=shipping_address\n        )\n        \n        # Obtener la orden completa con relaciones\n        created_order = sales_order_crud.get(db=db, order_id=int(order.id))\n        if not created_order:\n            raise HTTPException(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                detail=\"Error al obtener la orden creada desde cotizaci√≥n\"\n            )\n        \n        # Convertir a esquema de respuesta\n        order_response = SalesOrder(\n            id=created_order.id,\n            order_number=created_order.order_number,\n            quote_id=created_order.quote_id,\n            customer_id=created_order.customer_id,\n            order_date=created_order.order_date,\n            delivery_date=created_order.delivery_date,\n            status=parse_sales_order_status(str(created_order.status)),\n            subtotal=created_order.subtotal,\n            tax_amount=created_order.tax_amount,\n            total_amount=created_order.total_amount,\n            shipping_cost=created_order.shipping_cost,\n            shipping_address=created_order.shipping_address,\n            notes=created_order.notes,\n            created_by_id=created_order.created_by_id,\n            created_at=created_order.created_at,\n            updated_at=created_order.updated_at,\n            lines=[],\n            customer_name=created_order.customer.company_name if created_order.customer else \"\",\n            customer_email=created_order.customer.email if created_order.customer else \"\"\n        )\n        \n        # Agregar l√≠neas\n        for line in created_order.lines:\n            order_line = SalesOrderLine(\n                id=line.id,\n                order_id=line.order_id,\n                product_id=line.product_id,\n                quantity=line.quantity,\n                unit_price=line.unit_price,\n                discount_percent=line.discount_percent,\n                line_total=line.line_total,\n                description=line.description,\n                quantity_shipped=line.quantity_shipped,\n                quantity_invoiced=line.quantity_invoiced\n            )\n            order_response.lines.append(order_line)\n        \n        return order_response\n        \n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.put(\"/{order_id}\", response_model=SalesOrder)\ndef update_sales_order(\n    order_id: int,\n    order_in: SalesOrderUpdate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar orden de venta existente\"\"\"\n    db_order = sales_order_crud.get(db=db, order_id=order_id)\n    if not db_order:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Orden de venta no encontrada\"\n        )\n    \n    try:\n        order = sales_order_crud.update(db=db, db_order=db_order, order_in=order_in)\n        \n        # Obtener la orden actualizada con relaciones\n        updated_order = sales_order_crud.get(db=db, order_id=int(order.id))\n        if not updated_order:\n            raise HTTPException(\n                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n                detail=\"Error al obtener la orden actualizada\"\n            )\n        \n        # Convertir a esquema de respuesta\n        order_response = SalesOrder(\n            id=updated_order.id,\n            order_number=updated_order.order_number,\n            quote_id=updated_order.quote_id,\n            customer_id=updated_order.customer_id,\n            order_date=updated_order.order_date,\n            delivery_date=updated_order.delivery_date,\n            status=parse_sales_order_status(str(updated_order.status)),\n            subtotal=updated_order.subtotal,\n            tax_amount=updated_order.tax_amount,\n            total_amount=updated_order.total_amount,\n            shipping_cost=updated_order.shipping_cost,\n            shipping_address=updated_order.shipping_address,\n            notes=updated_order.notes,\n            created_by_id=updated_order.created_by_id,\n            created_at=updated_order.created_at,\n            updated_at=updated_order.updated_at,\n            lines=[],\n            customer_name=updated_order.customer.company_name if updated_order.customer else \"\",\n            customer_email=updated_order.customer.email if updated_order.customer else \"\"\n        )\n        \n        # Agregar l√≠neas\n        for line in updated_order.lines:\n            order_line = SalesOrderLine(\n                id=line.id,\n                order_id=line.order_id,\n                product_id=line.product_id,\n                quantity=line.quantity,\n                unit_price=line.unit_price,\n                discount_percent=line.discount_percent,\n                line_total=line.line_total,\n                description=line.description,\n                quantity_shipped=line.quantity_shipped,\n                quantity_invoiced=line.quantity_invoiced\n            )\n            order_response.lines.append(order_line)\n        \n        return order_response\n        \n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n\n@router.patch(\"/{order_id}/status\")\ndef update_order_status(\n    order_id: int,\n    new_status: SalesOrderStatus,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar estado de orden de venta\"\"\"\n    order = sales_order_crud.update_status(db=db, order_id=order_id, new_status=new_status)\n    if not order:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Orden de venta no encontrada\"\n        )\n    \n    return {\"message\": f\"Estado de orden actualizado a {new_status.value}\"}\n\n@router.delete(\"/{order_id}\")\ndef cancel_sales_order(\n    order_id: int,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Cancelar orden de venta (solo si est√° pendiente o confirmada)\"\"\"\n    success = sales_order_crud.cancel(db=db, order_id=order_id)\n    if not success:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"No se puede cancelar la orden. Solo se permiten cancelar √≥rdenes pendientes o confirmadas.\"\n        )\n    \n    return {\"message\": \"Orden de venta cancelada exitosamente\"}","size_bytes":14098},"app/crud/product.py":{"content":"from typing import List, Optional\nfrom decimal import Decimal\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import and_, or_, desc\n\nfrom app.models.product import Product, ProductCategory, StockMovement\nfrom app.schemas.product import (\n    ProductCreate, ProductUpdate, ProductCategoryCreate, ProductCategoryUpdate,\n    StockMovementCreate, StockAdjustment\n)\n\nclass ProductCategoryCRUD:\n    def get(self, db: Session, category_id: int) -> Optional[ProductCategory]:\n        \"\"\"Obtener categor√≠a por ID\"\"\"\n        return db.query(ProductCategory).filter(ProductCategory.id == category_id).first()\n    \n    def get_by_name(self, db: Session, name: str) -> Optional[ProductCategory]:\n        \"\"\"Obtener categor√≠a por nombre\"\"\"\n        return db.query(ProductCategory).filter(ProductCategory.name == name).first()\n    \n    def get_multi(\n        self, \n        db: Session, \n        skip: int = 0, \n        limit: int = 100,\n        is_active: Optional[bool] = None\n    ) -> List[ProductCategory]:\n        \"\"\"Obtener m√∫ltiples categor√≠as\"\"\"\n        query = db.query(ProductCategory)\n        \n        if is_active is not None:\n            query = query.filter(ProductCategory.is_active == is_active)\n        \n        return query.offset(skip).limit(limit).all()\n    \n    def create(self, db: Session, category_in: ProductCategoryCreate) -> ProductCategory:\n        \"\"\"Crear nueva categor√≠a\"\"\"\n        db_category = ProductCategory(**category_in.dict())\n        db.add(db_category)\n        db.commit()\n        db.refresh(db_category)\n        return db_category\n    \n    def update(self, db: Session, db_category: ProductCategory, category_in: ProductCategoryUpdate) -> ProductCategory:\n        \"\"\"Actualizar categor√≠a existente\"\"\"\n        update_data = category_in.dict(exclude_unset=True)\n        for field, value in update_data.items():\n            setattr(db_category, field, value)\n        \n        db.add(db_category)\n        db.commit()\n        db.refresh(db_category)\n        return db_category\n\nclass ProductCRUD:\n    def get(self, db: Session, product_id: int) -> Optional[Product]:\n        \"\"\"Obtener producto por ID\"\"\"\n        return db.query(Product).filter(Product.id == product_id).first()\n    \n    def get_by_code(self, db: Session, product_code: str) -> Optional[Product]:\n        \"\"\"Obtener producto por c√≥digo\"\"\"\n        return db.query(Product).filter(Product.product_code == product_code).first()\n    \n    def get_by_barcode(self, db: Session, barcode: str) -> Optional[Product]:\n        \"\"\"Obtener producto por c√≥digo de barras\"\"\"\n        return db.query(Product).filter(Product.barcode == barcode).first()\n    \n    def get_multi(\n        self, \n        db: Session, \n        skip: int = 0, \n        limit: int = 100,\n        category_id: Optional[int] = None,\n        is_active: Optional[bool] = None,\n        is_trackable: Optional[bool] = None,\n        low_stock: bool = False,\n        search: Optional[str] = None\n    ) -> List[Product]:\n        \"\"\"Obtener m√∫ltiples productos con filtros\"\"\"\n        query = db.query(Product)\n        \n        if category_id:\n            query = query.filter(Product.category_id == category_id)\n        \n        if is_active is not None:\n            query = query.filter(Product.is_active == is_active)\n        \n        if is_trackable is not None:\n            query = query.filter(Product.is_trackable == is_trackable)\n        \n        if low_stock:\n            query = query.filter(\n                and_(\n                    Product.is_trackable == True,\n                    Product.current_stock <= Product.min_stock_level\n                )\n            )\n        \n        if search:\n            search_filter = or_(\n                Product.name.ilike(f\"%{search}%\"),\n                Product.product_code.ilike(f\"%{search}%\"),\n                Product.description.ilike(f\"%{search}%\"),\n                Product.barcode.ilike(f\"%{search}%\")\n            )\n            query = query.filter(search_filter)\n        \n        return query.offset(skip).limit(limit).all()\n    \n    def create(self, db: Session, product_in: ProductCreate) -> Product:\n        \"\"\"Crear nuevo producto\"\"\"\n        # Generar c√≥digo de producto autom√°ticamente\n        last_product = db.query(Product).order_by(Product.id.desc()).first()\n        if last_product:\n            last_number = int(last_product.product_code.replace(\"PROD\", \"\"))\n            new_number = last_number + 1\n        else:\n            new_number = 1\n        \n        product_code = f\"PROD{new_number:06d}\"\n        \n        db_product = Product(\n            product_code=product_code,\n            current_stock=0,\n            **product_in.dict()\n        )\n        \n        db.add(db_product)\n        db.commit()\n        db.refresh(db_product)\n        return db_product\n    \n    def update(self, db: Session, db_product: Product, product_in: ProductUpdate) -> Product:\n        \"\"\"Actualizar producto existente\"\"\"\n        update_data = product_in.dict(exclude_unset=True)\n        \n        for field, value in update_data.items():\n            setattr(db_product, field, value)\n        \n        db.add(db_product)\n        db.commit()\n        db.refresh(db_product)\n        return db_product\n    \n    def adjust_stock(self, db: Session, adjustment: StockAdjustment) -> Product:\n        \"\"\"Ajustar stock de producto\"\"\"\n        product = self.get(db, adjustment.product_id)\n        if not product:\n            raise ValueError(f\"Producto con ID {adjustment.product_id} no encontrado\")\n        \n        if not product.is_trackable:\n            raise ValueError(\"No se puede ajustar stock de productos no rastreables\")\n        \n        # Calcular diferencia (manejar current_stock None)\n        current_stock = product.current_stock or 0\n        difference = adjustment.new_quantity - current_stock\n        \n        # Crear movimiento de stock\n        movement = StockMovement(\n            product_id=adjustment.product_id,\n            movement_type=\"ADJUSTMENT\",\n            quantity=difference,\n            unit_cost=adjustment.unit_cost,\n            reference_type=\"ADJUSTMENT\",\n            notes=adjustment.reason\n        )\n        db.add(movement)\n        \n        # Actualizar stock actual\n        product.current_stock = adjustment.new_quantity\n        db.add(product)\n        \n        db.commit()\n        db.refresh(product)\n        return product\n    \n    def update_stock(self, db: Session, product_id: int, quantity_change: int, \n                    movement_type: str, reference_type: Optional[str] = None,\n                    reference_id: Optional[int] = None, unit_cost: Optional[Decimal] = None,\n                    notes: Optional[str] = None) -> Product:\n        \"\"\"Actualizar stock de producto\"\"\"\n        product = self.get(db, product_id)\n        if not product:\n            raise ValueError(f\"Producto con ID {product_id} no encontrado\")\n        \n        if not product.is_trackable:\n            raise ValueError(\"No se puede actualizar stock de productos no rastreables\")\n        \n        # Validar que no resulte en stock negativo (manejar current_stock None)\n        current_stock = product.current_stock or 0\n        new_stock = current_stock + quantity_change\n        if new_stock < 0:\n            raise ValueError(f\"Stock insuficiente. Stock actual: {current_stock}, Cambio solicitado: {quantity_change}\")\n        \n        # Crear movimiento de stock\n        movement = StockMovement(\n            product_id=product_id,\n            movement_type=movement_type,\n            quantity=quantity_change,\n            unit_cost=unit_cost,\n            reference_type=reference_type,\n            reference_id=reference_id,\n            notes=notes\n        )\n        db.add(movement)\n        \n        # Actualizar stock actual\n        product.current_stock = new_stock\n        db.add(product)\n        \n        db.commit()\n        db.refresh(product)\n        return product\n\nclass StockMovementCRUD:\n    def get_by_product(self, db: Session, product_id: int, limit: int = 100) -> List[StockMovement]:\n        \"\"\"Obtener movimientos de stock por producto\"\"\"\n        return db.query(StockMovement).filter(\n            StockMovement.product_id == product_id\n        ).order_by(desc(StockMovement.created_at)).limit(limit).all()\n    \n    def get_multi(\n        self, \n        db: Session, \n        skip: int = 0, \n        limit: int = 100,\n        product_id: Optional[int] = None,\n        movement_type: Optional[str] = None,\n        reference_type: Optional[str] = None\n    ) -> List[StockMovement]:\n        \"\"\"Obtener m√∫ltiples movimientos con filtros\"\"\"\n        query = db.query(StockMovement)\n        \n        if product_id:\n            query = query.filter(StockMovement.product_id == product_id)\n        \n        if movement_type:\n            query = query.filter(StockMovement.movement_type == movement_type)\n        \n        if reference_type:\n            query = query.filter(StockMovement.reference_type == reference_type)\n        \n        return query.order_by(desc(StockMovement.created_at)).offset(skip).limit(limit).all()\n    \n    def create(self, db: Session, movement_in: StockMovementCreate) -> StockMovement:\n        \"\"\"Crear movimiento de stock\"\"\"\n        db_movement = StockMovement(**movement_in.dict())\n        db.add(db_movement)\n        db.commit()\n        db.refresh(db_movement)\n        return db_movement\n\n# Instancias globales\nproduct_category_crud = ProductCategoryCRUD()\nproduct_crud = ProductCRUD()\nstock_movement_crud = StockMovementCRUD()","size_bytes":9484},"app/crud/sales_order.py":{"content":"from typing import List, Optional\nfrom datetime import date, datetime\nfrom decimal import Decimal\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import and_, or_, desc\n\nfrom app.models.sales import SalesOrder, SalesOrderLine, Quote, QuoteLine\nfrom app.models.customer import Customer\nfrom app.models.product import Product\nfrom app.schemas.sales_order import SalesOrderCreate, SalesOrderUpdate, SalesOrderStatus\n\nclass SalesOrderCRUD:\n    def get(self, db: Session, order_id: int) -> Optional[SalesOrder]:\n        \"\"\"Obtener orden por ID\"\"\"\n        return db.query(SalesOrder).filter(SalesOrder.id == order_id).first()\n    \n    def get_by_number(self, db: Session, order_number: str) -> Optional[SalesOrder]:\n        \"\"\"Obtener orden por n√∫mero\"\"\"\n        return db.query(SalesOrder).filter(SalesOrder.order_number == order_number).first()\n    \n    def get_multi(\n        self, \n        db: Session, \n        skip: int = 0, \n        limit: int = 100,\n        customer_id: Optional[int] = None,\n        status: Optional[SalesOrderStatus] = None,\n        date_from: Optional[date] = None,\n        date_to: Optional[date] = None,\n        search: Optional[str] = None\n    ) -> List[SalesOrder]:\n        \"\"\"Obtener m√∫ltiples √≥rdenes con filtros\"\"\"\n        query = db.query(SalesOrder).join(Customer)\n        \n        if customer_id:\n            query = query.filter(SalesOrder.customer_id == customer_id)\n        \n        if status:\n            query = query.filter(SalesOrder.status == status.value)\n        \n        if date_from:\n            query = query.filter(SalesOrder.order_date >= date_from)\n        \n        if date_to:\n            query = query.filter(SalesOrder.order_date <= date_to)\n        \n        if search:\n            search_filter = or_(\n                SalesOrder.order_number.ilike(f\"%{search}%\"),\n                Customer.company_name.ilike(f\"%{search}%\"),\n                SalesOrder.notes.ilike(f\"%{search}%\")\n            )\n            query = query.filter(search_filter)\n        \n        return query.order_by(desc(SalesOrder.created_at)).offset(skip).limit(limit).all()\n    \n    def create(self, db: Session, order_in: SalesOrderCreate, created_by_id: int) -> SalesOrder:\n        \"\"\"Crear nueva orden de venta\"\"\"\n        # Generar n√∫mero de orden\n        today = datetime.now()\n        year_month = today.strftime(\"%Y%m\")\n        \n        # Buscar el √∫ltimo n√∫mero de orden del mes\n        last_order = db.query(SalesOrder).filter(\n            SalesOrder.order_number.like(f\"ORD{year_month}%\")\n        ).order_by(desc(SalesOrder.order_number)).first()\n        \n        if last_order:\n            last_number = int(last_order.order_number[-4:])\n            new_number = last_number + 1\n        else:\n            new_number = 1\n        \n        order_number = f\"ORD{year_month}{new_number:04d}\"\n        \n        # Crear orden\n        db_order = SalesOrder(\n            order_number=order_number,\n            quote_id=order_in.quote_id,\n            customer_id=order_in.customer_id,\n            order_date=order_in.order_date,\n            delivery_date=order_in.delivery_date,\n            status=SalesOrderStatus.pending.value,\n            shipping_cost=order_in.shipping_cost,\n            shipping_address=order_in.shipping_address,\n            notes=order_in.notes,\n            created_by_id=created_by_id\n        )\n        \n        db.add(db_order)\n        db.flush()  # Para obtener el ID\n        \n        # Crear l√≠neas de orden\n        total_subtotal = Decimal(\"0.00\")\n        for line_data in order_in.lines:\n            # Obtener informaci√≥n del producto\n            product = db.query(Product).filter(Product.id == line_data.product_id).first()\n            if not product:\n                raise ValueError(f\"Producto con ID {line_data.product_id} no encontrado\")\n            \n            # Calcular total de la l√≠nea\n            line_subtotal = Decimal(str(line_data.quantity)) * line_data.unit_price\n            discount_amount = line_subtotal * (line_data.discount_percent / 100)\n            line_total = line_subtotal - discount_amount\n            \n            db_line = SalesOrderLine(\n                order_id=db_order.id,\n                product_id=line_data.product_id,\n                quantity=line_data.quantity,\n                unit_price=line_data.unit_price,\n                discount_percent=line_data.discount_percent,\n                line_total=line_total,\n                description=line_data.description,\n                quantity_shipped=0,\n                quantity_invoiced=0\n            )\n            db.add(db_line)\n            total_subtotal += line_total\n        \n        # Calcular totales (IVA 16%)\n        tax_rate = Decimal(\"0.16\")\n        db_order.subtotal = total_subtotal\n        db_order.tax_amount = total_subtotal * tax_rate\n        db_order.total_amount = total_subtotal + db_order.tax_amount + db_order.shipping_cost\n        \n        db.commit()\n        db.refresh(db_order)\n        return db_order\n    \n    def create_from_quote(self, db: Session, quote_id: int, created_by_id: int, \n                         delivery_date: Optional[date] = None,\n                         shipping_address: Optional[str] = None) -> SalesOrder:\n        \"\"\"Crear orden de venta desde cotizaci√≥n\"\"\"\n        # Obtener cotizaci√≥n\n        quote = db.query(Quote).filter(Quote.id == quote_id).first()\n        if not quote:\n            raise ValueError(f\"Cotizaci√≥n con ID {quote_id} no encontrada\")\n        \n        # Verificar que la cotizaci√≥n est√© aceptada\n        if quote.status.upper() != \"ACCEPTED\":\n            raise ValueError(\"Solo se pueden convertir cotizaciones aceptadas a √≥rdenes\")\n        \n        # Generar n√∫mero de orden\n        today = datetime.now()\n        year_month = today.strftime(\"%Y%m\")\n        \n        last_order = db.query(SalesOrder).filter(\n            SalesOrder.order_number.like(f\"ORD{year_month}%\")\n        ).order_by(desc(SalesOrder.order_number)).first()\n        \n        if last_order:\n            last_number = int(last_order.order_number[-4:])\n            new_number = last_number + 1\n        else:\n            new_number = 1\n        \n        order_number = f\"ORD{year_month}{new_number:04d}\"\n        \n        # Crear orden desde cotizaci√≥n\n        db_order = SalesOrder(\n            order_number=order_number,\n            quote_id=quote_id,\n            customer_id=quote.customer_id,\n            order_date=date.today(),\n            delivery_date=delivery_date,\n            status=SalesOrderStatus.pending.value,\n            subtotal=quote.subtotal,\n            tax_amount=quote.tax_amount,\n            total_amount=quote.total_amount,\n            shipping_cost=Decimal(\"0.00\"),\n            shipping_address=shipping_address,\n            notes=quote.notes,\n            created_by_id=created_by_id\n        )\n        \n        db.add(db_order)\n        db.flush()\n        \n        # Copiar l√≠neas de cotizaci√≥n\n        for quote_line in quote.lines:\n            db_line = SalesOrderLine(\n                order_id=db_order.id,\n                product_id=quote_line.product_id,\n                quantity=quote_line.quantity,\n                unit_price=quote_line.unit_price,\n                discount_percent=quote_line.discount_percent,\n                line_total=quote_line.line_total,\n                description=quote_line.description,\n                quantity_shipped=0,\n                quantity_invoiced=0\n            )\n            db.add(db_line)\n        \n        db.commit()\n        db.refresh(db_order)\n        return db_order\n    \n    def update(self, db: Session, db_order: SalesOrder, order_in: SalesOrderUpdate) -> SalesOrder:\n        \"\"\"Actualizar orden existente\"\"\"\n        update_data = order_in.dict(exclude_unset=True, exclude={\"lines\"})\n        \n        # Actualizar campos de la orden\n        for field, value in update_data.items():\n            if field == \"status\" and value:\n                setattr(db_order, field, value.value)\n            else:\n                setattr(db_order, field, value)\n        \n        # Si se proporcionan l√≠neas, actualizar la lista completa\n        if order_in.lines is not None:\n            # Solo permitir si est√° en estado pending\n            if db_order.status != SalesOrderStatus.pending.value:\n                raise ValueError(\"Solo se pueden actualizar l√≠neas en √≥rdenes pendientes\")\n            \n            # Eliminar l√≠neas existentes\n            db.query(SalesOrderLine).filter(SalesOrderLine.order_id == db_order.id).delete()\n            \n            # Crear nuevas l√≠neas\n            total_subtotal = Decimal(\"0.00\")\n            for line_data in order_in.lines:\n                # Obtener informaci√≥n del producto\n                product = db.query(Product).filter(Product.id == line_data.product_id).first()\n                if not product:\n                    raise ValueError(f\"Producto con ID {line_data.product_id} no encontrado\")\n                \n                # Calcular total de la l√≠nea\n                line_subtotal = Decimal(str(line_data.quantity)) * line_data.unit_price\n                discount_amount = line_subtotal * (line_data.discount_percent / 100)\n                line_total = line_subtotal - discount_amount\n                \n                db_line = SalesOrderLine(\n                    order_id=db_order.id,\n                    product_id=line_data.product_id,\n                    quantity=line_data.quantity,\n                    unit_price=line_data.unit_price,\n                    discount_percent=line_data.discount_percent,\n                    line_total=line_total,\n                    description=line_data.description,\n                    quantity_shipped=0,\n                    quantity_invoiced=0\n                )\n                db.add(db_line)\n                total_subtotal += line_total\n            \n            # Recalcular totales\n            tax_rate = Decimal(\"0.16\")\n            db_order.subtotal = total_subtotal\n            db_order.tax_amount = total_subtotal * tax_rate\n            db_order.total_amount = total_subtotal + db_order.tax_amount + db_order.shipping_cost\n        \n        db.add(db_order)\n        db.commit()\n        db.refresh(db_order)\n        return db_order\n    \n    def update_status(self, db: Session, order_id: int, new_status: SalesOrderStatus) -> Optional[SalesOrder]:\n        \"\"\"Actualizar estado de orden\"\"\"\n        db_order = self.get(db, order_id)\n        if db_order:\n            db_order.status = new_status.value\n            db.add(db_order)\n            db.commit()\n            db.refresh(db_order)\n        return db_order\n    \n    def cancel(self, db: Session, order_id: int) -> bool:\n        \"\"\"Cancelar orden (solo si est√° pendiente o confirmada)\"\"\"\n        db_order = self.get(db, order_id)\n        if db_order and db_order.status in [SalesOrderStatus.pending.value, SalesOrderStatus.confirmed.value]:\n            db_order.status = SalesOrderStatus.cancelled.value\n            db.add(db_order)\n            db.commit()\n            return True\n        return False\n\n# Instancia global\nsales_order_crud = SalesOrderCRUD()","size_bytes":11067},"app/schemas/product.py":{"content":"from typing import List, Optional\nfrom datetime import datetime, date\nfrom decimal import Decimal\nfrom pydantic import BaseModel, Field, field_validator\nfrom enum import Enum\n\nclass CurrencyEnum(str, Enum):\n    PYG = \"PYG\"\n    USD = \"USD\"\n\n# Schemas para ProductCategory\nclass ProductCategoryBase(BaseModel):\n    name: str = Field(..., description=\"Nombre de la categor√≠a\")\n    description: Optional[str] = Field(None, description=\"Descripci√≥n de la categor√≠a\")\n    is_active: bool = Field(True, description=\"Categor√≠a activa\")\n\nclass ProductCategoryCreate(ProductCategoryBase):\n    pass\n\nclass ProductCategoryUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    is_active: Optional[bool] = None\n\nclass ProductCategory(ProductCategoryBase):\n    id: int\n    created_at: datetime\n    \n    @field_validator('is_active', mode='before')\n    @classmethod\n    def validate_is_active(cls, v):\n        # Convert None to True (default value)\n        if v is None:\n            return True\n        return v\n    \n    class Config:\n        from_attributes = True\n\n# Schemas para Product\nclass ProductBase(BaseModel):\n    name: str = Field(..., description=\"Nombre del producto\")\n    description: Optional[str] = Field(None, description=\"Descripci√≥n del producto\")\n    category_id: Optional[int] = Field(None, description=\"ID de la categor√≠a\")\n    unit_of_measure: str = Field(\"PZA\", description=\"Unidad de medida\")\n    cost_price: Decimal = Field(Decimal(\"0.00\"), ge=0, description=\"Precio de costo\")\n    selling_price: Decimal = Field(..., ge=0, description=\"Precio de venta\")\n    min_stock_level: int = Field(0, ge=0, description=\"Nivel m√≠nimo de stock\")\n    max_stock_level: int = Field(0, ge=0, description=\"Nivel m√°ximo de stock\")\n    is_active: bool = Field(True, description=\"Producto activo\")\n    is_trackable: bool = Field(True, description=\"Maneja inventario\")\n    image_url: Optional[str] = Field(None, description=\"URL de imagen\")\n    barcode: Optional[str] = Field(None, description=\"C√≥digo de barras\")\n    weight: Optional[Decimal] = Field(None, ge=0, description=\"Peso en kg\")\n    expiry_date: Optional[date] = Field(None, description=\"Fecha de vencimiento\")\n    currency: CurrencyEnum = Field(CurrencyEnum.PYG, description=\"Moneda (PYG, USD)\")\n\nclass ProductCreate(ProductBase):\n    pass\n\nclass ProductUpdate(BaseModel):\n    name: Optional[str] = None\n    description: Optional[str] = None\n    category_id: Optional[int] = None\n    unit_of_measure: Optional[str] = None\n    cost_price: Optional[Decimal] = None\n    selling_price: Optional[Decimal] = None\n    min_stock_level: Optional[int] = None\n    max_stock_level: Optional[int] = None\n    is_active: Optional[bool] = None\n    is_trackable: Optional[bool] = None\n    image_url: Optional[str] = None\n    barcode: Optional[str] = None\n    weight: Optional[Decimal] = None\n    expiry_date: Optional[date] = None\n    currency: Optional[CurrencyEnum] = None\n\nclass Product(ProductBase):\n    id: int\n    product_code: str\n    current_stock: int\n    expiry_date: Optional[date] = None\n    currency: CurrencyEnum\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n    category_name: Optional[str] = None\n    \n    @field_validator('is_active', mode='before')\n    @classmethod\n    def validate_is_active(cls, v):\n        # Convert None to True (default value)\n        if v is None:\n            return True\n        return v\n    \n    @field_validator('is_trackable', mode='before')\n    @classmethod\n    def validate_is_trackable(cls, v):\n        # Convert None to True (default value)\n        if v is None:\n            return True\n        return v\n    \n    class Config:\n        from_attributes = True\n\nclass ProductList(BaseModel):\n    id: int\n    product_code: str\n    name: str\n    category_name: Optional[str] = None\n    selling_price: Decimal\n    current_stock: int\n    is_active: bool\n    is_trackable: bool\n    currency: CurrencyEnum\n    expiry_date: Optional[date] = None\n    \n    @field_validator('is_active', mode='before')\n    @classmethod\n    def validate_is_active(cls, v):\n        # Convert None to True (default value)\n        if v is None:\n            return True\n        return v\n    \n    @field_validator('is_trackable', mode='before')\n    @classmethod\n    def validate_is_trackable(cls, v):\n        # Convert None to True (default value)\n        if v is None:\n            return True\n        return v\n    \n    class Config:\n        from_attributes = True\n\n# Schemas para StockMovement\nclass StockMovementBase(BaseModel):\n    product_id: int = Field(..., description=\"ID del producto\")\n    movement_type: str = Field(..., description=\"Tipo de movimiento: IN, OUT, ADJUSTMENT\")\n    quantity: int = Field(..., description=\"Cantidad (positiva para IN, negativa para OUT)\")\n    unit_cost: Optional[Decimal] = Field(None, ge=0, description=\"Costo unitario\")\n    reference_type: Optional[str] = Field(None, description=\"Tipo de referencia: SALE, PURCHASE, ADJUSTMENT\")\n    reference_id: Optional[int] = Field(None, description=\"ID de referencia\")\n    notes: Optional[str] = Field(None, description=\"Notas del movimiento\")\n\nclass StockMovementCreate(StockMovementBase):\n    pass\n\nclass StockMovement(StockMovementBase):\n    id: int\n    created_at: datetime\n    product_name: Optional[str] = None\n    \n    class Config:\n        from_attributes = True\n\nclass StockAdjustment(BaseModel):\n    product_id: int = Field(..., description=\"ID del producto\")\n    new_quantity: int = Field(..., ge=0, description=\"Nueva cantidad en inventario\")\n    reason: str = Field(..., description=\"Raz√≥n del ajuste\")\n    unit_cost: Optional[Decimal] = Field(None, ge=0, description=\"Costo unitario\")","size_bytes":5696},"app/schemas/sales_order.py":{"content":"from typing import List, Optional\nfrom datetime import datetime, date\nfrom decimal import Decimal\nfrom enum import Enum\nfrom pydantic import BaseModel, Field\n\n# Enums\nclass SalesOrderStatus(str, Enum):\n    pending = \"PENDING\"\n    confirmed = \"CONFIRMED\"\n    shipped = \"SHIPPED\"\n    delivered = \"DELIVERED\"\n    cancelled = \"CANCELLED\"\n\n# Schemas para SalesOrderLine\nclass SalesOrderLineBase(BaseModel):\n    product_id: int = Field(..., description=\"ID del producto\")\n    quantity: int = Field(..., gt=0, description=\"Cantidad\")\n    unit_price: Decimal = Field(..., ge=0, description=\"Precio unitario\")\n    discount_percent: Decimal = Field(Decimal(\"0.00\"), ge=0, le=100, description=\"Descuento en porcentaje\")\n    description: Optional[str] = Field(None, description=\"Descripci√≥n del art√≠culo\")\n\nclass SalesOrderLineCreate(SalesOrderLineBase):\n    pass\n\nclass SalesOrderLineUpdate(BaseModel):\n    product_id: Optional[int] = None\n    quantity: Optional[int] = None\n    unit_price: Optional[Decimal] = None\n    discount_percent: Optional[Decimal] = None\n    description: Optional[str] = None\n\nclass SalesOrderLine(SalesOrderLineBase):\n    id: int\n    order_id: int\n    line_total: Decimal = Field(..., description=\"Total de la l√≠nea\")\n    quantity_shipped: int = Field(0, description=\"Cantidad enviada\")\n    quantity_invoiced: int = Field(0, description=\"Cantidad facturada\")\n    \n    class Config:\n        from_attributes = True\n\n# Schemas para SalesOrder\nclass SalesOrderBase(BaseModel):\n    customer_id: int = Field(..., description=\"ID del cliente\")\n    order_date: date = Field(..., description=\"Fecha de la orden\")\n    delivery_date: Optional[date] = Field(None, description=\"Fecha de entrega esperada\")\n    shipping_cost: Decimal = Field(Decimal(\"0.00\"), ge=0, description=\"Costo de env√≠o\")\n    shipping_address: Optional[str] = Field(None, description=\"Direcci√≥n de env√≠o\")\n    notes: Optional[str] = Field(None, description=\"Notas adicionales\")\n\nclass SalesOrderCreate(SalesOrderBase):\n    quote_id: Optional[int] = Field(None, description=\"ID de cotizaci√≥n origen\")\n    lines: List[SalesOrderLineCreate] = Field(..., min_length=1, description=\"L√≠neas de la orden\")\n\nclass SalesOrderUpdate(BaseModel):\n    customer_id: Optional[int] = None\n    order_date: Optional[date] = None\n    delivery_date: Optional[date] = None\n    status: Optional[SalesOrderStatus] = None\n    shipping_cost: Optional[Decimal] = None\n    shipping_address: Optional[str] = None\n    notes: Optional[str] = None\n    lines: Optional[List[SalesOrderLineCreate]] = None\n\nclass SalesOrder(SalesOrderBase):\n    id: int\n    order_number: str\n    quote_id: Optional[int] = None\n    status: SalesOrderStatus\n    subtotal: Decimal\n    tax_amount: Decimal\n    total_amount: Decimal\n    created_by_id: int\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n    lines: List[SalesOrderLine] = []\n    \n    # Informaci√≥n del cliente\n    customer_name: Optional[str] = None\n    customer_email: Optional[str] = None\n    \n    class Config:\n        from_attributes = True\n\nclass SalesOrderList(BaseModel):\n    id: int\n    order_number: str\n    customer_id: int\n    customer_name: str\n    order_date: date\n    delivery_date: Optional[date] = None\n    status: SalesOrderStatus\n    total_amount: Decimal\n    created_at: datetime\n    \n    class Config:\n        from_attributes = True\n\n# Helper function similar to quote status\ndef parse_sales_order_status(status_value) -> SalesOrderStatus:\n    \"\"\"Parse and normalize database status value to SalesOrderStatus enum\"\"\"\n    if isinstance(status_value, SalesOrderStatus):\n        return status_value\n    if not status_value:\n        return SalesOrderStatus.pending\n    \n    status_str = str(status_value).strip().upper()\n    try:\n        return SalesOrderStatus(status_str)\n    except ValueError:\n        # Handle legacy or unknown values\n        if status_str in [\"DRAFT\", \"NEW\"]:\n            return SalesOrderStatus.pending\n        return SalesOrderStatus.pending","size_bytes":3993},"static/app.js":{"content":"// ERP Empresarial - Professional Sales Management System\nconst API_BASE = '';\nlet authToken = localStorage.getItem('authToken');\nlet currentUser = null;\nlet allProducts = [];\nlet allCustomers = [];\nlet allCategories = [];\n\n// Initialize application\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeApp();\n});\n\nasync function initializeApp() {\n    if (authToken) {\n        await checkAuth();\n    } else {\n        showLogin();\n    }\n    \n    setupEventListeners();\n}\n\nfunction setupEventListeners() {\n    // Login form\n    const loginForm = document.getElementById('login-form');\n    if (loginForm) {\n        loginForm.addEventListener('submit', handleLogin);\n    }\n    \n    // Navigation links\n    document.querySelectorAll('.nav-link[data-section]').forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            const section = this.dataset.section;\n            showSection(section);\n            updateActiveNav(this);\n            updatePageHeader(section);\n        });\n    });\n    \n    // Form submissions\n    setupFormHandlers();\n}\n\nfunction setupFormHandlers() {\n    // Product forms\n    const addProductForm = document.getElementById('addProductForm');\n    if (addProductForm) {\n        addProductForm.addEventListener('submit', handleAddProduct);\n    }\n    \n    const editProductForm = document.getElementById('editProductForm');\n    if (editProductForm) {\n        editProductForm.addEventListener('submit', handleEditProduct);\n    }\n    \n    // Customer forms\n    const addCustomerForm = document.getElementById('addCustomerForm');\n    if (addCustomerForm) {\n        addCustomerForm.addEventListener('submit', handleAddCustomer);\n    }\n    \n    // Quote forms\n    const addQuoteForm = document.getElementById('addQuoteForm');\n    if (addQuoteForm) {\n        addQuoteForm.addEventListener('submit', handleAddQuote);\n    }\n    \n    // Quote item management\n    const addQuoteItemBtn = document.getElementById('addQuoteItem');\n    if (addQuoteItemBtn) {\n        addQuoteItemBtn.addEventListener('click', addQuoteItem);\n    }\n}\n\n// ===== AUTHENTICATION FUNCTIONS =====\nasync function handleLogin(e) {\n    e.preventDefault();\n    \n    const username = document.getElementById('username').value;\n    const password = document.getElementById('password').value;\n    \n    const submitBtn = e.target.querySelector('.btn-login');\n    const originalText = submitBtn.innerHTML;\n    \n    submitBtn.innerHTML = '<div class=\"spinner\"></div> Iniciando sesi√≥n...';\n    submitBtn.disabled = true;\n    \n    try {\n        const response = await fetch(`${API_BASE}/api/auth/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username, password })\n        });\n        \n        if (response.ok) {\n            const data = await response.json();\n            authToken = data.access_token;\n            currentUser = data.user;\n            \n            localStorage.setItem('authToken', authToken);\n            \n            await showApp();\n            await loadInitialData();\n        } else {\n            const error = await response.json();\n            showNotification('Error de autenticaci√≥n: ' + (error.detail || 'Credenciales inv√°lidas'), 'error');\n        }\n    } catch (error) {\n        showNotification('Error de conexi√≥n con el servidor', 'error');\n        console.error('Login error:', error);\n    } finally {\n        submitBtn.innerHTML = originalText;\n        submitBtn.disabled = false;\n    }\n}\n\nasync function checkAuth() {\n    try {\n        const response = await apiCall('/api/customers/');\n        if (response) {\n            await showApp();\n            await loadInitialData();\n        } else {\n            logout();\n        }\n    } catch (error) {\n        logout();\n    }\n}\n\nfunction showLogin() {\n    const loginSection = document.getElementById('login-section');\n    const appSection = document.getElementById('app-section');\n    \n    if (loginSection) {\n        loginSection.classList.remove('d-none');\n    }\n    if (appSection) {\n        appSection.classList.add('d-none');\n    }\n}\n\nasync function showApp() {\n    const loginSection = document.getElementById('login-section');\n    const appSection = document.getElementById('app-section');\n    \n    if (loginSection) {\n        loginSection.classList.add('d-none');\n    }\n    if (appSection) {\n        appSection.classList.remove('d-none');\n    }\n    \n    if (currentUser) {\n        const userNameEl = document.getElementById('user-name');\n        const userAvatarEl = document.getElementById('user-avatar');\n        \n        if (userNameEl) {\n            userNameEl.textContent = currentUser.full_name || currentUser.username;\n        }\n        if (userAvatarEl) {\n            userAvatarEl.textContent = (currentUser.full_name || currentUser.username).charAt(0).toUpperCase();\n        }\n    }\n}\n\nfunction logout() {\n    localStorage.removeItem('authToken');\n    authToken = null;\n    currentUser = null;\n    showLogin();\n}\n\n// ===== API FUNCTIONS =====\nasync function apiCall(endpoint, options = {}) {\n    const url = `${API_BASE}${endpoint}`;\n    const defaultOptions = {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${authToken}`\n        }\n    };\n    \n    const finalOptions = { ...defaultOptions, ...options };\n    if (finalOptions.headers && options.headers) {\n        finalOptions.headers = { ...defaultOptions.headers, ...options.headers };\n    }\n    \n    try {\n        const response = await fetch(url, finalOptions);\n        \n        if (response.status === 401) {\n            logout();\n            return null;\n        }\n        \n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            throw new Error(errorData.detail || `HTTP error! status: ${response.status}`);\n        }\n        \n        return await response.json();\n    } catch (error) {\n        console.error('API call failed:', error);\n        throw error;\n    }\n}\n\n// ===== NAVIGATION FUNCTIONS =====\nfunction showSection(sectionName) {\n    // Hide all sections\n    document.querySelectorAll('.content-section').forEach(section => {\n        section.classList.add('d-none');\n    });\n    \n    // Show selected section\n    const targetSection = document.getElementById(`${sectionName}-section`);\n    if (targetSection) {\n        targetSection.classList.remove('d-none');\n    }\n    \n    // Load section-specific data\n    loadSectionData(sectionName);\n}\n\nfunction updateActiveNav(activeLink) {\n    document.querySelectorAll('.nav-link').forEach(link => {\n        link.classList.remove('active');\n    });\n    activeLink.classList.add('active');\n}\n\nfunction updatePageHeader(section) {\n    const pageTitle = document.getElementById('page-title');\n    const pageSubtitle = document.getElementById('page-subtitle');\n    \n    const headers = {\n        dashboard: {\n            title: 'Dashboard Ejecutivo',\n            subtitle: 'Vista general del sistema de ventas'\n        },\n        customers: {\n            title: 'Gesti√≥n de Clientes',\n            subtitle: 'Administraci√≥n completa de clientes y prospectos'\n        },\n        quotes: {\n            title: 'Cotizaciones',\n            subtitle: 'Crear y gestionar cotizaciones de venta'\n        },\n        orders: {\n            title: '√ìrdenes de Venta',\n            subtitle: 'Procesamiento y seguimiento de √≥rdenes'\n        },\n        invoices: {\n            title: 'Facturas',\n            subtitle: 'Facturaci√≥n y control de pagos'\n        },\n        products: {\n            title: 'Productos',\n            subtitle: 'Cat√°logo y gesti√≥n de inventario'\n        },\n        analytics: {\n            title: 'An√°lisis Avanzado',\n            subtitle: 'M√©tricas detalladas y reportes empresariales'\n        }\n    };\n    \n    const header = headers[section] || headers.dashboard;\n    \n    if (pageTitle) {\n        pageTitle.textContent = header.title;\n    }\n    if (pageSubtitle) {\n        pageSubtitle.textContent = header.subtitle;\n    }\n}\n\n// ===== DATA LOADING FUNCTIONS =====\nasync function loadInitialData() {\n    try {\n        showLoadingState();\n        \n        // Load all necessary data\n        await Promise.all([\n            loadDashboardMetrics(),\n            loadNavigationCounts(),\n            loadCategories(),\n            loadCustomers(),\n            loadProducts()\n        ]);\n        \n        hideLoadingState();\n        \n    } catch (error) {\n        console.error('Error loading initial data:', error);\n        showNotification('Error cargando datos del sistema', 'error');\n        hideLoadingState();\n    }\n}\n\nasync function loadSectionData(section) {\n    switch (section) {\n        case 'products':\n            await loadProducts();\n            break;\n        case 'customers':\n            await loadCustomers();\n            break;\n        case 'quotes':\n            await loadQuotes();\n            break;\n        case 'users':\n            await loadUsersData();\n            break;\n        default:\n            break;\n    }\n}\n\nasync function loadDashboardMetrics() {\n    try {\n        const [customers, quotes, orders, products] = await Promise.all([\n            apiCall('/api/customers/'),\n            apiCall('/api/quotes/'),\n            apiCall('/api/sales-orders/'),\n            apiCall('/api/products/')\n        ]);\n        \n        const totalRevenue = orders ? orders.reduce((sum, order) => sum + parseFloat(order.total_amount || 0), 0) : 0;\n        \n        updateDashboardMetric('total-customers-metric', customers ? customers.length : '0');\n        updateDashboardMetric('total-quotes-metric', quotes ? quotes.length : '0');\n        updateDashboardMetric('total-orders-metric', orders ? orders.length : '0');\n        updateDashboardMetric('total-revenue-metric', formatCurrency(totalRevenue));\n        \n    } catch (error) {\n        console.error('Error loading dashboard metrics:', error);\n    }\n}\n\nasync function loadNavigationCounts() {\n    try {\n        const [customers, quotes, orders, products, invoices] = await Promise.all([\n            apiCall('/api/customers/'),\n            apiCall('/api/quotes/'),\n            apiCall('/api/sales-orders/'),\n            apiCall('/api/products/'),\n            apiCall('/api/invoices/')\n        ]);\n        \n        updateNavigationCount('customers-count', customers ? customers.length : '0');\n        updateNavigationCount('quotes-count', quotes ? quotes.length : '0');\n        updateNavigationCount('orders-count', orders ? orders.length : '0');\n        updateNavigationCount('products-count', products ? products.length : '0');\n        updateNavigationCount('invoices-count', invoices ? invoices.length : '0');\n        \n    } catch (error) {\n        console.error('Error loading navigation counts:', error);\n    }\n}\n\nasync function loadCategories() {\n    try {\n        allCategories = await apiCall('/api/products/categories/') || [];\n        updateCategorySelects();\n    } catch (error) {\n        console.error('Error loading categories:', error);\n        allCategories = [];\n    }\n}\n\nasync function loadCustomers() {\n    try {\n        allCustomers = await apiCall('/api/customers/') || [];\n        updateCustomerTable();\n        updateCustomerSelects();\n    } catch (error) {\n        console.error('Error loading customers:', error);\n        allCustomers = [];\n    }\n}\n\nasync function loadProducts() {\n    try {\n        allProducts = await apiCall('/api/products/') || [];\n        updateProductTable();\n    } catch (error) {\n        console.error('Error loading products:', error);\n        allProducts = [];\n    }\n}\n\nasync function loadQuotes() {\n    try {\n        const quotes = await apiCall('/api/quotes/') || [];\n        updateQuoteTable(quotes);\n    } catch (error) {\n        console.error('Error loading quotes:', error);\n    }\n}\n\n// ===== PRODUCT FUNCTIONS =====\nfunction openAddProductModal() {\n    const modal = new bootstrap.Modal(document.getElementById('addProductModal'));\n    // Reset form\n    document.getElementById('addProductForm').reset();\n    // Set default values\n    document.getElementById('productIsActive').checked = true;\n    document.getElementById('productIsTrackable').checked = true;\n    modal.show();\n}\n\nfunction openEditProductModal(productId) {\n    const product = allProducts.find(p => p.id === productId);\n    if (!product) {\n        showNotification('Producto no encontrado', 'error');\n        return;\n    }\n    \n    // Fill form with product data\n    document.getElementById('editProductId').value = product.id;\n    document.getElementById('editProductName').value = product.name;\n    document.getElementById('editProductDescription').value = product.description || '';\n    document.getElementById('editProductCategory').value = product.category_id || '';\n    document.getElementById('editProductUnit').value = product.unit_of_measure;\n    document.getElementById('editProductCurrency').value = product.currency;\n    document.getElementById('editProductCostPrice').value = product.cost_price;\n    document.getElementById('editProductSellingPrice').value = product.selling_price;\n    document.getElementById('editProductMinStock').value = product.min_stock_level;\n    document.getElementById('editProductMaxStock').value = product.max_stock_level;\n    document.getElementById('editProductWeight').value = product.weight || '';\n    document.getElementById('editProductBarcode').value = product.barcode || '';\n    document.getElementById('editProductExpiryDate').value = product.expiry_date || '';\n    document.getElementById('editProductImageUrl').value = product.image_url || '';\n    document.getElementById('editProductIsActive').checked = product.is_active;\n    document.getElementById('editProductIsTrackable').checked = product.is_trackable;\n    \n    const modal = new bootstrap.Modal(document.getElementById('editProductModal'));\n    modal.show();\n}\n\nasync function handleAddProduct(e) {\n    e.preventDefault();\n    \n    const form = e.target;\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const originalText = submitBtn.innerHTML;\n    \n    // Show loading state\n    submitBtn.innerHTML = '<div class=\"spinner\"></div> Guardando...';\n    submitBtn.disabled = true;\n    \n    try {\n        const formData = new FormData(form);\n        const productData = {\n            name: formData.get('name'),\n            description: formData.get('description') || null,\n            category_id: formData.get('category_id') ? parseInt(formData.get('category_id')) : null,\n            unit_of_measure: formData.get('unit_of_measure'),\n            cost_price: parseFloat(formData.get('cost_price')) || 0,\n            selling_price: parseFloat(formData.get('selling_price')),\n            min_stock_level: parseInt(formData.get('min_stock_level')) || 0,\n            max_stock_level: parseInt(formData.get('max_stock_level')) || 0,\n            is_active: formData.get('is_active') === 'on',\n            is_trackable: formData.get('is_trackable') === 'on',\n            image_url: formData.get('image_url') || null,\n            barcode: formData.get('barcode') || null,\n            weight: formData.get('weight') ? parseFloat(formData.get('weight')) : null,\n            expiry_date: formData.get('expiry_date') || null,\n            currency: formData.get('currency')\n        };\n        \n        const newProduct = await apiCall('/api/products/', {\n            method: 'POST',\n            body: JSON.stringify(productData)\n        });\n        \n        // Close modal and reload data\n        bootstrap.Modal.getInstance(document.getElementById('addProductModal')).hide();\n        await loadProducts();\n        await loadDashboardMetrics();\n        \n        showNotification('Producto agregado exitosamente', 'success');\n        \n    } catch (error) {\n        console.error('Error creating product:', error);\n        showNotification('Error al crear producto: ' + error.message, 'error');\n    } finally {\n        submitBtn.innerHTML = originalText;\n        submitBtn.disabled = false;\n    }\n}\n\nasync function handleEditProduct(e) {\n    e.preventDefault();\n    \n    const form = e.target;\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const originalText = submitBtn.innerHTML;\n    \n    const productId = document.getElementById('editProductId').value;\n    \n    // Show loading state\n    submitBtn.innerHTML = '<div class=\"spinner\"></div> Actualizando...';\n    submitBtn.disabled = true;\n    \n    try {\n        const formData = new FormData(form);\n        const productData = {\n            name: formData.get('name'),\n            description: formData.get('description') || null,\n            category_id: formData.get('category_id') ? parseInt(formData.get('category_id')) : null,\n            unit_of_measure: formData.get('unit_of_measure'),\n            cost_price: parseFloat(formData.get('cost_price')) || 0,\n            selling_price: parseFloat(formData.get('selling_price')),\n            min_stock_level: parseInt(formData.get('min_stock_level')) || 0,\n            max_stock_level: parseInt(formData.get('max_stock_level')) || 0,\n            is_active: formData.get('is_active') === 'on',\n            is_trackable: formData.get('is_trackable') === 'on',\n            image_url: formData.get('image_url') || null,\n            barcode: formData.get('barcode') || null,\n            weight: formData.get('weight') ? parseFloat(formData.get('weight')) : null,\n            expiry_date: formData.get('expiry_date') || null,\n            currency: formData.get('currency')\n        };\n        \n        await apiCall(`/api/products/${productId}`, {\n            method: 'PUT',\n            body: JSON.stringify(productData)\n        });\n        \n        // Close modal and reload data\n        bootstrap.Modal.getInstance(document.getElementById('editProductModal')).hide();\n        await loadProducts();\n        \n        showNotification('Producto actualizado exitosamente', 'success');\n        \n    } catch (error) {\n        console.error('Error updating product:', error);\n        showNotification('Error al actualizar producto: ' + error.message, 'error');\n    } finally {\n        submitBtn.innerHTML = originalText;\n        submitBtn.disabled = false;\n    }\n}\n\nfunction updateProductTable() {\n    const tbody = document.getElementById('products-table-body');\n    if (!tbody) return;\n    \n    if (allProducts.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"7\" class=\"text-center\">No hay productos registrados</td></tr>';\n        return;\n    }\n    \n    tbody.innerHTML = allProducts.map(product => `\n        <tr>\n            <td><strong>${product.product_code}</strong></td>\n            <td>${product.name}</td>\n            <td>${product.category_name || '-'}</td>\n            <td>${formatCurrency(product.selling_price, product.currency)}</td>\n            <td>\n                <span class=\"badge ${product.current_stock <= 0 ? 'bg-danger' : 'bg-success'}\">\n                    ${product.current_stock}\n                </span>\n            </td>\n            <td>\n                <span class=\"status-badge ${product.is_active ? 'status-confirmed' : 'status-draft'}\">\n                    ${product.is_active ? 'Activo' : 'Inactivo'}\n                </span>\n            </td>\n            <td>\n                <button class=\"btn btn-sm btn-outline-primary\" onclick=\"openEditProductModal(${product.id})\">\n                    <i class=\"fas fa-edit\"></i>\n                </button>\n            </td>\n        </tr>\n    `).join('');\n}\n\n// ===== CUSTOMER FUNCTIONS =====\nfunction openAddCustomerModal() {\n    const modal = new bootstrap.Modal(document.getElementById('addCustomerModal'));\n    // Reset form\n    document.getElementById('addCustomerForm').reset();\n    // Set default values\n    document.getElementById('customerIsActive').checked = true;\n    document.getElementById('customerCountry').value = 'Paraguay';\n    document.getElementById('customerPaymentTerms').value = 30;\n    modal.show();\n}\n\nasync function handleAddCustomer(e) {\n    e.preventDefault();\n    \n    const form = e.target;\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const originalText = submitBtn.innerHTML;\n    \n    // Show loading state\n    submitBtn.innerHTML = '<div class=\"spinner\"></div> Guardando...';\n    submitBtn.disabled = true;\n    \n    try {\n        const formData = new FormData(form);\n        const customerData = {\n            company_name: formData.get('company_name'),\n            contact_name: formData.get('contact_name') || null,\n            email: formData.get('email') || null,\n            phone: formData.get('phone') || null,\n            address: formData.get('address') || null,\n            city: formData.get('city') || null,\n            state: formData.get('state') || null,\n            postal_code: formData.get('postal_code') || null,\n            country: formData.get('country'),\n            tax_id: formData.get('tax_id') || null,\n            credit_limit: parseFloat(formData.get('credit_limit')) || 0,\n            payment_terms: parseInt(formData.get('payment_terms')) || 30,\n            is_active: formData.get('is_active') === 'on',\n            notes: formData.get('notes') || null\n        };\n        \n        const newCustomer = await apiCall('/api/customers/', {\n            method: 'POST',\n            body: JSON.stringify(customerData)\n        });\n        \n        // Close modal and reload data\n        bootstrap.Modal.getInstance(document.getElementById('addCustomerModal')).hide();\n        await loadCustomers();\n        await loadDashboardMetrics();\n        \n        showNotification('Cliente agregado exitosamente', 'success');\n        \n    } catch (error) {\n        console.error('Error creating customer:', error);\n        showNotification('Error al crear cliente: ' + error.message, 'error');\n    } finally {\n        submitBtn.innerHTML = originalText;\n        submitBtn.disabled = false;\n    }\n}\n\nfunction updateCustomerTable() {\n    const tbody = document.getElementById('customers-table-body');\n    if (!tbody) return;\n    \n    if (allCustomers.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"8\" class=\"text-center\">No hay clientes registrados</td></tr>';\n        return;\n    }\n    \n    tbody.innerHTML = allCustomers.map(customer => `\n        <tr>\n            <td><strong>${customer.customer_code}</strong></td>\n            <td>${customer.company_name}</td>\n            <td>${customer.contact_name || '-'}</td>\n            <td>${customer.email || '-'}</td>\n            <td>${customer.phone || '-'}</td>\n            <td>${customer.city || '-'}</td>\n            <td>\n                <span class=\"status-badge ${customer.is_active ? 'status-confirmed' : 'status-draft'}\">\n                    ${customer.is_active ? 'Activo' : 'Inactivo'}\n                </span>\n            </td>\n            <td>\n                <button class=\"btn btn-sm btn-outline-primary\" onclick=\"openEditCustomerModal(${customer.id})\">\n                    <i class=\"fas fa-edit\"></i>\n                </button>\n            </td>\n        </tr>\n    `).join('');\n}\n\n// ===== QUOTE FUNCTIONS =====\nfunction openAddQuoteModal() {\n    const modal = new bootstrap.Modal(document.getElementById('addQuoteModal'));\n    // Reset form\n    document.getElementById('addQuoteForm').reset();\n    document.getElementById('quoteItemsBody').innerHTML = '';\n    \n    // Set default valid until date (30 days from now)\n    const validUntil = new Date();\n    validUntil.setDate(validUntil.getDate() + 30);\n    document.getElementById('quoteValidUntil').value = validUntil.toISOString().split('T')[0];\n    \n    updateQuoteTotal();\n    modal.show();\n}\n\nfunction addQuoteItem() {\n    const tbody = document.getElementById('quoteItemsBody');\n    const rowCount = tbody.children.length;\n    \n    const row = document.createElement('tr');\n    row.innerHTML = `\n        <td>\n            <select class=\"form-select form-select-sm\" name=\"product_id_${rowCount}\" onchange=\"updateItemPrice(this, ${rowCount})\">\n                <option value=\"\">Seleccionar producto...</option>\n                ${allProducts.map(product => \n                    `<option value=\"${product.id}\" data-price=\"${product.selling_price}\" data-currency=\"${product.currency}\">\n                        ${product.name} - ${formatCurrency(product.selling_price, product.currency)}\n                    </option>`\n                ).join('')}\n            </select>\n        </td>\n        <td>\n            <input type=\"number\" class=\"form-control form-control-sm\" name=\"quantity_${rowCount}\" \n                   min=\"1\" value=\"1\" onchange=\"updateItemTotal(${rowCount})\">\n        </td>\n        <td>\n            <input type=\"number\" class=\"form-control form-control-sm\" name=\"unit_price_${rowCount}\" \n                   min=\"0\" step=\"0.01\" onchange=\"updateItemTotal(${rowCount})\">\n        </td>\n        <td>\n            <input type=\"number\" class=\"form-control form-control-sm\" name=\"discount_${rowCount}\" \n                   min=\"0\" max=\"100\" value=\"0\" onchange=\"updateItemTotal(${rowCount})\">\n        </td>\n        <td>\n            <span id=\"itemTotal_${rowCount}\">0</span>\n        </td>\n        <td>\n            <button type=\"button\" class=\"btn btn-sm btn-outline-danger\" onclick=\"removeQuoteItem(this)\">\n                <i class=\"fas fa-trash\"></i>\n            </button>\n        </td>\n    `;\n    \n    tbody.appendChild(row);\n}\n\nfunction removeQuoteItem(button) {\n    button.closest('tr').remove();\n    updateQuoteTotal();\n}\n\nfunction updateItemPrice(select, rowIndex) {\n    const option = select.options[select.selectedIndex];\n    if (option.value) {\n        const price = option.dataset.price;\n        document.querySelector(`input[name=\"unit_price_${rowIndex}\"]`).value = price;\n        updateItemTotal(rowIndex);\n    }\n}\n\nfunction updateItemTotal(rowIndex) {\n    const quantity = parseFloat(document.querySelector(`input[name=\"quantity_${rowIndex}\"]`).value) || 0;\n    const unitPrice = parseFloat(document.querySelector(`input[name=\"unit_price_${rowIndex}\"]`).value) || 0;\n    const discount = parseFloat(document.querySelector(`input[name=\"discount_${rowIndex}\"]`).value) || 0;\n    \n    const subtotal = quantity * unitPrice;\n    const discountAmount = subtotal * (discount / 100);\n    const total = subtotal - discountAmount;\n    \n    document.getElementById(`itemTotal_${rowIndex}`).textContent = formatNumber(total);\n    updateQuoteTotal();\n}\n\nfunction updateQuoteTotal() {\n    const tbody = document.getElementById('quoteItemsBody');\n    let subtotal = 0;\n    \n    for (let i = 0; i < tbody.children.length; i++) {\n        const itemTotalEl = document.getElementById(`itemTotal_${i}`);\n        if (itemTotalEl) {\n            subtotal += parseFloat(itemTotalEl.textContent.replace(/[^\\d.-]/g, '')) || 0;\n        }\n    }\n    \n    const tax = subtotal * 0.10; // 10% IVA\n    const total = subtotal + tax;\n    \n    document.getElementById('quoteSubtotal').textContent = formatNumber(subtotal);\n    document.getElementById('quoteTax').textContent = formatNumber(tax);\n    document.getElementById('quoteTotal').textContent = formatNumber(total);\n}\n\nasync function handleAddQuote(e) {\n    e.preventDefault();\n    \n    const form = e.target;\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const originalText = submitBtn.innerHTML;\n    \n    // Show loading state\n    submitBtn.innerHTML = '<div class=\"spinner\"></div> Creando...';\n    submitBtn.disabled = true;\n    \n    try {\n        const formData = new FormData(form);\n        const tbody = document.getElementById('quoteItemsBody');\n        \n        // Collect quote items\n        const items = [];\n        for (let i = 0; i < tbody.children.length; i++) {\n            const productId = document.querySelector(`select[name=\"product_id_${i}\"]`)?.value;\n            const quantity = document.querySelector(`input[name=\"quantity_${i}\"]`)?.value;\n            const unitPrice = document.querySelector(`input[name=\"unit_price_${i}\"]`)?.value;\n            const discount = document.querySelector(`input[name=\"discount_${i}\"]`)?.value;\n            \n            if (productId && quantity && unitPrice) {\n                items.push({\n                    product_id: parseInt(productId),\n                    quantity: parseInt(quantity),\n                    unit_price: parseFloat(unitPrice),\n                    discount_percentage: parseFloat(discount) || 0\n                });\n            }\n        }\n        \n        if (items.length === 0) {\n            showNotification('Debe agregar al menos un producto a la cotizaci√≥n', 'warning');\n            return;\n        }\n        \n        const quoteData = {\n            customer_id: parseInt(formData.get('customer_id')),\n            currency: formData.get('currency'),\n            valid_until: formData.get('valid_until'),\n            notes: formData.get('notes') || null,\n            items: items\n        };\n        \n        const newQuote = await apiCall('/api/quotes/', {\n            method: 'POST',\n            body: JSON.stringify(quoteData)\n        });\n        \n        // Close modal and reload data\n        bootstrap.Modal.getInstance(document.getElementById('addQuoteModal')).hide();\n        await loadQuotes();\n        await loadDashboardMetrics();\n        \n        showNotification('Cotizaci√≥n creada exitosamente', 'success');\n        \n    } catch (error) {\n        console.error('Error creating quote:', error);\n        showNotification('Error al crear cotizaci√≥n: ' + error.message, 'error');\n    } finally {\n        submitBtn.innerHTML = originalText;\n        submitBtn.disabled = false;\n    }\n}\n\nfunction updateQuoteTable(quotes) {\n    const tbody = document.getElementById('quotes-table-body');\n    if (!tbody) return;\n    \n    if (!quotes || quotes.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center\">No hay cotizaciones registradas</td></tr>';\n        return;\n    }\n    \n    tbody.innerHTML = quotes.map(quote => `\n        <tr>\n            <td><strong>${quote.quote_number}</strong></td>\n            <td>${quote.customer_name || 'Cliente'}</td>\n            <td>${formatDate(quote.created_at)}</td>\n            <td>${formatCurrency(quote.total_amount, quote.currency)}</td>\n            <td>\n                <span class=\"status-badge status-${quote.status.toLowerCase()}\">\n                    ${quote.status}\n                </span>\n            </td>\n            <td>\n                <button class=\"btn btn-sm btn-outline-primary\" onclick=\"viewQuote(${quote.id})\">\n                    <i class=\"fas fa-eye\"></i>\n                </button>\n            </td>\n        </tr>\n    `).join('');\n}\n\n// ===== UTILITY FUNCTIONS =====\nfunction updateCategorySelects() {\n    const selects = ['productCategory', 'editProductCategory'];\n    \n    selects.forEach(selectId => {\n        const select = document.getElementById(selectId);\n        if (select) {\n            // Keep the first option (Seleccionar categor√≠a...)\n            const firstOption = select.firstElementChild;\n            select.innerHTML = firstOption.outerHTML;\n            \n            allCategories.forEach(category => {\n                const option = document.createElement('option');\n                option.value = category.id;\n                option.textContent = category.name;\n                select.appendChild(option);\n            });\n        }\n    });\n}\n\nfunction updateCustomerSelects() {\n    const selects = ['quoteCustomer'];\n    \n    selects.forEach(selectId => {\n        const select = document.getElementById(selectId);\n        if (select) {\n            // Keep the first option\n            const firstOption = select.firstElementChild;\n            select.innerHTML = firstOption.outerHTML;\n            \n            allCustomers.forEach(customer => {\n                const option = document.createElement('option');\n                option.value = customer.id;\n                option.textContent = customer.company_name;\n                select.appendChild(option);\n            });\n        }\n    });\n}\n\nfunction updateDashboardMetric(id, value) {\n    const element = document.getElementById(id);\n    if (element) {\n        element.textContent = value;\n    }\n}\n\nfunction updateNavigationCount(id, value) {\n    const element = document.getElementById(id);\n    if (element) {\n        element.textContent = value;\n    }\n}\n\nfunction formatCurrency(amount, currency = 'PYG') {\n    const numAmount = parseFloat(amount) || 0;\n    \n    if (currency === 'USD') {\n        return new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD'\n        }).format(numAmount);\n    } else {\n        return new Intl.NumberFormat('es-PY', {\n            style: 'currency',\n            currency: 'PYG',\n            minimumFractionDigits: 0\n        }).format(numAmount);\n    }\n}\n\nfunction formatNumber(amount) {\n    return new Intl.NumberFormat('es-PY').format(parseFloat(amount) || 0);\n}\n\nfunction formatDate(dateString) {\n    return new Date(dateString).toLocaleDateString('es-PY');\n}\n\nfunction showLoadingState() {\n    // Could implement a global loading overlay here\n}\n\nfunction hideLoadingState() {\n    // Could hide the global loading overlay here\n}\n\nfunction showNotification(message, type = 'info') {\n    // Create or update a notification system\n    console.log(`${type.toUpperCase()}: ${message}`);\n    \n    // For now, use simple alerts - could be enhanced with toast notifications\n    if (type === 'error') {\n        alert(`Error: ${message}`);\n    } else if (type === 'success') {\n        alert(`√âxito: ${message}`);\n    } else if (type === 'warning') {\n        alert(`Advertencia: ${message}`);\n    } else {\n        alert(message);\n    }\n}\n\n// ===== USER MANAGEMENT FUNCTIONS =====\n\n// Show/Hide User Modal\nfunction showCreateUserModal() {\n    const modal = document.getElementById('create-user-modal');\n    if (modal) {\n        modal.classList.remove('d-none');\n        document.body.style.overflow = 'hidden';\n    }\n}\n\nfunction hideCreateUserModal() {\n    const modal = document.getElementById('create-user-modal');\n    if (modal) {\n        modal.classList.add('d-none');\n        document.body.style.overflow = 'auto';\n        // Reset form\n        const form = document.getElementById('create-user-form');\n        if (form) form.reset();\n    }\n}\n\n// Update user limitations based on role\nfunction updateUserLimitations() {\n    const roleSelect = document.querySelector('[name=\"role\"]');\n    const maxCustomers = document.querySelector('[name=\"max_customers\"]');\n    const maxQuotes = document.querySelector('[name=\"max_quotes\"]');\n    const maxOrders = document.querySelector('[name=\"max_orders\"]');\n    const maxInvoices = document.querySelector('[name=\"max_invoices\"]');\n    \n    // Permission checkboxes\n    const canManageInventory = document.querySelector('[name=\"can_manage_inventory\"]');\n    const canViewReports = document.querySelector('[name=\"can_view_reports\"]');\n    const canManageTourismRegime = document.querySelector('[name=\"can_manage_tourism_regime\"]');\n    const canManageDeposits = document.querySelector('[name=\"can_manage_deposits\"]');\n    const canExportData = document.querySelector('[name=\"can_export_data\"]');\n    \n    if (!roleSelect || !maxCustomers) return;\n    \n    const role = roleSelect.value;\n    \n    // Preset limitations based on role\n    switch(role) {\n        case 'admin':\n            maxCustomers.value = 999;\n            maxQuotes.value = 999;\n            maxOrders.value = 999;\n            maxInvoices.value = 999;\n            // Admin gets all permissions\n            canManageInventory.checked = true;\n            canViewReports.checked = true;\n            canManageTourismRegime.checked = true;\n            canManageDeposits.checked = true;\n            canExportData.checked = true;\n            break;\n            \n        case 'manager':\n            maxCustomers.value = 100;\n            maxQuotes.value = 100;\n            maxOrders.value = 80;\n            maxInvoices.value = 50;\n            // Manager gets most permissions\n            canManageInventory.checked = true;\n            canViewReports.checked = true;\n            canManageTourismRegime.checked = true;\n            canManageDeposits.checked = true;\n            canExportData.checked = true;\n            break;\n            \n        case 'accountant':\n            maxCustomers.value = 50;\n            maxQuotes.value = 30;\n            maxOrders.value = 30;\n            maxInvoices.value = 40;\n            // Accountant gets financial permissions\n            canManageInventory.checked = false;\n            canViewReports.checked = true;\n            canManageTourismRegime.checked = true; // For tax regime\n            canManageDeposits.checked = true;\n            canExportData.checked = true;\n            break;\n            \n        case 'seller':\n            maxCustomers.value = 20;\n            maxQuotes.value = 30;\n            maxOrders.value = 25;\n            maxInvoices.value = 15;\n            // Seller gets basic permissions\n            canManageInventory.checked = false;\n            canViewReports.checked = true;\n            canManageTourismRegime.checked = false;\n            canManageDeposits.checked = false;\n            canExportData.checked = false;\n            break;\n            \n        case 'viewer':\n            maxCustomers.value = 0;\n            maxQuotes.value = 0;\n            maxOrders.value = 0;\n            maxInvoices.value = 0;\n            // Viewer gets minimal permissions\n            canManageInventory.checked = false;\n            canViewReports.checked = true;\n            canManageTourismRegime.checked = false;\n            canManageDeposits.checked = false;\n            canExportData.checked = false;\n            break;\n            \n        default:\n            // Default seller settings\n            maxCustomers.value = 10;\n            maxQuotes.value = 20;\n            maxOrders.value = 15;\n            maxInvoices.value = 10;\n            canManageInventory.checked = false;\n            canViewReports.checked = true;\n            canManageTourismRegime.checked = false;\n            canManageDeposits.checked = false;\n            canExportData.checked = false;\n    }\n}\n\n// Load users data\nasync function loadUsersData() {\n    try {\n        const response = await apiCall('/users/');\n        if (response) {\n            displayUsersTable(response);\n            updateUserMetrics(response);\n        }\n    } catch (error) {\n        console.error('Error loading users:', error);\n        showNotification('Error al cargar usuarios: ' + error.message, 'error');\n    }\n}\n\n// Display users in table\nfunction displayUsersTable(users) {\n    const tbody = document.getElementById('users-table-body');\n    if (!tbody) return;\n    \n    if (!users || users.length === 0) {\n        tbody.innerHTML = `\n            <tr>\n                <td colspan=\"8\" class=\"text-center\">\n                    <i class=\"fas fa-users\"></i> No hay usuarios registrados\n                </td>\n            </tr>\n        `;\n        return;\n    }\n    \n    tbody.innerHTML = users.map(user => `\n        <tr>\n            <td>\n                <div style=\"display: flex; align-items: center; gap: 0.5rem;\">\n                    <div class=\"user-avatar\" style=\"width: 32px; height: 32px; font-size: 0.8rem;\">\n                        ${user.full_name.charAt(0).toUpperCase()}\n                    </div>\n                    <strong>${user.username}</strong>\n                </div>\n            </td>\n            <td>${user.full_name}</td>\n            <td>${user.email}</td>\n            <td>\n                <span class=\"badge role-${user.role}\">${getRoleDisplayName(user.role)}</span>\n            </td>\n            <td>${user.department || '-'}</td>\n            <td>\n                <span class=\"badge ${user.is_active ? 'positive' : 'negative'}\">\n                    ${user.is_active ? 'Activo' : 'Inactivo'}\n                </span>\n            </td>\n            <td>\n                <small>\n                    C: ${user.max_customers} | Q: ${user.max_quotes}<br>\n                    O: ${user.max_orders} | F: ${user.max_invoices}\n                </small>\n            </td>\n            <td>\n                <div style=\"display: flex; gap: 0.25rem;\">\n                    <button class=\"btn-secondary\" style=\"padding: 0.25rem 0.5rem; font-size: 0.8rem;\" \n                            onclick=\"editUser(${user.id})\">\n                        <i class=\"fas fa-edit\"></i>\n                    </button>\n                    <button class=\"btn-logout\" style=\"padding: 0.25rem 0.5rem; font-size: 0.8rem;\" \n                            onclick=\"toggleUserStatus(${user.id}, ${user.is_active})\">\n                        <i class=\"fas fa-${user.is_active ? 'ban' : 'check'}\"></i>\n                    </button>\n                </div>\n            </td>\n        </tr>\n    `).join('');\n}\n\n// Get role display name in Spanish\nfunction getRoleDisplayName(role) {\n    const roleNames = {\n        'admin': 'Administrador',\n        'manager': 'Gerente', \n        'seller': 'Vendedor',\n        'viewer': 'Visualizador',\n        'accountant': 'Contador'\n    };\n    return roleNames[role] || role;\n}\n\n// Update user metrics\nfunction updateUserMetrics(users) {\n    const totalUsers = users ? users.length : 0;\n    const activeUsers = users ? users.filter(user => user.is_active).length : 0;\n    \n    // Update metric cards\n    const totalUsersMetric = document.getElementById('total-users-metric');\n    const activeUsersMetric = document.getElementById('active-users-metric');\n    \n    if (totalUsersMetric) totalUsersMetric.textContent = totalUsers;\n    if (activeUsersMetric) activeUsersMetric.textContent = activeUsers;\n}\n\n// Create new user\nasync function createUser(event) {\n    event.preventDefault();\n    \n    const form = event.target;\n    const formData = new FormData(form);\n    \n    // Convert form data to object\n    const userData = {\n        username: formData.get('username'),\n        full_name: formData.get('full_name'),\n        email: formData.get('email'),\n        password: formData.get('password'),\n        role: formData.get('role'),\n        department: formData.get('department'),\n        max_customers: parseInt(formData.get('max_customers')) || 10,\n        max_quotes: parseInt(formData.get('max_quotes')) || 20,\n        max_orders: parseInt(formData.get('max_orders')) || 15,\n        max_invoices: parseInt(formData.get('max_invoices')) || 10,\n        can_manage_inventory: formData.has('can_manage_inventory'),\n        can_view_reports: formData.has('can_view_reports'),\n        can_manage_tourism_regime: formData.has('can_manage_tourism_regime'),\n        can_manage_deposits: formData.has('can_manage_deposits'),\n        can_export_data: formData.has('can_export_data'),\n        notes: formData.get('notes')\n    };\n    \n    try {\n        const submitButton = form.querySelector('button[type=\"submit\"]');\n        submitButton.disabled = true;\n        submitButton.innerHTML = '<div class=\"loading-spinner\"></div> Creando...';\n        \n        const response = await apiCall('/users/', {\n            method: 'POST',\n            body: JSON.stringify(userData)\n        });\n        \n        if (response) {\n            showNotification('Usuario creado exitosamente', 'success');\n            hideCreateUserModal();\n            loadUsersData(); // Refresh users table\n        }\n    } catch (error) {\n        console.error('Error creating user:', error);\n        showNotification('Error al crear usuario: ' + error.message, 'error');\n    } finally {\n        const submitButton = form.querySelector('button[type=\"submit\"]');\n        submitButton.disabled = false;\n        submitButton.innerHTML = '<i class=\"fas fa-save\"></i> Crear Usuario';\n    }\n}\n\n// Edit user (placeholder)\nfunction editUser(userId) {\n    showNotification('Funcionalidad de edici√≥n de usuario estar√° disponible pronto', 'info');\n}\n\n// Toggle user status\nasync function toggleUserStatus(userId, currentStatus) {\n    const action = currentStatus ? 'desactivar' : 'activar';\n    if (!confirm(`¬øEst√° seguro que desea ${action} este usuario?`)) {\n        return;\n    }\n    \n    try {\n        const response = await apiCall(`/users/${userId}`, {\n            method: 'PUT',\n            body: JSON.stringify({ is_active: !currentStatus })\n        });\n        \n        if (response) {\n            showNotification(`Usuario ${action}do exitosamente`, 'success');\n            loadUsersData(); // Refresh users table\n        }\n    } catch (error) {\n        console.error('Error updating user status:', error);\n        showNotification('Error al actualizar usuario: ' + error.message, 'error');\n    }\n}\n\n// Make functions globally available\nwindow.openAddProductModal = openAddProductModal;\nwindow.openEditProductModal = openEditProductModal;\nwindow.openAddCustomerModal = openAddCustomerModal;\nwindow.openAddQuoteModal = openAddQuoteModal;\nwindow.addQuoteItem = addQuoteItem;\nwindow.removeQuoteItem = removeQuoteItem;\nwindow.updateItemPrice = updateItemPrice;\nwindow.updateItemTotal = updateItemTotal;\n\n// User management functions\nwindow.showCreateUserModal = showCreateUserModal;\nwindow.hideCreateUserModal = hideCreateUserModal;\nwindow.updateUserLimitations = updateUserLimitations;\nwindow.loadUsersData = loadUsersData;\nwindow.createUser = createUser;\nwindow.editUser = editUser;\nwindow.toggleUserStatus = toggleUserStatus;","size_bytes":45342},"app/api/invoices.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, Query\nfrom fastapi.responses import StreamingResponse\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nfrom datetime import date\nimport io\n\nfrom app.core.database import get_database\nfrom app.core.dependencies import get_current_active_user, check_user_limits\nfrom app.models.user import User\nfrom app.schemas.invoice import (\n    Invoice, InvoiceList, InvoiceWithDetails, InvoiceCreate, InvoiceUpdate,\n    InvoiceFromOrder, InvoiceSummary, PaymentCreate, Payment,\n    InvoiceStatus, parse_invoice_status\n)\nfrom app.crud.invoice import invoice_crud\nfrom app.utils.paraguay_fiscal import ParaguayFiscalValidator\nfrom app.crud.company import company_settings_crud\n\nrouter = APIRouter(prefix=\"/invoices\", tags=[\"invoices\"])\n\n@router.post(\"/\", response_model=Invoice)\nasync def create_invoice(\n    invoice: InvoiceCreate,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database),\n    _: User = Depends(check_user_limits('invoices'))\n):\n    \"\"\"Crear nueva factura con validaciones fiscales paraguayas\"\"\"\n    try:\n        # Validar timbrado antes de crear factura\n        company_settings = company_settings_crud.get_settings(db)\n        if company_settings:\n            # Asegurar que obtenemos los valores actuales, no objetos Column\n            timbrado_val = getattr(company_settings, 'timbrado', None)\n            timbrado_str = str(timbrado_val) if timbrado_val is not None else \"\"\n            fecha_vencimiento_val = getattr(company_settings, 'timbrado_fecha_vencimiento', None)\n            \n            timbrado_validation = ParaguayFiscalValidator.validate_timbrado(\n                timbrado_str, \n                fecha_vencimiento_val\n            )\n            \n            if not timbrado_validation[\"valid\"]:\n                raise HTTPException(\n                    status_code=400, \n                    detail=f\"Error de timbrado: {timbrado_validation['error']}\"\n                )\n            \n            # Advertir si el timbrado est√° pr√≥ximo a vencer\n            if timbrado_validation.get(\"warning\"):\n                # Podr√≠as loggear esta advertencia\n                pass\n        \n        user_id = getattr(current_user, 'id', 0)\n        return invoice_crud.create_invoice(db=db, invoice=invoice, created_by_id=user_id)\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=\"Error interno del servidor\")\n\n@router.post(\"/from-order\", response_model=Invoice)\nasync def create_invoice_from_order(\n    invoice_data: InvoiceFromOrder,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database),\n    _: User = Depends(check_user_limits('invoices'))\n):\n    \"\"\"Crear factura desde orden de venta con validaciones fiscales paraguayas\"\"\"\n    try:\n        # Validar timbrado antes de crear factura\n        company_settings = company_settings_crud.get_settings(db)\n        if company_settings:\n            # Asegurar que obtenemos los valores actuales, no objetos Column\n            timbrado_val = getattr(company_settings, 'timbrado', None)\n            timbrado_str = str(timbrado_val) if timbrado_val is not None else \"\"\n            fecha_vencimiento_val = getattr(company_settings, 'timbrado_fecha_vencimiento', None)\n            \n            timbrado_validation = ParaguayFiscalValidator.validate_timbrado(\n                timbrado_str, \n                fecha_vencimiento_val\n            )\n            \n            if not timbrado_validation[\"valid\"]:\n                raise HTTPException(\n                    status_code=400, \n                    detail=f\"Error de timbrado: {timbrado_validation['error']}\"\n                )\n        \n        user_id = getattr(current_user, 'id', 0)\n        return invoice_crud.create_from_sales_order(\n            db=db, \n            invoice_data=invoice_data, \n            created_by_id=user_id\n        )\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=\"Error interno del servidor\")\n\n@router.get(\"/\", response_model=List[InvoiceList])\nasync def list_invoices(\n    skip: int = Query(0, ge=0, description=\"N√∫mero de registros a saltar\"),\n    limit: int = Query(100, ge=1, le=1000, description=\"N√∫mero m√°ximo de registros a devolver\"),\n    customer_id: Optional[int] = Query(None, description=\"Filtrar por cliente\"),\n    status: Optional[str] = Query(None, description=\"Filtrar por estado\"),\n    start_date: Optional[date] = Query(None, description=\"Fecha de inicio\"),\n    end_date: Optional[date] = Query(None, description=\"Fecha de fin\"),\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Obtener lista de facturas con filtros\"\"\"\n    # Parsear estado si se proporciona\n    status_enum = None\n    if status:\n        status_enum = parse_invoice_status(status)\n    \n    invoices = invoice_crud.get_invoices(\n        db=db, \n        skip=skip, \n        limit=limit,\n        customer_id=customer_id,\n        status=status_enum,\n        start_date=start_date,\n        end_date=end_date\n    )\n    \n    # Convertir a formato de lista\n    invoice_list = []\n    for invoice in invoices:\n        customer_name = invoice.customer.company_name if invoice.customer else \"Cliente desconocido\"\n        \n        invoice_list.append({\n            \"id\": invoice.id,\n            \"invoice_number\": invoice.invoice_number,\n            \"customer_id\": invoice.customer_id,\n            \"customer_name\": customer_name,\n            \"invoice_date\": invoice.invoice_date,\n            \"due_date\": invoice.due_date,\n            \"status\": invoice.status,\n            \"total_amount\": invoice.total_amount,\n            \"balance_due\": invoice.balance_due,\n            \"created_at\": invoice.created_at\n        })\n    \n    return invoice_list\n\n@router.get(\"/{invoice_id}\", response_model=InvoiceWithDetails)\nasync def get_invoice(\n    invoice_id: int,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Obtener detalles de una factura espec√≠fica\"\"\"\n    invoice = invoice_crud.get_invoice(db=db, invoice_id=invoice_id)\n    \n    if not invoice:\n        raise HTTPException(status_code=404, detail=\"Factura no encontrada\")\n    \n    # Preparar datos completos\n    result = {\n        \"id\": invoice.id,\n        \"invoice_number\": invoice.invoice_number,\n        \"sales_order_id\": invoice.sales_order_id,\n        \"customer_id\": invoice.customer_id,\n        \"invoice_date\": invoice.invoice_date,\n        \"due_date\": invoice.due_date,\n        \"status\": invoice.status,\n        \"subtotal\": invoice.subtotal,\n        \"tax_amount\": invoice.tax_amount,\n        \"total_amount\": invoice.total_amount,\n        \"paid_amount\": invoice.paid_amount,\n        \"balance_due\": invoice.balance_due,\n        \"notes\": invoice.notes,\n        \"payment_terms\": invoice.payment_terms,\n        \"created_at\": invoice.created_at,\n        \"updated_at\": invoice.updated_at,\n        \"customer_name\": invoice.customer.company_name if invoice.customer else None,\n        \"customer_email\": invoice.customer.email if invoice.customer else None,\n        \"sales_order_number\": invoice.sales_order.order_number if invoice.sales_order else None,\n        \"lines\": [],\n        \"payments\": []\n    }\n    \n    # Agregar l√≠neas con informaci√≥n de productos\n    for line in invoice.lines:\n        line_data = {\n            \"id\": line.id,\n            \"invoice_id\": line.invoice_id,\n            \"product_id\": line.product_id,\n            \"quantity\": line.quantity,\n            \"unit_price\": line.unit_price,\n            \"discount_percent\": line.discount_percent,\n            \"line_total\": line.line_total,\n            \"description\": line.description,\n            \"product_name\": line.product.name if line.product else None,\n            \"product_code\": line.product.product_code if line.product else None\n        }\n        result[\"lines\"].append(line_data)\n    \n    # Agregar pagos\n    for payment in invoice.payments:\n        payment_data = {\n            \"id\": payment.id,\n            \"invoice_id\": payment.invoice_id,\n            \"payment_date\": payment.payment_date,\n            \"amount\": payment.amount,\n            \"payment_method\": payment.payment_method,\n            \"reference_number\": payment.reference_number,\n            \"notes\": payment.notes,\n            \"created_at\": payment.created_at\n        }\n        result[\"payments\"].append(payment_data)\n    \n    return result\n\n@router.put(\"/{invoice_id}\", response_model=Invoice)\nasync def update_invoice(\n    invoice_id: int,\n    invoice_update: InvoiceUpdate,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Actualizar factura\"\"\"\n    updated_invoice = invoice_crud.update_invoice(\n        db=db, \n        invoice_id=invoice_id, \n        invoice_update=invoice_update\n    )\n    \n    if not updated_invoice:\n        raise HTTPException(status_code=404, detail=\"Factura no encontrada\")\n    \n    return updated_invoice\n\n@router.post(\"/{invoice_id}/payments\", response_model=Payment)\nasync def add_payment(\n    invoice_id: int,\n    payment: PaymentCreate,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Agregar pago a una factura\"\"\"\n    # Verificar que el invoice_id coincida\n    if payment.invoice_id != invoice_id:\n        raise HTTPException(status_code=400, detail=\"ID de factura no coincide\")\n    \n    try:\n        return invoice_crud.add_payment(db=db, payment=payment)\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n\n@router.get(\"/{invoice_id}/pdf\")\nasync def get_invoice_pdf(\n    invoice_id: int,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Generar y descargar PDF de factura\"\"\"\n    invoice = invoice_crud.get_invoice(db=db, invoice_id=invoice_id)\n    \n    if not invoice:\n        raise HTTPException(status_code=404, detail=\"Factura no encontrada\")\n    \n    try:\n        # Importar aqu√≠ para evitar errores de importaci√≥n circular\n        from app.services.pdf_generator import pdf_generator\n        \n        # Generar PDF de factura en buffer\n        pdf_buffer = pdf_generator.generate_invoice_pdf(invoice)\n        pdf_buffer.seek(0)  # Resetear posici√≥n del buffer para lectura\n        \n        # Nombre del archivo PDF\n        filename = f\"factura_{invoice.invoice_number}.pdf\"\n        \n        # Retornar como streaming response\n        return StreamingResponse(\n            io.BytesIO(pdf_buffer.read()),\n            media_type=\"application/pdf\",\n            headers={\"Content-Disposition\": f\"attachment; filename={filename}\"}\n        )\n    \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error generando PDF de factura: {str(e)}\")\n\n@router.get(\"/summary/statistics\", response_model=InvoiceSummary)\nasync def get_invoice_summary(\n    start_date: Optional[date] = Query(None, description=\"Fecha de inicio\"),\n    end_date: Optional[date] = Query(None, description=\"Fecha de fin\"),\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Obtener resumen estad√≠stico de facturas\"\"\"\n    summary = invoice_crud.get_invoice_summary(\n        db=db, \n        start_date=start_date, \n        end_date=end_date\n    )\n    \n    return summary\n\n@router.post(\"/update-overdue\")\nasync def update_overdue_invoices(\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Actualizar facturas vencidas (tarea administrativa)\"\"\"\n    if not bool(current_user.is_superuser):\n        raise HTTPException(status_code=403, detail=\"Acceso denegado\")\n    \n    count = invoice_crud.update_overdue_invoices(db=db)\n    \n    return {\n        \"message\": f\"Se actualizaron {count} facturas vencidas\",\n        \"updated_count\": count\n    }","size_bytes":12105},"app/crud/invoice.py":{"content":"from sqlalchemy.orm import Session, joinedload\nfrom sqlalchemy import func, and_, desc, asc\nfrom typing import List, Optional\nfrom datetime import date, datetime, timedelta\nfrom decimal import Decimal\n\nfrom app.models.invoice import Invoice, InvoiceLine, Payment\nfrom app.models.customer import Customer\nfrom app.models.sales import SalesOrder, SalesOrderLine\nfrom app.models.product import Product\nfrom app.schemas.invoice import (\n    InvoiceCreate, InvoiceUpdate, InvoiceFromOrder,\n    PaymentCreate, InvoiceStatus, PaymentMethod\n)\nfrom app.utils.paraguay_fiscal import ParaguayIVACalculator, ParaguayFiscalUtils\nfrom app.crud.company import company_settings_crud\n\nclass InvoiceCRUD:\n    def __init__(self):\n        self.tax_rate = Decimal('0.16')  # 16% IVA\n\n    def generate_invoice_number(self, db: Session) -> str:\n        \"\"\"Generar n√∫mero de factura con formato paraguayo\"\"\"\n        try:\n            # Obtener configuraci√≥n de empresa para punto de expedici√≥n\n            company_settings = company_settings_crud.get_settings(db)\n            if company_settings:\n                # Obtener valores actuales, no objetos Column\n                punto_expedicion_val = getattr(company_settings, 'punto_expedicion', None) or \"001\"\n                numero_actual_val = getattr(company_settings, 'numeracion_facturas_actual', 1)\n                \n                # Formatear n√∫mero paraguayo: 001-0000001\n                invoice_number = ParaguayFiscalUtils.format_invoice_number(\n                    numero_actual_val, punto_expedicion_val\n                )\n                \n                # Actualizar contador en la configuraci√≥n\n                company_settings_crud.increment_invoice_number(db)\n                \n                return invoice_number\n            else:\n                # Fallback si no hay configuraci√≥n\n                today = date.today()\n                year = today.year\n                month = today.month\n                prefix = f\"FAC{year}{month:02d}\"\n                return f\"{prefix}0001\"\n        except Exception:\n            # Fallback en caso de error\n            today = date.today()\n            year = today.year\n            month = today.month\n            prefix = f\"FAC{year}{month:02d}\"\n            return f\"{prefix}0001\"\n\n    def create_invoice(self, db: Session, invoice: InvoiceCreate, created_by_id: int) -> Invoice:\n        \"\"\"Crear nueva factura con l√≠neas\"\"\"\n        # Generar n√∫mero de factura\n        invoice_number = self.generate_invoice_number(db)\n        \n        # Obtener configuraci√≥n de empresa para tasas de IVA\n        company_settings = company_settings_crud.get_settings(db)\n        # Obtener valores actuales, no objetos Column\n        iva_10_val = getattr(company_settings, 'iva_10_porciento', None) if company_settings else None\n        iva_5_val = getattr(company_settings, 'iva_5_porciento', None) if company_settings else None\n        iva_10_rate = Decimal(str(iva_10_val)) if iva_10_val is not None else Decimal('10.00')\n        iva_5_rate = Decimal(str(iva_5_val)) if iva_5_val is not None else Decimal('5.00')\n        \n        # Obtener informaci√≥n del cliente para verificar r√©gimen de turismo\n        customer = db.query(Customer).filter(Customer.id == invoice.customer_id).first()\n        \n        # Preparar l√≠neas para c√°lculo paraguayo\n        lines_data = []\n        for line in invoice.lines:\n            line_total = line.quantity * line.unit_price\n            if line.discount_percent > 0:\n                line_total = line_total * (1 - line.discount_percent / 100)\n            \n            lines_data.append({\n                \"line_total\": line_total,\n                \"iva_category\": getattr(line, 'iva_category', '10')\n            })\n        \n        # Calcular totales paraguayos\n        totals = ParaguayIVACalculator.calculate_iva_breakdown(\n            lines_data, iva_10_rate, iva_5_rate\n        )\n        \n        # Aplicar r√©gimen tur√≠stico si corresponde\n        tourism_regime_applied = False\n        tourism_regime_percentage = Decimal('0')\n        if customer and bool(customer.tourism_regime):  # type: ignore\n            if customer.tourism_regime_expiry and customer.tourism_regime_expiry >= date.today():  # type: ignore\n                tourism_regime_applied = True\n                tourism_regime_percentage = Decimal('100')  # 100% exenci√≥n\n                totals = ParaguayIVACalculator.apply_tourism_regime(\n                    totals, tourism_regime_percentage\n                )\n        \n        subtotal = totals['subtotal']\n        tax_amount = totals['total_iva']\n        total_amount = totals['total']\n        \n        # Obtener configuraci√≥n adicional para campos paraguayos\n        punto_expedicion_val = getattr(company_settings, 'punto_expedicion', None) if company_settings else None\n        lugar_emision_val = getattr(company_settings, 'ciudad', None) if company_settings else None\n        punto_expedicion = str(punto_expedicion_val) if punto_expedicion_val is not None else \"001\"\n        lugar_emision = str(lugar_emision_val) if lugar_emision_val is not None else \"Asunci√≥n\"\n        \n        # Crear factura con campos paraguayos\n        db_invoice = Invoice(\n            invoice_number=invoice_number,\n            sales_order_id=invoice.sales_order_id,\n            customer_id=invoice.customer_id,\n            invoice_date=invoice.invoice_date,\n            due_date=invoice.due_date,\n            status=InvoiceStatus.PENDING,\n            subtotal=subtotal,\n            tax_amount=tax_amount,\n            total_amount=total_amount,\n            paid_amount=Decimal('0'),\n            balance_due=total_amount,\n            notes=invoice.notes,\n            payment_terms=invoice.payment_terms,\n            \n            # CAMPOS FISCALES ESPEC√çFICOS PARA PARAGUAY\n            punto_expedicion=punto_expedicion,\n            condicion_venta=getattr(invoice, 'condicion_venta', 'CREDITO'),\n            lugar_emision=lugar_emision,\n            \n            # DESGLOSE DE IVA PARAGUAYO\n            subtotal_gravado_10=totals['subtotal_gravado_10'],\n            subtotal_gravado_5=totals['subtotal_gravado_5'],\n            subtotal_exento=totals['subtotal_exento'],\n            iva_10=totals['iva_10'],\n            iva_5=totals['iva_5'],\n            \n            # R√âGIMEN DE TURISMO PARAGUAY\n            tourism_regime_applied=tourism_regime_applied,\n            tourism_regime_percentage=tourism_regime_percentage,\n        )\n        \n        db.add(db_invoice)\n        db.flush()  # Para obtener el ID\n        \n        # Crear l√≠neas de factura con campos paraguayos\n        for i, line in enumerate(invoice.lines):\n            line_total = line.quantity * line.unit_price\n            if line.discount_percent > 0:\n                line_total = line_total * (1 - line.discount_percent / 100)\n            \n            # Calcular IVA por l√≠nea\n            iva_category = getattr(line, 'iva_category', '10')\n            iva_amount = Decimal('0')\n            \n            if iva_category == '10':\n                iva_amount = line_total * (iva_10_rate / Decimal('100'))\n            elif iva_category == '5':\n                iva_amount = line_total * (iva_5_rate / Decimal('100'))\n            # Para 'EXENTO', iva_amount permanece en 0\n                \n            db_line = InvoiceLine(\n                invoice_id=db_invoice.id,\n                product_id=line.product_id,\n                quantity=line.quantity,\n                unit_price=line.unit_price,\n                discount_percent=line.discount_percent,\n                line_total=line_total,\n                description=line.description,\n                \n                # CAMPOS FISCALES PARA IVA PARAGUAYO\n                iva_category=iva_category,\n                iva_amount=iva_amount\n            )\n            db.add(db_line)\n        \n        db.commit()\n        db.refresh(db_invoice)\n        return db_invoice\n\n    def create_from_sales_order(self, db: Session, invoice_data: InvoiceFromOrder, created_by_id: int) -> Invoice:\n        \"\"\"Crear factura desde orden de venta\"\"\"\n        # Obtener la orden de venta con sus l√≠neas\n        sales_order = db.query(SalesOrder).options(\n            joinedload(SalesOrder.lines)\n        ).filter(SalesOrder.id == invoice_data.sales_order_id).first()\n        \n        if not sales_order:\n            raise ValueError(\"Orden de venta no encontrada\")\n        \n        if sales_order.status not in [\"CONFIRMED\", \"SHIPPED\", \"DELIVERED\"]:\n            raise ValueError(\"Solo se pueden facturar √≥rdenes confirmadas, enviadas o entregadas\")\n        \n        # Verificar si ya existe una factura para esta orden\n        existing_invoice = db.query(Invoice).filter(\n            Invoice.sales_order_id == sales_order.id\n        ).first()\n        \n        if existing_invoice:\n            raise ValueError(f\"Ya existe una factura ({existing_invoice.invoice_number}) para esta orden\")\n        \n        # Crear l√≠neas de factura desde las l√≠neas de la orden\n        invoice_lines = []\n        for order_line in sales_order.lines:\n            invoice_lines.append({\n                'product_id': getattr(order_line, 'product_id', 0),\n                'quantity': getattr(order_line, 'quantity', 0),\n                'unit_price': getattr(order_line, 'unit_price', Decimal('0')),\n                'discount_percent': getattr(order_line, 'discount_percent', Decimal('0')),\n                'description': getattr(order_line, 'description', None)\n            })\n        \n        # Crear objeto InvoiceCreate\n        # Type conversions to handle SQLAlchemy model attributes\n        # Using getattr to safely access SQLAlchemy model properties\n        sales_order_id_val = getattr(sales_order, 'id', None)\n        customer_id_val = getattr(sales_order, 'customer_id', None)\n        \n        # Ensure proper type handling for required fields\n        if customer_id_val is None:\n            raise ValueError(\"Customer ID is required\")\n            \n        invoice_create = InvoiceCreate(\n            sales_order_id=sales_order_id_val,\n            customer_id=customer_id_val,\n            invoice_date=invoice_data.invoice_date or date.today(),\n            due_date=invoice_data.due_date or date.today(),\n            payment_terms=invoice_data.payment_terms,\n            notes=invoice_data.notes,\n            lines=invoice_lines\n        )\n        \n        return self.create_invoice(db, invoice_create, created_by_id)\n\n    def get_invoice(self, db: Session, invoice_id: int) -> Optional[Invoice]:\n        \"\"\"Obtener factura por ID con detalles\"\"\"\n        return db.query(Invoice).options(\n            joinedload(Invoice.customer),\n            joinedload(Invoice.sales_order),\n            joinedload(Invoice.lines).joinedload(InvoiceLine.product),\n            joinedload(Invoice.payments)\n        ).filter(Invoice.id == invoice_id).first()\n\n    def get_invoices(self, db: Session, skip: int = 0, limit: int = 100, \n                    customer_id: Optional[int] = None,\n                    status: Optional[InvoiceStatus] = None,\n                    start_date: Optional[date] = None,\n                    end_date: Optional[date] = None) -> List[Invoice]:\n        \"\"\"Obtener lista de facturas con filtros\"\"\"\n        query = db.query(Invoice).join(Customer)\n        \n        # Aplicar filtros\n        if customer_id:\n            query = query.filter(Invoice.customer_id == customer_id)\n        \n        if status:\n            query = query.filter(Invoice.status == status)\n        \n        if start_date:\n            query = query.filter(Invoice.invoice_date >= start_date)\n            \n        if end_date:\n            query = query.filter(Invoice.invoice_date <= end_date)\n        \n        return query.order_by(desc(Invoice.created_at)).offset(skip).limit(limit).all()\n\n    def update_invoice(self, db: Session, invoice_id: int, invoice_update: InvoiceUpdate) -> Optional[Invoice]:\n        \"\"\"Actualizar factura\"\"\"\n        db_invoice = db.query(Invoice).filter(Invoice.id == invoice_id).first()\n        \n        if not db_invoice:\n            return None\n        \n        # Actualizar campos\n        for field, value in invoice_update.dict(exclude_unset=True).items():\n            setattr(db_invoice, field, value)\n        \n        db.commit()\n        db.refresh(db_invoice)\n        return db_invoice\n\n    def add_payment(self, db: Session, payment: PaymentCreate) -> Payment:\n        \"\"\"Agregar pago a una factura\"\"\"\n        # Verificar que la factura existe\n        invoice = db.query(Invoice).filter(Invoice.id == payment.invoice_id).first()\n        if not invoice:\n            raise ValueError(\"Factura no encontrada\")\n        \n        # Crear el pago\n        db_payment = Payment(\n            invoice_id=payment.invoice_id,\n            payment_date=payment.payment_date,\n            amount=payment.amount,\n            payment_method=payment.payment_method,\n            reference_number=payment.reference_number,\n            notes=payment.notes\n        )\n        \n        db.add(db_payment)\n        \n        # Actualizar montos de la factura\n        current_paid_amount = Decimal(str(invoice.paid_amount))\n        total_amount = Decimal(str(invoice.total_amount))\n        current_status = str(invoice.status)\n        \n        new_paid_amount = current_paid_amount + payment.amount\n        new_balance_due = total_amount - new_paid_amount\n        \n        # Actualizar estado si est√° completamente pagada\n        new_status = current_status\n        if new_balance_due <= Decimal('0'):\n            new_status = InvoiceStatus.PAID.value\n        elif new_paid_amount > Decimal('0') and current_status == InvoiceStatus.PENDING.value:\n            new_status = InvoiceStatus.SENT.value\n        \n        # Actualizar factura\n        setattr(invoice, 'paid_amount', new_paid_amount)\n        setattr(invoice, 'balance_due', max(new_balance_due, Decimal('0')))\n        setattr(invoice, 'status', new_status)\n        \n        db.commit()\n        db.refresh(db_payment)\n        return db_payment\n\n    def get_invoice_summary(self, db: Session, \n                          start_date: Optional[date] = None,\n                          end_date: Optional[date] = None) -> dict:\n        \"\"\"Obtener resumen de facturas\"\"\"\n        query = db.query(Invoice)\n        \n        if start_date:\n            query = query.filter(Invoice.invoice_date >= start_date)\n        if end_date:\n            query = query.filter(Invoice.invoice_date <= end_date)\n        \n        invoices = query.all()\n        \n        total_invoices = len(invoices)\n        total_amount = sum(inv.total_amount for inv in invoices)\n        paid_amount = sum(inv.paid_amount for inv in invoices)\n        pending_amount = sum(Decimal(str(inv.balance_due)) for inv in invoices if str(inv.status) in [InvoiceStatus.PENDING.value, InvoiceStatus.SENT.value])\n        overdue_amount = sum(Decimal(str(inv.balance_due)) for inv in invoices if str(inv.status) == InvoiceStatus.OVERDUE.value)\n        \n        return {\n            \"total_invoices\": total_invoices,\n            \"total_amount\": total_amount,\n            \"paid_amount\": paid_amount,\n            \"pending_amount\": pending_amount,\n            \"overdue_amount\": overdue_amount\n        }\n\n    def update_overdue_invoices(self, db: Session) -> int:\n        \"\"\"Actualizar facturas vencidas (ejecutar diariamente)\"\"\"\n        today = date.today()\n        \n        overdue_invoices = db.query(Invoice).filter(\n            and_(\n                Invoice.due_date < today,\n                Invoice.status.in_([InvoiceStatus.PENDING, InvoiceStatus.SENT]),\n                Invoice.balance_due > 0\n            )\n        ).all()\n        \n        count = 0\n        for invoice in overdue_invoices:\n            setattr(invoice, 'status', InvoiceStatus.OVERDUE.value)\n            count += 1\n        \n        if count > 0:\n            db.commit()\n        \n        return count\n\n# Instancia global\ninvoice_crud = InvoiceCRUD()","size_bytes":15916},"app/schemas/invoice.py":{"content":"from pydantic import BaseModel, validator, Field\nfrom typing import Optional, List\nfrom decimal import Decimal\nfrom datetime import date, datetime\nfrom enum import Enum\n\nclass InvoiceStatus(str, Enum):\n    PENDING = \"PENDING\"\n    SENT = \"SENT\"\n    PAID = \"PAID\"\n    OVERDUE = \"OVERDUE\"\n    CANCELLED = \"CANCELLED\"\n\nclass PaymentMethod(str, Enum):\n    CASH = \"CASH\"\n    TRANSFER = \"TRANSFER\"\n    CHECK = \"CHECK\"\n    CARD = \"CARD\"\n\nclass CondicionVenta(str, Enum):\n    CONTADO = \"CONTADO\"\n    CREDITO = \"CREDITO\"\n\nclass IVACategory(str, Enum):\n    IVA_10 = \"10\"\n    IVA_5 = \"5\"\n    EXENTO = \"EXENTO\"\n\n# Payment schemas\nclass PaymentBase(BaseModel):\n    amount: Decimal = Field(..., ge=0, description=\"Monto del pago\")\n    payment_method: PaymentMethod\n    reference_number: Optional[str] = None\n    notes: Optional[str] = None\n\nclass PaymentCreate(PaymentBase):\n    invoice_id: int\n    payment_date: date\n\nclass Payment(PaymentBase):\n    id: int\n    invoice_id: int\n    payment_date: date\n    created_at: datetime\n    \n    class Config:\n        from_attributes = True\n\n# Invoice Line schemas\nclass InvoiceLineBase(BaseModel):\n    product_id: int\n    quantity: int = Field(..., gt=0, description=\"Cantidad debe ser mayor a 0\")\n    unit_price: Decimal = Field(..., ge=0, description=\"Precio unitario\")\n    discount_percent: Decimal = Field(Decimal('0'), ge=0, le=100, description=\"Descuento entre 0 y 100%\")\n    description: Optional[str] = None\n    \n    # CAMPOS FISCALES PARA IVA PARAGUAYO\n    iva_category: IVACategory = IVACategory.IVA_10\n\nclass InvoiceLineCreate(InvoiceLineBase):\n    pass\n\nclass InvoiceLine(InvoiceLineBase):\n    id: int\n    invoice_id: int\n    line_total: Decimal\n    \n    # CAMPOS FISCALES PARA IVA PARAGUAYO\n    iva_amount: Decimal = Decimal('0')\n    \n    # Informaci√≥n del producto para mostrar\n    product_name: Optional[str] = None\n    product_code: Optional[str] = None\n    \n    class Config:\n        from_attributes = True\n\n# Invoice schemas\nclass InvoiceBase(BaseModel):\n    customer_id: int\n    invoice_date: date\n    due_date: date\n    payment_terms: Optional[str] = \"Net 30\"\n    notes: Optional[str] = None\n    \n    # CAMPOS FISCALES ESPEC√çFICOS PARA PARAGUAY\n    condicion_venta: CondicionVenta = CondicionVenta.CREDITO\n    lugar_emision: Optional[str] = \"Asunci√≥n\"\n\nclass InvoiceCreate(InvoiceBase):\n    sales_order_id: Optional[int] = None\n    lines: List[InvoiceLineCreate] = []\n\nclass InvoiceUpdate(BaseModel):\n    status: Optional[InvoiceStatus] = None\n    due_date: Optional[date] = None\n    payment_terms: Optional[str] = None\n    notes: Optional[str] = None\n\nclass Invoice(InvoiceBase):\n    id: int\n    invoice_number: str\n    sales_order_id: Optional[int] = None\n    status: InvoiceStatus\n    subtotal: Decimal\n    tax_amount: Decimal\n    total_amount: Decimal\n    paid_amount: Decimal\n    balance_due: Decimal\n    currency: str = \"PYG\"\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n    \n    # CAMPOS FISCALES ESPEC√çFICOS PARA PARAGUAY\n    punto_expedicion: Optional[str] = None\n    \n    # DESGLOSE DE IVA PARAGUAYO\n    subtotal_gravado_10: Decimal = Decimal('0')\n    subtotal_gravado_5: Decimal = Decimal('0')\n    subtotal_exento: Decimal = Decimal('0')\n    iva_10: Decimal = Decimal('0')\n    iva_5: Decimal = Decimal('0')\n    \n    # R√âGIMEN DE TURISMO PARAGUAY\n    tourism_regime_applied: bool = False\n    tourism_regime_percentage: Decimal = Decimal('0')\n    \n    # Informaci√≥n del cliente para mostrar\n    customer_name: Optional[str] = None\n    customer_email: Optional[str] = None\n    customer_ruc: Optional[str] = None\n    \n    # Informaci√≥n de la orden de venta\n    sales_order_number: Optional[str] = None\n    \n    class Config:\n        from_attributes = True\n\nclass InvoiceWithDetails(Invoice):\n    lines: List[InvoiceLine] = []\n    payments: List[Payment] = []\n\n# Schemas para listas\nclass InvoiceList(BaseModel):\n    id: int\n    invoice_number: str\n    customer_id: int\n    customer_name: str\n    invoice_date: date\n    due_date: date\n    status: InvoiceStatus\n    total_amount: Decimal\n    balance_due: Decimal\n    created_at: datetime\n\nclass InvoiceSummary(BaseModel):\n    total_invoices: int\n    total_amount: Decimal\n    paid_amount: Decimal\n    pending_amount: Decimal\n    overdue_amount: Decimal\n\n# Schema para crear factura desde orden de venta\nclass InvoiceFromOrder(BaseModel):\n    sales_order_id: int\n    invoice_date: Optional[date] = None\n    due_date: Optional[date] = None\n    payment_terms: Optional[str] = \"Net 30\"\n    notes: Optional[str] = None\n    \n    @validator('invoice_date', pre=True, always=True)\n    def set_invoice_date(cls, v):\n        return v or date.today()\n    \n    @validator('due_date', pre=True, always=True)\n    def set_due_date(cls, v, values):\n        if v:\n            return v\n        # Si no se especifica, usar 30 d√≠as desde la fecha de factura\n        from datetime import timedelta\n        invoice_date = values.get('invoice_date', date.today())\n        return invoice_date + timedelta(days=30) if invoice_date else None\n\ndef parse_invoice_status(status_str: str) -> InvoiceStatus:\n    \"\"\"Convertir string a enum de estado de factura, manejando case insensitive\"\"\"\n    if not status_str:\n        return InvoiceStatus.PENDING\n    \n    status_upper = status_str.upper().strip()\n    \n    try:\n        return InvoiceStatus(status_upper)\n    except ValueError:\n        # Si no es un estado v√°lido, devolver PENDING por defecto\n        return InvoiceStatus.PENDING\n\ndef parse_payment_method(method_str: str) -> PaymentMethod:\n    \"\"\"Convertir string a enum de m√©todo de pago, manejando case insensitive\"\"\"\n    if not method_str:\n        return PaymentMethod.CASH\n    \n    method_upper = method_str.upper().strip()\n    \n    try:\n        return PaymentMethod(method_upper)\n    except ValueError:\n        # Si no es un m√©todo v√°lido, devolver CASH por defecto\n        return PaymentMethod.CASH","size_bytes":5914},"app/api/dashboard.py":{"content":"from datetime import datetime, timedelta\nfrom typing import Dict, List, Any\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import func, extract, and_, or_\nfrom decimal import Decimal\n\nfrom app.core.database import get_database\nfrom app.models.customer import Customer\nfrom app.models.sales import Quote, SalesOrder\nfrom app.models.invoice import Invoice, Payment\nfrom app.models.product import Product\nfrom app.core.dependencies import get_current_active_user\nfrom app.models.user import User\n\nrouter = APIRouter()\n\n@router.get(\"/stats\")\nasync def get_dashboard_stats(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n) -> Dict[str, Any]:\n    \"\"\"Obtener estad√≠sticas consolidadas para el dashboard principal\"\"\"\n    \n    from datetime import datetime, timedelta\n    from app.models.deposit import Deposit\n    \n    # Estad√≠sticas b√°sicas\n    total_customers = db.query(Customer).count()\n    active_customers = db.query(Customer).filter(Customer.is_active == True).count()\n    total_quotes = db.query(Quote).count()\n    total_invoices = db.query(Invoice).count()\n    total_products = db.query(Product).count()\n    \n    # Estad√≠sticas del mes actual\n    now = datetime.now()\n    start_of_month = datetime(now.year, now.month, 1)\n    \n    monthly_quotes = db.query(Quote).filter(\n        Quote.created_at >= start_of_month\n    ).count()\n    \n    monthly_invoices = db.query(Invoice).filter(\n        Invoice.invoice_date >= start_of_month.date()\n    ).count()\n    \n    # Ventas del mes por moneda\n    monthly_sales_pyg = db.query(func.sum(Invoice.total_amount)).filter(\n        and_(\n            Invoice.invoice_date >= start_of_month.date(),\n            Invoice.currency == 'PYG'\n        )\n    ).scalar() or Decimal('0')\n    \n    monthly_sales_usd = db.query(func.sum(Invoice.total_amount)).filter(\n        and_(\n            Invoice.invoice_date >= start_of_month.date(),\n            Invoice.currency == 'USD'\n        )\n    ).scalar() or Decimal('0')\n    \n    # Facturas pendientes\n    pending_invoices_count = db.query(Invoice).filter(\n        Invoice.status.in_(['PENDING', 'SENT'])\n    ).count()\n    \n    pending_amount_pyg = db.query(func.sum(Invoice.balance_due)).filter(\n        and_(\n            Invoice.status.in_(['PENDING', 'SENT']),\n            Invoice.currency == 'PYG'\n        )\n    ).scalar() or Decimal('0')\n    \n    pending_amount_usd = db.query(func.sum(Invoice.balance_due)).filter(\n        and_(\n            Invoice.status.in_(['PENDING', 'SENT']),\n            Invoice.currency == 'USD'\n        )\n    ).scalar() or Decimal('0')\n    \n    # Dep√≥sitos activos\n    active_deposits = db.query(Deposit).filter(\n        Deposit.status == 'ACTIVO'\n    ).count()\n    \n    deposits_total = db.query(func.sum(Deposit.available_amount)).filter(\n        Deposit.status == 'ACTIVO'\n    ).scalar() or Decimal('0')\n    \n    # R√©gimen de turismo - clientes pr√≥ximos a vencer (pr√≥ximos 30 d√≠as)\n    expiry_threshold = (datetime.now() + timedelta(days=30)).date()\n    tourism_regime_expiring = db.query(Customer).filter(\n        and_(\n            Customer.tourism_regime == True,\n            Customer.tourism_regime_expiry.isnot(None),\n            Customer.tourism_regime_expiry <= expiry_threshold,\n            Customer.is_active == True\n        )\n    ).count()\n    \n    # Stock bajo (menos de 10 unidades)\n    low_stock_count = db.query(Product).filter(\n        and_(\n            Product.is_trackable == True,\n            Product.current_stock < 10,\n            Product.is_active == True\n        )\n    ).count()\n    \n    # Productos sin stock\n    out_of_stock_count = db.query(Product).filter(\n        and_(\n            Product.is_trackable == True,\n            Product.current_stock <= 0,\n            Product.is_active == True\n        )\n    ).count()\n    \n    return {\n        \"basic_stats\": {\n            \"total_customers\": total_customers,\n            \"active_customers\": active_customers,\n            \"total_quotes\": total_quotes,\n            \"total_invoices\": total_invoices,\n            \"total_products\": total_products\n        },\n        \"monthly_stats\": {\n            \"quotes\": monthly_quotes,\n            \"invoices\": monthly_invoices,\n            \"sales_pyg\": float(monthly_sales_pyg),\n            \"sales_usd\": float(monthly_sales_usd)\n        },\n        \"pending_invoices\": {\n            \"count\": pending_invoices_count,\n            \"amount_pyg\": float(pending_amount_pyg),\n            \"amount_usd\": float(pending_amount_usd)\n        },\n        \"deposits\": {\n            \"active_count\": active_deposits,\n            \"total_amount\": float(deposits_total)\n        },\n        \"alerts\": {\n            \"tourism_regime_expiring\": tourism_regime_expiring,\n            \"low_stock_count\": low_stock_count,\n            \"out_of_stock_count\": out_of_stock_count\n        }\n    }\n\n@router.get(\"/metrics/overview\")\nasync def get_overview_metrics(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n) -> Dict[str, Any]:\n    \"\"\"Obtener m√©tricas generales del dashboard\"\"\"\n    \n    # M√©tricas b√°sicas\n    total_customers = db.query(Customer).count()\n    total_quotes = db.query(Quote).count()\n    total_orders = db.query(SalesOrder).count()\n    total_products = db.query(Product).count()\n    total_invoices = db.query(Invoice).count()\n    \n    # M√©tricas financieras\n    total_revenue = db.query(func.sum(Invoice.total_amount)).scalar() or Decimal('0')\n    pending_amount = db.query(func.sum(Invoice.balance_due)).filter(\n        Invoice.status.in_(['PENDING', 'SENT'])\n    ).scalar() or Decimal('0')\n    overdue_amount = db.query(func.sum(Invoice.balance_due)).filter(\n        Invoice.status == 'OVERDUE'\n    ).scalar() or Decimal('0')\n    paid_amount = db.query(func.sum(Payment.amount)).scalar() or Decimal('0')\n    \n    # M√©tricas del mes actual\n    current_month = datetime.now().month\n    current_year = datetime.now().year\n    \n    monthly_revenue = db.query(func.sum(Invoice.total_amount)).filter(\n        and_(\n            extract('month', Invoice.invoice_date) == current_month,\n            extract('year', Invoice.invoice_date) == current_year\n        )\n    ).scalar() or Decimal('0')\n    \n    monthly_orders = db.query(SalesOrder).filter(\n        and_(\n            extract('month', SalesOrder.created_at) == current_month,\n            extract('year', SalesOrder.created_at) == current_year\n        )\n    ).count()\n    \n    # Ratios de conversi√≥n\n    quote_to_order_ratio = 0\n    if total_quotes > 0:\n        orders_from_quotes = db.query(SalesOrder).filter(SalesOrder.quote_id.isnot(None)).count()\n        quote_to_order_ratio = round((orders_from_quotes / total_quotes) * 100, 2)\n    \n    order_to_invoice_ratio = 0\n    if total_orders > 0:\n        invoiced_orders = db.query(Invoice).filter(Invoice.sales_order_id.isnot(None)).count()\n        order_to_invoice_ratio = round((invoiced_orders / total_orders) * 100, 2)\n    \n    # Ticket promedio\n    average_order_value = Decimal('0')\n    if total_orders > 0:\n        avg_value = db.query(func.avg(SalesOrder.total_amount)).scalar()\n        average_order_value = avg_value or Decimal('0')\n    \n    average_invoice_value = Decimal('0')\n    if total_invoices > 0:\n        avg_value = db.query(func.avg(Invoice.total_amount)).scalar()\n        average_invoice_value = avg_value or Decimal('0')\n    \n    return {\n        \"basic_stats\": {\n            \"total_customers\": total_customers,\n            \"total_quotes\": total_quotes,\n            \"total_orders\": total_orders,\n            \"total_products\": total_products,\n            \"total_invoices\": total_invoices\n        },\n        \"financial_stats\": {\n            \"total_revenue\": float(total_revenue),\n            \"pending_amount\": float(pending_amount),\n            \"overdue_amount\": float(overdue_amount),\n            \"paid_amount\": float(paid_amount),\n            \"monthly_revenue\": float(monthly_revenue),\n            \"monthly_orders\": monthly_orders\n        },\n        \"conversion_metrics\": {\n            \"quote_to_order_ratio\": quote_to_order_ratio,\n            \"order_to_invoice_ratio\": order_to_invoice_ratio,\n            \"average_order_value\": float(average_order_value),\n            \"average_invoice_value\": float(average_invoice_value)\n        }\n    }\n\n@router.get(\"/metrics/sales-trend\")\nasync def get_sales_trend(\n    days: int = 30,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n) -> Dict[str, Any]:\n    \"\"\"Obtener tendencia de ventas por d√≠a\"\"\"\n    \n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days)\n    \n    # Generar lista de fechas\n    date_range = []\n    current_date = start_date\n    while current_date <= end_date:\n        date_range.append(current_date.strftime(\"%Y-%m-%d\"))\n        current_date += timedelta(days=1)\n    \n    # Obtener datos de ventas agrupados por d√≠a\n    sales_data = db.query(\n        func.date(Invoice.invoice_date).label('date'),\n        func.sum(Invoice.total_amount).label('total'),\n        func.count(Invoice.id).label('count')\n    ).filter(\n        Invoice.invoice_date >= start_date,\n        Invoice.invoice_date <= end_date\n    ).group_by(\n        func.date(Invoice.invoice_date)\n    ).all()\n    \n    # Crear diccionario para lookup r√°pido\n    sales_dict = {str(row.date): {\"total\": float(row.total), \"count\": row.count} for row in sales_data}\n    \n    # Generar series de datos completando d√≠as faltantes\n    revenue_series = []\n    count_series = []\n    labels = []\n    \n    for date_str in date_range:\n        labels.append(date_str)\n        if date_str in sales_dict:\n            revenue_series.append(sales_dict[date_str][\"total\"])\n            count_series.append(sales_dict[date_str][\"count\"])\n        else:\n            revenue_series.append(0)\n            count_series.append(0)\n    \n    return {\n        \"labels\": labels,\n        \"revenue_series\": revenue_series,\n        \"count_series\": count_series,\n        \"period_days\": days\n    }\n\n@router.get(\"/metrics/top-products\")\nasync def get_top_products(\n    limit: int = 10,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n) -> List[Dict[str, Any]]:\n    \"\"\"Obtener productos m√°s vendidos\"\"\"\n    \n    # Obtener productos m√°s vendidos de √≥rdenes de venta\n    from app.models.sales import SalesOrderLine\n    \n    top_products = db.query(\n        Product.id,\n        Product.name,\n        Product.product_code,\n        func.sum(SalesOrderLine.quantity).label('total_quantity'),\n        func.sum(SalesOrderLine.line_total).label('total_revenue'),\n        func.count(SalesOrderLine.id).label('order_count')\n    ).join(\n        SalesOrderLine, Product.id == SalesOrderLine.product_id\n    ).join(\n        SalesOrder, SalesOrderLine.order_id == SalesOrder.id\n    ).filter(\n        SalesOrder.status.in_(['CONFIRMED', 'SHIPPED', 'DELIVERED'])\n    ).group_by(\n        Product.id, Product.name, Product.product_code\n    ).order_by(\n        func.sum(SalesOrderLine.line_total).desc()\n    ).limit(limit).all()\n    \n    return [\n        {\n            \"product_id\": product.id,\n            \"name\": product.name,\n            \"code\": product.product_code,\n            \"total_quantity\": float(product.total_quantity or 0),\n            \"total_revenue\": float(product.total_revenue or 0),\n            \"order_count\": product.order_count\n        }\n        for product in top_products\n    ]\n\n@router.get(\"/metrics/customer-analysis\")\nasync def get_customer_analysis(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n) -> Dict[str, Any]:\n    \"\"\"An√°lisis de clientes por valor\"\"\"\n    \n    # Clientes con m√°s √≥rdenes\n    top_customers_by_orders = db.query(\n        Customer.id,\n        Customer.company_name,\n        Customer.email,\n        func.count(SalesOrder.id).label('order_count'),\n        func.sum(SalesOrder.total_amount).label('total_value')\n    ).join(\n        SalesOrder, Customer.id == SalesOrder.customer_id\n    ).group_by(\n        Customer.id, Customer.company_name, Customer.email\n    ).order_by(\n        func.sum(SalesOrder.total_amount).desc()\n    ).limit(10).all()\n    \n    # Clientes con m√°s facturas pendientes\n    customers_with_pending = db.query(\n        Customer.id,\n        Customer.company_name,\n        Customer.email,\n        func.sum(Invoice.balance_due).label('pending_balance'),\n        func.count(Invoice.id).label('pending_invoices')\n    ).join(\n        Invoice, Customer.id == Invoice.customer_id\n    ).filter(\n        Invoice.status.in_(['PENDING', 'SENT', 'OVERDUE']),\n        Invoice.balance_due > 0\n    ).group_by(\n        Customer.id, Customer.company_name, Customer.email\n    ).order_by(\n        func.sum(Invoice.balance_due).desc()\n    ).limit(10).all()\n    \n    return {\n        \"top_customers_by_value\": [\n            {\n                \"customer_id\": customer.id,\n                \"company_name\": customer.company_name,\n                \"email\": customer.email,\n                \"order_count\": customer.order_count,\n                \"total_value\": float(customer.total_value or 0)\n            }\n            for customer in top_customers_by_orders\n        ],\n        \"customers_with_pending\": [\n            {\n                \"customer_id\": customer.id,\n                \"company_name\": customer.company_name,\n                \"email\": customer.email,\n                \"pending_balance\": float(customer.pending_balance or 0),\n                \"pending_invoices\": customer.pending_invoices\n            }\n            for customer in customers_with_pending\n        ]\n    }\n\n@router.get(\"/metrics/inventory-status\")\nasync def get_inventory_status(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n) -> Dict[str, Any]:\n    \"\"\"Estado del inventario y productos con stock bajo\"\"\"\n    \n    # Productos con stock bajo (menos de 10 unidades para trackeable)\n    low_stock_products = db.query(Product).filter(\n        and_(\n            Product.is_trackable == True,\n            Product.current_stock < 10\n        )\n    ).order_by(Product.current_stock.asc()).limit(20).all()\n    \n    # Productos sin stock\n    out_of_stock = db.query(Product).filter(\n        and_(\n            Product.is_trackable == True,\n            Product.current_stock <= 0\n        )\n    ).count()\n    \n    # Valor total del inventario\n    inventory_value = db.query(\n        func.sum(Product.current_stock * Product.selling_price)\n    ).filter(\n        Product.is_trackable == True\n    ).scalar() or Decimal('0')\n    \n    # Productos m√°s movidos (necesitar√≠amos una tabla de movimientos de inventario)\n    # Por ahora usar datos de √≥rdenes como proxy\n    from app.models.sales import SalesOrderLine\n    \n    most_moved_products = db.query(\n        Product.id,\n        Product.name,\n        Product.product_code,\n        Product.current_stock,\n        func.sum(SalesOrderLine.quantity).label('total_moved')\n    ).join(\n        SalesOrderLine, Product.id == SalesOrderLine.product_id\n    ).filter(\n        Product.is_trackable == True\n    ).group_by(\n        Product.id, Product.name, Product.product_code, Product.current_stock\n    ).order_by(\n        func.sum(SalesOrderLine.quantity).desc()\n    ).limit(10).all()\n    \n    return {\n        \"inventory_summary\": {\n            \"total_products\": db.query(Product).count(),\n            \"trackable_products\": db.query(Product).filter(Product.is_trackable == True).count(),\n            \"out_of_stock_count\": out_of_stock,\n            \"low_stock_count\": len(low_stock_products),\n            \"total_inventory_value\": float(inventory_value)\n        },\n        \"low_stock_products\": [\n            {\n                \"id\": product.id,\n                \"name\": product.name,\n                \"code\": product.product_code,\n                \"current_stock\": product.current_stock,\n                \"price\": float(getattr(product, 'selling_price', 0) or 0)\n            }\n            for product in low_stock_products\n        ],\n        \"most_moved_products\": [\n            {\n                \"id\": product.id,\n                \"name\": product.name,\n                \"code\": product.product_code,\n                \"current_stock\": product.current_stock,\n                \"total_moved\": float(product.total_moved or 0)\n            }\n            for product in most_moved_products\n        ]\n    }","size_bytes":16407},"static/dashboard.js":{"content":"// Dashboard JavaScript\nconst API_BASE = '';\nlet authToken = localStorage.getItem('authToken');\nlet charts = {};\n\n// Initialize dashboard\ndocument.addEventListener('DOMContentLoaded', function() {\n    checkAuthAndInit();\n    \n    // Setup navigation\n    document.querySelectorAll('[data-section]').forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            const section = this.dataset.section;\n            showSection(section);\n            updateActiveNav(this);\n        });\n    });\n});\n\nasync function checkAuthAndInit() {\n    if (!authToken) {\n        window.location.href = '/';\n        return;\n    }\n    \n    try {\n        // Verificar token y cargar datos\n        await loadOverviewData();\n        await loadSalesTrend();\n    } catch (error) {\n        console.error('Error inicializando dashboard:', error);\n        if (error.message === 'Authentication failed') {\n            localStorage.removeItem('authToken');\n            window.location.href = '/';\n        }\n    }\n}\n\nasync function apiCall(endpoint) {\n    try {\n        const response = await fetch(`${API_BASE}${endpoint}`, {\n            headers: {\n                'Authorization': `Bearer ${authToken}`,\n                'Content-Type': 'application/json'\n            }\n        });\n        \n        if (response.status === 401 || response.status === 403) {\n            throw new Error('Authentication failed');\n        }\n        \n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        return await response.json();\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n    }\n}\n\nfunction showSection(sectionName) {\n    // Ocultar todas las secciones\n    document.querySelectorAll('.dashboard-section').forEach(section => {\n        section.classList.add('d-none');\n    });\n    \n    // Mostrar la secci√≥n seleccionada\n    const targetSection = document.getElementById(`${sectionName}-section`);\n    if (targetSection) {\n        targetSection.classList.remove('d-none');\n    }\n    \n    // Cargar datos espec√≠ficos de la secci√≥n\n    loadSectionData(sectionName);\n}\n\nfunction updateActiveNav(activeLink) {\n    document.querySelectorAll('.nav-link').forEach(link => {\n        link.classList.remove('active');\n    });\n    activeLink.classList.add('active');\n}\n\nasync function loadOverviewData() {\n    try {\n        const data = await apiCall('/api/dashboard/metrics/overview');\n        renderMetricsCards(data);\n        renderKPIs(data);\n    } catch (error) {\n        console.error('Error loading overview:', error);\n        showErrorMessage('Error cargando m√©tricas generales');\n    }\n}\n\nfunction renderMetricsCards(data) {\n    const metricsRow = document.getElementById('metrics-row');\n    \n    const metrics = [\n        {\n            icon: 'fas fa-users',\n            value: data.basic_stats.total_customers,\n            label: 'Clientes Totales',\n            color: '#667eea'\n        },\n        {\n            icon: 'fas fa-file-alt',\n            value: data.basic_stats.total_quotes,\n            label: 'Cotizaciones',\n            color: '#764ba2'\n        },\n        {\n            icon: 'fas fa-shopping-cart',\n            value: data.basic_stats.total_orders,\n            label: '√ìrdenes',\n            color: '#f093fb'\n        },\n        {\n            icon: 'fas fa-file-invoice-dollar',\n            value: data.basic_stats.total_invoices,\n            label: 'Facturas',\n            color: '#4facfe'\n        },\n        {\n            icon: 'fas fa-dollar-sign',\n            value: formatCurrency(data.financial_stats.total_revenue),\n            label: 'Ingresos Totales',\n            color: '#43e97b',\n            isLarge: true\n        },\n        {\n            icon: 'fas fa-chart-line',\n            value: formatCurrency(data.financial_stats.monthly_revenue),\n            label: 'Ingresos del Mes',\n            color: '#38f9d7',\n            isLarge: true\n        }\n    ];\n    \n    metricsRow.innerHTML = metrics.map(metric => `\n        <div class=\"col-md-${metric.isLarge ? '6' : '3'} col-sm-6 mb-3\">\n            <div class=\"metric-card text-center\">\n                <div style=\"color: ${metric.color}\">\n                    <i class=\"${metric.icon} fa-2x mb-3\"></i>\n                </div>\n                <div class=\"metric-value\" style=\"color: ${metric.color}\">${metric.value}</div>\n                <div class=\"metric-label\">${metric.label}</div>\n            </div>\n        </div>\n    `).join('');\n}\n\nfunction renderKPIs(data) {\n    const kpisContainer = document.getElementById('kpis-container');\n    \n    const kpis = [\n        {\n            label: 'Ratio Cotizaci√≥n ‚Üí Orden',\n            value: `${data.conversion_metrics.quote_to_order_ratio}%`,\n            status: data.conversion_metrics.quote_to_order_ratio >= 50 ? 'excellent' : \n                   data.conversion_metrics.quote_to_order_ratio >= 30 ? 'good' : 'warning'\n        },\n        {\n            label: 'Ratio Orden ‚Üí Factura',\n            value: `${data.conversion_metrics.order_to_invoice_ratio}%`,\n            status: data.conversion_metrics.order_to_invoice_ratio >= 80 ? 'excellent' : \n                   data.conversion_metrics.order_to_invoice_ratio >= 60 ? 'good' : 'warning'\n        },\n        {\n            label: 'Ticket Promedio Orden',\n            value: formatCurrency(data.conversion_metrics.average_order_value),\n            status: 'good'\n        },\n        {\n            label: 'Ticket Promedio Factura',\n            value: formatCurrency(data.conversion_metrics.average_invoice_value),\n            status: 'good'\n        }\n    ];\n    \n    kpisContainer.innerHTML = kpis.map(kpi => `\n        <div class=\"d-flex justify-content-between align-items-center mb-3 p-2 border rounded\">\n            <small class=\"text-muted\">${kpi.label}</small>\n            <span class=\"status-badge status-${kpi.status}\">${kpi.value}</span>\n        </div>\n    `).join('');\n}\n\nasync function loadSalesTrend() {\n    try {\n        const data = await apiCall('/api/dashboard/metrics/sales-trend?days=30');\n        renderSalesTrendChart(data);\n    } catch (error) {\n        console.error('Error loading sales trend:', error);\n        document.getElementById('salesTrendChart').parentElement.innerHTML = \n            '<p class=\"text-danger\">Error cargando tendencia de ventas</p>';\n    }\n}\n\nfunction renderSalesTrendChart(data) {\n    const ctx = document.getElementById('salesTrendChart').getContext('2d');\n    \n    if (charts.salesTrend) {\n        charts.salesTrend.destroy();\n    }\n    \n    charts.salesTrend = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: data.labels.map(date => new Date(date).toLocaleDateString('es-MX', {\n                month: 'short', day: 'numeric'\n            })),\n            datasets: [{\n                label: 'Ingresos Diarios',\n                data: data.revenue_series,\n                borderColor: '#667eea',\n                backgroundColor: 'rgba(102, 126, 234, 0.1)',\n                tension: 0.4,\n                fill: true\n            }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    display: false\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    ticks: {\n                        callback: function(value) {\n                            return formatCurrency(value);\n                        }\n                    }\n                }\n            },\n            elements: {\n                point: {\n                    radius: 4,\n                    hoverRadius: 6\n                }\n            }\n        }\n    });\n}\n\nasync function loadSectionData(sectionName) {\n    switch(sectionName) {\n        case 'overview':\n            // Ya cargado\n            break;\n            \n        case 'products':\n            await loadTopProducts();\n            break;\n            \n        case 'customers':\n            await loadCustomerAnalysis();\n            break;\n            \n        case 'inventory':\n            await loadInventoryStatus();\n            break;\n            \n        case 'sales':\n            await loadSalesAnalysis();\n            break;\n            \n        case 'financial':\n            await loadFinancialDetails();\n            break;\n    }\n}\n\nasync function loadTopProducts() {\n    const container = document.getElementById('top-products-container');\n    \n    try {\n        const data = await apiCall('/api/dashboard/metrics/top-products');\n        \n        if (data.length === 0) {\n            container.innerHTML = '<p class=\"text-muted text-center\">No hay datos de productos vendidos</p>';\n            return;\n        }\n        \n        container.innerHTML = `\n            <div class=\"table-responsive\">\n                <table class=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th>Producto</th>\n                            <th>C√≥digo</th>\n                            <th>Cantidad Vendida</th>\n                            <th>Ingresos Totales</th>\n                            <th>N√∫mero de √ìrdenes</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${data.map((product, index) => `\n                            <tr>\n                                <td>\n                                    <div class=\"d-flex align-items-center\">\n                                        <span class=\"badge bg-primary me-2\">#${index + 1}</span>\n                                        <strong>${product.name}</strong>\n                                    </div>\n                                </td>\n                                <td><code>${product.product_code}</code></td>\n                                <td><strong>${product.total_quantity}</strong></td>\n                                <td><strong>${formatCurrency(product.total_revenue)}</strong></td>\n                                <td>${product.order_count}</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n        `;\n        \n    } catch (error) {\n        console.error('Error loading top products:', error);\n        container.innerHTML = '<p class=\"text-danger\">Error cargando productos m√°s vendidos</p>';\n    }\n}\n\nasync function loadInventoryStatus() {\n    const container = document.getElementById('inventory-summary-container');\n    \n    try {\n        const data = await apiCall('/api/dashboard/metrics/inventory-status');\n        \n        container.innerHTML = `\n            <div class=\"row mb-4\">\n                <div class=\"col-md-3 text-center\">\n                    <h4 class=\"text-primary\">${data.inventory_summary.total_products}</h4>\n                    <small class=\"text-muted\">Productos Totales</small>\n                </div>\n                <div class=\"col-md-3 text-center\">\n                    <h4 class=\"text-success\">${data.inventory_summary.trackable_products}</h4>\n                    <small class=\"text-muted\">Productos con Inventario</small>\n                </div>\n                <div class=\"col-md-3 text-center\">\n                    <h4 class=\"text-warning\">${data.inventory_summary.low_stock_count}</h4>\n                    <small class=\"text-muted\">Stock Bajo</small>\n                </div>\n                <div class=\"col-md-3 text-center\">\n                    <h4 class=\"text-danger\">${data.inventory_summary.out_of_stock_count}</h4>\n                    <small class=\"text-muted\">Sin Stock</small>\n                </div>\n            </div>\n            \n            <div class=\"row\">\n                <div class=\"col-md-6\">\n                    <h6>Productos con Stock Bajo</h6>\n                    ${data.low_stock_products.length === 0 ? \n                        '<p class=\"text-muted\">No hay productos con stock bajo</p>' :\n                        `<div class=\"table-responsive\">\n                            <table class=\"table table-sm\">\n                                <thead>\n                                    <tr>\n                                        <th>Producto</th>\n                                        <th>Stock Actual</th>\n                                        <th>Precio</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${data.low_stock_products.map(product => `\n                                        <tr>\n                                            <td>${product.name}</td>\n                                            <td><span class=\"badge bg-warning\">${product.current_stock}</span></td>\n                                            <td>${formatCurrency(product.price)}</td>\n                                        </tr>\n                                    `).join('')}\n                                </tbody>\n                            </table>\n                        </div>`\n                    }\n                </div>\n                <div class=\"col-md-6\">\n                    <h6>Productos M√°s Movidos</h6>\n                    ${data.most_moved_products.length === 0 ? \n                        '<p class=\"text-muted\">No hay datos de movimiento</p>' :\n                        `<div class=\"table-responsive\">\n                            <table class=\"table table-sm\">\n                                <thead>\n                                    <tr>\n                                        <th>Producto</th>\n                                        <th>Stock Actual</th>\n                                        <th>Total Vendido</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${data.most_moved_products.map(product => `\n                                        <tr>\n                                            <td>${product.name}</td>\n                                            <td>${product.current_stock || 'N/A'}</td>\n                                            <td><strong>${product.total_moved}</strong></td>\n                                        </tr>\n                                    `).join('')}\n                                </tbody>\n                            </table>\n                        </div>`\n                    }\n                </div>\n            </div>\n        `;\n        \n    } catch (error) {\n        console.error('Error loading inventory:', error);\n        container.innerHTML = '<p class=\"text-danger\">Error cargando estado del inventario</p>';\n    }\n}\n\nasync function loadCustomerAnalysis() {\n    const topCustomersContainer = document.getElementById('top-customers-container');\n    const pendingCustomersContainer = document.getElementById('pending-customers-container');\n    \n    try {\n        const data = await apiCall('/api/dashboard/metrics/customer-analysis');\n        \n        // Top customers by value\n        if (data.top_customers_by_value.length === 0) {\n            topCustomersContainer.innerHTML = '<p class=\"text-muted text-center\">No hay datos de clientes</p>';\n        } else {\n            topCustomersContainer.innerHTML = `\n                <div class=\"table-responsive\">\n                    <table class=\"table table-hover\">\n                        <thead>\n                            <tr>\n                                <th>Cliente</th>\n                                <th>√ìrdenes</th>\n                                <th>Valor Total</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${data.top_customers_by_value.map((customer, index) => `\n                                <tr>\n                                    <td>\n                                        <div class=\"d-flex align-items-center\">\n                                            <span class=\"badge bg-success me-2\">#${index + 1}</span>\n                                            <div>\n                                                <strong>${customer.company_name}</strong>\n                                                <br><small class=\"text-muted\">${customer.email}</small>\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td><strong>${customer.order_count}</strong></td>\n                                    <td><strong>${formatCurrency(customer.total_value)}</strong></td>\n                                </tr>\n                            `).join('')}\n                        </tbody>\n                    </table>\n                </div>\n            `;\n        }\n        \n        // Customers with pending payments\n        if (data.customers_with_pending.length === 0) {\n            pendingCustomersContainer.innerHTML = '<p class=\"text-muted text-center\">No hay clientes con saldos pendientes</p>';\n        } else {\n            pendingCustomersContainer.innerHTML = `\n                <div class=\"table-responsive\">\n                    <table class=\"table table-hover\">\n                        <thead>\n                            <tr>\n                                <th>Cliente</th>\n                                <th>Facturas</th>\n                                <th>Saldo Pendiente</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            ${data.customers_with_pending.map(customer => `\n                                <tr>\n                                    <td>\n                                        <div>\n                                            <strong>${customer.company_name}</strong>\n                                            <br><small class=\"text-muted\">${customer.email}</small>\n                                        </div>\n                                    </td>\n                                    <td><span class=\"badge bg-warning\">${customer.pending_invoices}</span></td>\n                                    <td><strong class=\"text-danger\">${formatCurrency(customer.pending_balance)}</strong></td>\n                                </tr>\n                            `).join('')}\n                        </tbody>\n                    </table>\n                </div>\n            `;\n        }\n        \n    } catch (error) {\n        console.error('Error loading customer analysis:', error);\n        topCustomersContainer.innerHTML = '<p class=\"text-danger\">Error cargando an√°lisis de clientes</p>';\n        pendingCustomersContainer.innerHTML = '<p class=\"text-danger\">Error cargando saldos pendientes</p>';\n    }\n}\n\nasync function loadSalesAnalysis() {\n    // Placeholder for sales analysis charts\n    console.log('Loading sales analysis...');\n}\n\nasync function loadFinancialDetails() {\n    const container = document.getElementById('financial-details-container');\n    \n    try {\n        const data = await apiCall('/api/dashboard/metrics/overview');\n        \n        container.innerHTML = `\n            <div class=\"row\">\n                <div class=\"col-md-3\">\n                    <div class=\"text-center p-3 border rounded\">\n                        <h4 class=\"text-success\">${formatCurrency(data.financial_stats.total_revenue)}</h4>\n                        <small class=\"text-muted\">Ingresos Totales</small>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"text-center p-3 border rounded\">\n                        <h4 class=\"text-info\">${formatCurrency(data.financial_stats.paid_amount)}</h4>\n                        <small class=\"text-muted\">Pagos Recibidos</small>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"text-center p-3 border rounded\">\n                        <h4 class=\"text-warning\">${formatCurrency(data.financial_stats.pending_amount)}</h4>\n                        <small class=\"text-muted\">Saldos Pendientes</small>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"text-center p-3 border rounded\">\n                        <h4 class=\"text-danger\">${formatCurrency(data.financial_stats.overdue_amount)}</h4>\n                        <small class=\"text-muted\">Facturas Vencidas</small>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"row mt-4\">\n                <div class=\"col-md-6\">\n                    <h6>M√©tricas del Mes Actual</h6>\n                    <ul class=\"list-group\">\n                        <li class=\"list-group-item d-flex justify-content-between\">\n                            <span>Ingresos del Mes</span>\n                            <strong>${formatCurrency(data.financial_stats.monthly_revenue)}</strong>\n                        </li>\n                        <li class=\"list-group-item d-flex justify-content-between\">\n                            <span>√ìrdenes del Mes</span>\n                            <strong>${data.financial_stats.monthly_orders}</strong>\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"col-md-6\">\n                    <h6>Ratios de Conversi√≥n</h6>\n                    <ul class=\"list-group\">\n                        <li class=\"list-group-item d-flex justify-content-between\">\n                            <span>Cotizaci√≥n ‚Üí Orden</span>\n                            <strong>${data.conversion_metrics.quote_to_order_ratio}%</strong>\n                        </li>\n                        <li class=\"list-group-item d-flex justify-content-between\">\n                            <span>Orden ‚Üí Factura</span>\n                            <strong>${data.conversion_metrics.order_to_invoice_ratio}%</strong>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        `;\n        \n    } catch (error) {\n        console.error('Error loading financial details:', error);\n        container.innerHTML = '<p class=\"text-danger\">Error cargando detalles financieros</p>';\n    }\n}\n\nfunction formatCurrency(amount) {\n    if (amount === null || amount === undefined) return '$0.00';\n    return new Intl.NumberFormat('es-MX', {\n        style: 'currency',\n        currency: 'MXN',\n        minimumFractionDigits: 2\n    }).format(amount);\n}\n\nfunction showErrorMessage(message) {\n    console.error(message);\n    // Could show a toast notification here\n}\n\nasync function refreshDashboard() {\n    const button = event.target;\n    const originalHtml = button.innerHTML;\n    \n    button.innerHTML = '<i class=\"fas fa-spinner fa-spin\"></i> Actualizando...';\n    button.disabled = true;\n    \n    try {\n        await loadOverviewData();\n        await loadSalesTrend();\n        \n        // Reload current section data\n        const activeSection = document.querySelector('.nav-link.active')?.dataset.section;\n        if (activeSection && activeSection !== 'overview') {\n            await loadSectionData(activeSection);\n        }\n        \n    } catch (error) {\n        console.error('Error refreshing dashboard:', error);\n        showErrorMessage('Error actualizando el dashboard');\n    } finally {\n        button.innerHTML = originalHtml;\n        button.disabled = false;\n    }\n}","size_bytes":23475},"alembic/versions/128177144df2_add_tourism_regime_fields_for_paraguay_.py":{"content":"\"\"\"Add tourism regime fields for Paraguay customers\n\nRevision ID: 128177144df2\nRevises: c72dfa0b3d92\nCreate Date: 2025-09-17 03:18:10.562227\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '128177144df2'\ndown_revision: Union[str, Sequence[str], None] = 'c72dfa0b3d92'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('customers', sa.Column('tourism_regime', sa.Boolean(), nullable=True))\n    op.add_column('customers', sa.Column('tourism_regime_pdf', sa.String(), nullable=True))\n    op.add_column('customers', sa.Column('tourism_regime_expiry', sa.Date(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('customers', 'tourism_regime_expiry')\n    op.drop_column('customers', 'tourism_regime_pdf')\n    op.drop_column('customers', 'tourism_regime')\n    # ### end Alembic commands ###\n","size_bytes":1215},"alembic/versions/25372ebad3db_add_user_roles_and_limitations_system.py":{"content":"\"\"\"Add user roles and limitations system\n\nRevision ID: 25372ebad3db\nRevises: 128177144df2\nCreate Date: 2025-09-17 03:43:28.699210\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '25372ebad3db'\ndown_revision: Union[str, Sequence[str], None] = '128177144df2'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # Crear tipo ENUM para roles de usuario\n    user_role_enum = sa.Enum('admin', 'manager', 'seller', 'viewer', 'accountant', name='userrole')\n    user_role_enum.create(op.get_bind())\n    \n    # Agregar nuevos campos al modelo User\n    \n    # Campo de rol\n    op.add_column('users', sa.Column('role', user_role_enum, nullable=False, server_default='seller'))\n    \n    # Limitaciones de uso\n    op.add_column('users', sa.Column('max_customers', sa.Integer(), nullable=False, server_default='10'))\n    op.add_column('users', sa.Column('max_quotes', sa.Integer(), nullable=False, server_default='20'))\n    op.add_column('users', sa.Column('max_orders', sa.Integer(), nullable=False, server_default='15'))\n    op.add_column('users', sa.Column('max_invoices', sa.Integer(), nullable=False, server_default='10'))\n    \n    # Permisos espec√≠ficos\n    op.add_column('users', sa.Column('can_manage_inventory', sa.Boolean(), nullable=False, server_default='false'))\n    op.add_column('users', sa.Column('can_view_reports', sa.Boolean(), nullable=False, server_default='true'))\n    op.add_column('users', sa.Column('can_manage_tourism_regime', sa.Boolean(), nullable=False, server_default='false'))\n    op.add_column('users', sa.Column('can_manage_deposits', sa.Boolean(), nullable=False, server_default='false'))\n    op.add_column('users', sa.Column('can_export_data', sa.Boolean(), nullable=False, server_default='false'))\n    \n    # Informaci√≥n adicional para Paraguay\n    op.add_column('users', sa.Column('notes', sa.Text(), nullable=True))\n    op.add_column('users', sa.Column('department', sa.String(), nullable=True))\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # Remover campos en orden inverso\n    op.drop_column('users', 'department')\n    op.drop_column('users', 'notes')\n    op.drop_column('users', 'can_export_data')\n    op.drop_column('users', 'can_manage_deposits')\n    op.drop_column('users', 'can_manage_tourism_regime')\n    op.drop_column('users', 'can_view_reports')\n    op.drop_column('users', 'can_manage_inventory')\n    op.drop_column('users', 'max_invoices')\n    op.drop_column('users', 'max_orders')\n    op.drop_column('users', 'max_quotes')\n    op.drop_column('users', 'max_customers')\n    op.drop_column('users', 'role')\n    \n    # Eliminar el tipo ENUM\n    user_role_enum = sa.Enum(name='userrole')\n    user_role_enum.drop(op.get_bind())\n","size_bytes":2882},"app/crud/usage_limits.py":{"content":"\"\"\"\nCRUD operations for usage limits enforcement\nSistema de l√≠mites de uso para Paraguay ERP/CRM\n\"\"\"\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import func, extract\nfrom datetime import datetime, timedelta\nfrom typing import Dict\n\nfrom app.models.customer import Customer\nfrom app.models.sales import Quote, SalesOrder\nfrom app.models.invoice import Invoice\n\n\ndef get_user_usage(db: Session, user_id: int, limit_type: str) -> int:\n    \"\"\"\n    Obtener el uso actual del usuario seg√∫n el tipo de l√≠mite\n    Para quotes, orders, invoices se cuenta por mes actual\n    Para customers se cuenta total acumulado\n    \"\"\"\n    current_date = datetime.now()\n    current_month = current_date.month\n    current_year = current_date.year\n    \n    if limit_type == \"customers\":\n        # Customers: Total acumulado\n        count = db.query(Customer).filter(\n            Customer.created_by_id == user_id\n        ).count()\n        \n    elif limit_type == \"quotes\":\n        # Quotes: Este mes\n        count = db.query(Quote).filter(\n            Quote.created_by_id == user_id,\n            extract('month', Quote.created_at) == current_month,\n            extract('year', Quote.created_at) == current_year\n        ).count()\n        \n    elif limit_type == \"orders\":\n        # Orders: Este mes\n        count = db.query(SalesOrder).filter(\n            SalesOrder.created_by_id == user_id,\n            extract('month', SalesOrder.created_at) == current_month,\n            extract('year', SalesOrder.created_at) == current_year\n        ).count()\n        \n    elif limit_type == \"invoices\":\n        # Invoices: Este mes\n        count = db.query(Invoice).filter(\n            Invoice.created_by_id == user_id,\n            extract('month', Invoice.created_at) == current_month,\n            extract('year', Invoice.created_at) == current_year\n        ).count()\n        \n    else:\n        count = 0\n    \n    return count\n\n\ndef get_user_usage_details(db: Session, user_id: int) -> Dict[str, int]:\n    \"\"\"\n    Obtener detalles completos de uso del usuario\n    \"\"\"\n    return {\n        \"customers\": get_user_usage(db, user_id, \"customers\"),\n        \"quotes\": get_user_usage(db, user_id, \"quotes\"), \n        \"orders\": get_user_usage(db, user_id, \"orders\"),\n        \"invoices\": get_user_usage(db, user_id, \"invoices\")\n    }\n\n\ndef check_user_can_create(db: Session, user_id: int, limit_type: str, user_limits: Dict[str, int]) -> tuple[bool, str]:\n    \"\"\"\n    Verificar si el usuario puede crear un nuevo elemento\n    Retorna (puede_crear, mensaje_error)\n    \"\"\"\n    current_usage = get_user_usage(db, user_id, limit_type)\n    max_allowed = user_limits.get(f\"max_{limit_type}\", 0)\n    \n    if current_usage >= max_allowed:\n        period = \"este mes\" if limit_type in [\"quotes\", \"orders\", \"invoices\"] else \"en total\"\n        return False, f\"L√≠mite excedido: {current_usage}/{max_allowed} {limit_type} {period}\"\n    \n    return True, f\"OK: {current_usage + 1}/{max_allowed} {limit_type}\"\n\n\ndef get_user_limits_summary(db: Session, user_id: int, user_limits: Dict[str, int]) -> Dict:\n    \"\"\"\n    Obtener resumen completo de l√≠mites y uso actual\n    \"\"\"\n    usage = get_user_usage_details(db, user_id)\n    \n    return {\n        \"limits\": user_limits,\n        \"current_usage\": usage,\n        \"remaining\": {\n            \"customers\": max(0, user_limits.get(\"max_customers\", 0) - usage[\"customers\"]),\n            \"quotes\": max(0, user_limits.get(\"max_quotes\", 0) - usage[\"quotes\"]),\n            \"orders\": max(0, user_limits.get(\"max_orders\", 0) - usage[\"orders\"]),\n            \"invoices\": max(0, user_limits.get(\"max_invoices\", 0) - usage[\"invoices\"])\n        },\n        \"percentage_used\": {\n            \"customers\": round((usage[\"customers\"] / max(1, user_limits.get(\"max_customers\", 1))) * 100, 1),\n            \"quotes\": round((usage[\"quotes\"] / max(1, user_limits.get(\"max_quotes\", 1))) * 100, 1),\n            \"orders\": round((usage[\"orders\"] / max(1, user_limits.get(\"max_orders\", 1))) * 100, 1),\n            \"invoices\": round((usage[\"invoices\"] / max(1, user_limits.get(\"max_invoices\", 1))) * 100, 1)\n        }\n    }","size_bytes":4090},"app/api/notifications.py":{"content":"from fastapi import APIRouter, Depends, HTTPException\nfrom sqlalchemy.orm import Session\nfrom typing import Dict, Any\nfrom datetime import datetime\n\nfrom app.core.dependencies import get_database, get_current_user\nfrom app.models.user import User, UserRole\nfrom app.services.notification_service import NotificationService, trigger_expiry_check_manually\n\nrouter = APIRouter()\n\n@router.get(\"/tourism-expiry-check\", response_model=Dict[str, Any])\nasync def check_tourism_expiry_notifications(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"\n    Endpoint para verificar manualmente notificaciones de vencimiento del r√©gimen de turismo\n    Solo para administradores y managers\n    \"\"\"\n    # Verificar permisos\n    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER]:\n        raise HTTPException(status_code=403, detail=\"Acceso denegado\")\n    \n    try:\n        # Ejecutar verificaci√≥n manual\n        result = NotificationService.process_expiry_notifications(db)\n        \n        return {\n            \"message\": \"Verificaci√≥n de vencimientos completada\",\n            \"result\": result,\n            \"user\": current_user.username\n        }\n        \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error en verificaci√≥n: {str(e)}\")\n\n@router.post(\"/tourism-expiry-task\", response_model=Dict[str, str])\nasync def trigger_tourism_expiry_task(\n    current_user: User = Depends(get_current_user)\n):\n    \"\"\"\n    Endpoint para ejecutar manualmente el task de Celery\n    Solo para administradores\n    \"\"\"\n    # Verificar permisos de admin\n    if current_user.role != UserRole.ADMIN:  # type: ignore\n        raise HTTPException(status_code=403, detail=\"Solo administradores pueden ejecutar tasks\")\n    \n    try:\n        # Ejecutar task de Celery\n        task = trigger_expiry_check_manually()\n        \n        return {\n            \"message\": \"Task de verificaci√≥n de vencimientos iniciado\",\n            \"task_id\": task.id,\n            \"user\": current_user.username\n        }\n        \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error ejecutando task: {str(e)}\")\n\n@router.get(\"/customers-expiring-tourism\")\nasync def get_customers_with_expiring_tourism(\n    days_ahead: int = 5,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"\n    Obtiene lista de clientes cuyo r√©gimen de turismo vence pronto\n    \"\"\"\n    # Verificar permisos\n    if current_user.role not in [UserRole.ADMIN, UserRole.MANAGER]:\n        raise HTTPException(status_code=403, detail=\"Acceso denegado\")\n    \n    try:\n        customers = NotificationService.get_customers_with_expiring_tourism(db, days_ahead)\n        \n        return {\n            \"customers\": [\n                {\n                    \"id\": customer.id,\n                    \"company_name\": customer.company_name,\n                    \"contact_name\": customer.contact_name,\n                    \"tourism_regime_expiry\": customer.tourism_regime_expiry.isoformat() if customer.tourism_regime_expiry is not None else None,\n                    \"days_until_expiry\": (customer.tourism_regime_expiry - datetime.now().date()).days if customer.tourism_regime_expiry is not None else None\n                }\n                for customer in customers\n            ],\n            \"total\": len(customers),\n            \"days_ahead\": days_ahead\n        }\n        \n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error obteniendo clientes: {str(e)}\")","size_bytes":3567},"app/core/celery_app.py":{"content":"from celery import Celery\nfrom celery.schedules import crontab\nfrom app.core.config import settings\n\n# Crear instancia de Celery\ncelery_app = Celery(\"sales_management\")\n\n# Configuraci√≥n\ncelery_app.conf.update(\n    broker_url=settings.redis_url,\n    result_backend=settings.redis_url,\n    task_serializer=\"json\",\n    accept_content=[\"json\"],\n    result_serializer=\"json\",\n    timezone=\"America/Asuncion\",  # Zona horaria de Paraguay\n    enable_utc=True,\n    \n    # Configuraci√≥n del scheduler\n    beat_schedule={\n        \"check-tourism-expiry\": {\n            \"task\": \"app.services.notification_service.check_tourism_expiry_task\",\n            \"schedule\": crontab(hour=8, minute=0),  # Todos los d√≠as a las 8:00 AM\n        },\n    },\n)\n\n# Auto-discover tasks\ncelery_app.autodiscover_tasks([\"app.services\"])\n\n# Import all models to ensure SQLAlchemy registry is populated\nfrom app import models  # noqa - This registers all models\n\n# Explicitly import tasks to ensure they're registered\nfrom app.services import notification_service  # noqa","size_bytes":1038},"app/services/notification_service.py":{"content":"import logging\nfrom datetime import datetime, timedelta\nfrom typing import List\nfrom celery import current_task\nfrom sqlalchemy.orm import Session\n\nfrom app.core.celery_app import celery_app\nfrom app.core.database import get_database\nfrom app.models import Customer  # Import from models module to ensure all models are registered\nfrom app.core.config import settings\n\n# Configurar logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass NotificationService:\n    \"\"\"Servicio para gestionar notificaciones del sistema\"\"\"\n    \n    @staticmethod\n    def get_customers_with_expiring_tourism(db: Session, days_ahead: int = 5) -> List[Customer]:\n        \"\"\"\n        Obtiene clientes cuyo r√©gimen de turismo vence en los pr√≥ximos X d√≠as\n        \"\"\"\n        future_date = datetime.now().date() + timedelta(days=days_ahead)\n        \n        return db.query(Customer).filter(\n            Customer.tourism_regime == True,\n            Customer.tourism_regime_expiry.isnot(None),\n            Customer.tourism_regime_expiry <= future_date,\n            Customer.tourism_regime_expiry >= datetime.now().date()\n        ).all()\n    \n    @staticmethod\n    def send_notification(customer: Customer, days_until_expiry: int) -> bool:\n        \"\"\"\n        Env√≠a notificaci√≥n sobre vencimiento de r√©gimen de turismo\n        Por ahora registra en logs - puede expandirse a email/SMS\n        \"\"\"\n        try:\n            message = (\n                f\"AVISO: R√©gimen de turismo del cliente '{customer.company_name}' \"\n                f\"(ID: {customer.id}) vence en {days_until_expiry} d√≠as \"\n                f\"(Fecha vencimiento: {customer.tourism_regime_expiry})\"\n            )\n            \n            logger.warning(f\"üö® NOTIFICACI√ìN TURISMO: {message}\")\n            \n            # Aqu√≠ se puede expandir para enviar email\n            # send_email_notification(customer, message)\n            \n            return True\n            \n        except Exception as e:\n            logger.error(f\"Error enviando notificaci√≥n para cliente {customer.id}: {str(e)}\")\n            return False\n    \n    @staticmethod\n    def process_expiry_notifications(db: Session) -> dict:\n        \"\"\"\n        Procesa todas las notificaciones de vencimiento\n        \"\"\"\n        result = {\n            \"processed\": 0,\n            \"notifications_sent\": 0,\n            \"errors\": 0,\n            \"customers_notified\": []\n        }\n        \n        try:\n            # Buscar clientes con r√©gimen pr√≥ximo a vencer (5 d√≠as)\n            expiring_customers = NotificationService.get_customers_with_expiring_tourism(db, days_ahead=5)\n            \n            for customer in expiring_customers:\n                result[\"processed\"] += 1\n                \n                # Calcular d√≠as hasta vencimiento\n                days_until = (customer.tourism_regime_expiry - datetime.now().date()).days\n                \n                # Enviar notificaci√≥n\n                if NotificationService.send_notification(customer, days_until):\n                    result[\"notifications_sent\"] += 1\n                    result[\"customers_notified\"].append({\n                        \"id\": customer.id,\n                        \"company_name\": customer.company_name,\n                        \"expiry_date\": customer.tourism_regime_expiry.isoformat(),\n                        \"days_until\": days_until\n                    })\n                else:\n                    result[\"errors\"] += 1\n            \n            logger.info(f\"Procesamiento completado: {result}\")\n            return result\n            \n        except Exception as e:\n            logger.error(f\"Error en proceso de notificaciones: {str(e)}\")\n            result[\"errors\"] += 1\n            return result\n\n@celery_app.task(name=\"app.services.notification_service.check_tourism_expiry_task\")\ndef check_tourism_expiry_task():\n    \"\"\"\n    Task de Celery para verificar vencimientos de r√©gimen de turismo\n    Se ejecuta diariamente a las 8:00 AM\n    \"\"\"\n    logger.info(\"üîç Iniciando verificaci√≥n de vencimientos de r√©gimen de turismo...\")\n    \n    db = None\n    try:\n        # Obtener sesi√≥n de base de datos\n        db_generator = get_database()\n        db = next(db_generator)\n        \n        # Procesar notificaciones\n        result = NotificationService.process_expiry_notifications(db)\n        \n        logger.info(f\"‚úÖ Verificaci√≥n completada: {result}\")\n        return result\n        \n    except Exception as e:\n        error_msg = f\"‚ùå Error en task de verificaci√≥n: {str(e)}\"\n        logger.error(error_msg)\n        raise e\n    \n    finally:\n        try:\n            if db is not None:\n                db.close()\n        except:\n            pass\n\n# Funci√≥n para trigger manual (testing/debug)\ndef trigger_expiry_check_manually():\n    \"\"\"\n    Funci√≥n para ejecutar manualmente la verificaci√≥n de vencimientos\n    √ötil para testing y debug\n    \"\"\"\n    return check_tourism_expiry_task.delay()  # type: ignore","size_bytes":4958},"alembic/versions/eaf3cd424b38_add_deposit_system_tables.py":{"content":"\"\"\"add_deposit_system_tables\n\nRevision ID: eaf3cd424b38\nRevises: 25372ebad3db\nCreate Date: 2025-09-17 05:12:48.232319\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'eaf3cd424b38'\ndown_revision: Union[str, Sequence[str], None] = '25372ebad3db'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('customer_deposit_summary',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('customer_id', sa.Integer(), nullable=False),\n    sa.Column('total_deposits_pyg', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('available_deposits_pyg', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('applied_deposits_pyg', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('total_deposits_usd', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('available_deposits_usd', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('applied_deposits_usd', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('active_deposits_count', sa.Integer(), nullable=False),\n    sa.Column('total_deposits_count', sa.Integer(), nullable=False),\n    sa.Column('last_deposit_date', sa.Date(), nullable=True),\n    sa.Column('last_application_date', sa.Date(), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('customer_id')\n    )\n    op.create_index(op.f('ix_customer_deposit_summary_id'), 'customer_deposit_summary', ['id'], unique=False)\n    op.create_table('deposits',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('deposit_number', sa.String(), nullable=False),\n    sa.Column('customer_id', sa.Integer(), nullable=False),\n    sa.Column('deposit_type', sa.String(), nullable=False),\n    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('currency', sa.String(length=3), nullable=False),\n    sa.Column('deposit_date', sa.Date(), nullable=False),\n    sa.Column('expiry_date', sa.Date(), nullable=True),\n    sa.Column('status', sa.String(), nullable=False),\n    sa.Column('applied_amount', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('available_amount', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('payment_method', sa.String(), nullable=False),\n    sa.Column('reference_number', sa.String(), nullable=True),\n    sa.Column('bank_name', sa.String(), nullable=True),\n    sa.Column('notes', sa.Text(), nullable=True),\n    sa.Column('project_reference', sa.String(), nullable=True),\n    sa.Column('contract_number', sa.String(), nullable=True),\n    sa.Column('created_by_id', sa.Integer(), nullable=False),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),\n    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_deposits_deposit_number'), 'deposits', ['deposit_number'], unique=True)\n    op.create_index(op.f('ix_deposits_id'), 'deposits', ['id'], unique=False)\n    op.create_table('deposit_applications',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('deposit_id', sa.Integer(), nullable=False),\n    sa.Column('invoice_id', sa.Integer(), nullable=False),\n    sa.Column('amount_applied', sa.Numeric(precision=12, scale=2), nullable=False),\n    sa.Column('application_date', sa.Date(), nullable=False),\n    sa.Column('notes', sa.Text(), nullable=True),\n    sa.Column('applied_by_id', sa.Integer(), nullable=False),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.ForeignKeyConstraint(['applied_by_id'], ['users.id'], ),\n    sa.ForeignKeyConstraint(['deposit_id'], ['deposits.id'], ),\n    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),\n    sa.PrimaryKeyConstraint('id')\n    )\n    op.create_index(op.f('ix_deposit_applications_id'), 'deposit_applications', ['id'], unique=False)\n    op.alter_column('users', 'can_manage_inventory',\n               existing_type=sa.BOOLEAN(),\n               nullable=True,\n               existing_server_default=sa.text('false'))\n    op.alter_column('users', 'can_view_reports',\n               existing_type=sa.BOOLEAN(),\n               nullable=True,\n               existing_server_default=sa.text('true'))\n    op.alter_column('users', 'can_manage_tourism_regime',\n               existing_type=sa.BOOLEAN(),\n               nullable=True,\n               existing_server_default=sa.text('false'))\n    op.alter_column('users', 'can_manage_deposits',\n               existing_type=sa.BOOLEAN(),\n               nullable=True,\n               existing_server_default=sa.text('false'))\n    op.alter_column('users', 'can_export_data',\n               existing_type=sa.BOOLEAN(),\n               nullable=True,\n               existing_server_default=sa.text('false'))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.alter_column('users', 'can_export_data',\n               existing_type=sa.BOOLEAN(),\n               nullable=False,\n               existing_server_default=sa.text('false'))\n    op.alter_column('users', 'can_manage_deposits',\n               existing_type=sa.BOOLEAN(),\n               nullable=False,\n               existing_server_default=sa.text('false'))\n    op.alter_column('users', 'can_manage_tourism_regime',\n               existing_type=sa.BOOLEAN(),\n               nullable=False,\n               existing_server_default=sa.text('false'))\n    op.alter_column('users', 'can_view_reports',\n               existing_type=sa.BOOLEAN(),\n               nullable=False,\n               existing_server_default=sa.text('true'))\n    op.alter_column('users', 'can_manage_inventory',\n               existing_type=sa.BOOLEAN(),\n               nullable=False,\n               existing_server_default=sa.text('false'))\n    op.drop_index(op.f('ix_deposit_applications_id'), table_name='deposit_applications')\n    op.drop_table('deposit_applications')\n    op.drop_index(op.f('ix_deposits_id'), table_name='deposits')\n    op.drop_index(op.f('ix_deposits_deposit_number'), table_name='deposits')\n    op.drop_table('deposits')\n    op.drop_index(op.f('ix_customer_deposit_summary_id'), table_name='customer_deposit_summary')\n    op.drop_table('customer_deposit_summary')\n    # ### end Alembic commands ###\n","size_bytes":6918},"app/api/deposits.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, Query\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nfrom datetime import date\n\nfrom app.core.database import get_database\nfrom app.core.dependencies import get_current_active_user, check_user_limits\nfrom app.models.user import User\nfrom app.schemas.deposit import (\n    Deposit, DepositList, DepositCreate, DepositUpdate,\n    DepositApplication, DepositApplicationCreate,\n    ApplyDepositToInvoice, RefundDeposit,\n    CustomerDepositSummary, DepositOperationResponse,\n    DepositType, DepositStatus, Currency\n)\nfrom app.crud.deposit import deposit_crud\n\nrouter = APIRouter(prefix=\"/deposits\", tags=[\"deposits\"])\n\n@router.post(\"/\", response_model=Deposit)\nasync def create_deposit(\n    deposit: DepositCreate,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Crear nuevo dep√≥sito\"\"\"\n    # Verificar permisos\n    if not bool(current_user.can_manage_deposits):\n        raise HTTPException(status_code=403, detail=\"No tiene permisos para gestionar dep√≥sitos\")\n    \n    try:\n        user_id = getattr(current_user, 'id', 0)\n        return deposit_crud.create_deposit(db=db, deposit=deposit, created_by_id=user_id)\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=\"Error interno del servidor\")\n\n@router.get(\"/\", response_model=List[DepositList])\nasync def list_deposits(\n    skip: int = Query(0, ge=0, description=\"N√∫mero de registros a saltar\"),\n    limit: int = Query(100, ge=1, le=1000, description=\"N√∫mero m√°ximo de registros a devolver\"),\n    customer_id: Optional[int] = Query(None, description=\"Filtrar por cliente\"),\n    status: Optional[DepositStatus] = Query(None, description=\"Filtrar por estado\"),\n    deposit_type: Optional[DepositType] = Query(None, description=\"Filtrar por tipo\"),\n    currency: Optional[Currency] = Query(None, description=\"Filtrar por moneda\"),\n    start_date: Optional[date] = Query(None, description=\"Fecha de inicio\"),\n    end_date: Optional[date] = Query(None, description=\"Fecha de fin\"),\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Obtener lista de dep√≥sitos con filtros\"\"\"\n    deposits = deposit_crud.get_deposits(\n        db=db,\n        skip=skip,\n        limit=limit,\n        customer_id=customer_id,\n        status=status.value if status else None,\n        deposit_type=deposit_type.value if deposit_type else None,\n        currency=currency.value if currency else None,\n        start_date=start_date,\n        end_date=end_date\n    )\n    \n    # Convertir a formato de lista\n    deposit_list = []\n    for deposit in deposits:\n        customer_name = deposit.customer.company_name if deposit.customer else \"Cliente desconocido\"\n        \n        deposit_list.append({\n            \"id\": deposit.id,\n            \"deposit_number\": deposit.deposit_number,\n            \"customer_id\": deposit.customer_id,\n            \"customer_name\": customer_name,\n            \"deposit_type\": deposit.deposit_type,\n            \"amount\": deposit.amount,\n            \"currency\": deposit.currency,\n            \"deposit_date\": deposit.deposit_date,\n            \"status\": deposit.status,\n            \"available_amount\": deposit.available_amount,\n            \"created_at\": deposit.created_at\n        })\n    \n    return deposit_list\n\n@router.get(\"/{deposit_id}\", response_model=Deposit)\nasync def get_deposit(\n    deposit_id: int,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Obtener detalles de un dep√≥sito espec√≠fico\"\"\"\n    deposit = deposit_crud.get_deposit(db=db, deposit_id=deposit_id)\n    \n    if not deposit:\n        raise HTTPException(status_code=404, detail=\"Dep√≥sito no encontrado\")\n    \n    # Preparar datos con informaci√≥n del cliente\n    result = {\n        \"id\": deposit.id,\n        \"deposit_number\": deposit.deposit_number,\n        \"customer_id\": deposit.customer_id,\n        \"deposit_type\": deposit.deposit_type,\n        \"amount\": deposit.amount,\n        \"currency\": deposit.currency,\n        \"deposit_date\": deposit.deposit_date,\n        \"expiry_date\": deposit.expiry_date,\n        \"status\": deposit.status,\n        \"applied_amount\": deposit.applied_amount,\n        \"available_amount\": deposit.available_amount,\n        \"payment_method\": deposit.payment_method,\n        \"reference_number\": deposit.reference_number,\n        \"bank_name\": deposit.bank_name,\n        \"notes\": deposit.notes,\n        \"project_reference\": deposit.project_reference,\n        \"contract_number\": deposit.contract_number,\n        \"created_by_id\": deposit.created_by_id,\n        \"created_at\": deposit.created_at,\n        \"updated_at\": deposit.updated_at,\n        \"customer_name\": deposit.customer.company_name if deposit.customer else None\n    }\n    \n    return result\n\n@router.put(\"/{deposit_id}\", response_model=Deposit)\nasync def update_deposit(\n    deposit_id: int,\n    deposit_update: DepositUpdate,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Actualizar dep√≥sito\"\"\"\n    # Verificar permisos\n    if not bool(current_user.can_manage_deposits):\n        raise HTTPException(status_code=403, detail=\"No tiene permisos para gestionar dep√≥sitos\")\n    \n    deposit = deposit_crud.update_deposit(db=db, deposit_id=deposit_id, deposit_update=deposit_update)\n    \n    if not deposit:\n        raise HTTPException(status_code=404, detail=\"Dep√≥sito no encontrado\")\n    \n    return deposit\n\n@router.post(\"/apply-to-invoice\", response_model=DepositApplication)\nasync def apply_deposit_to_invoice(\n    application: ApplyDepositToInvoice,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Aplicar dep√≥sito a una factura\"\"\"\n    # Verificar permisos\n    if not bool(current_user.can_manage_deposits):\n        raise HTTPException(status_code=403, detail=\"No tiene permisos para gestionar dep√≥sitos\")\n    \n    try:\n        user_id = getattr(current_user, 'id', 0)\n        return deposit_crud.apply_deposit_to_invoice(\n            db=db,\n            application=application,\n            applied_by_id=user_id\n        )\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=\"Error interno del servidor\")\n\n@router.post(\"/{deposit_id}/refund\", response_model=DepositOperationResponse)\nasync def refund_deposit(\n    deposit_id: int,\n    refund_data: RefundDeposit,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Devolver dep√≥sito (total o parcial)\"\"\"\n    # Verificar permisos\n    if not bool(current_user.can_manage_deposits):\n        raise HTTPException(status_code=403, detail=\"No tiene permisos para gestionar dep√≥sitos\")\n    \n    try:\n        user_id = getattr(current_user, 'id', 0)\n        updated_deposit = deposit_crud.refund_deposit(\n            db=db,\n            deposit_id=deposit_id,\n            refund_data=refund_data,\n            refunded_by_id=user_id\n        )\n        \n        return {\n            \"success\": True,\n            \"message\": f\"Devoluci√≥n de {refund_data.refund_amount} {updated_deposit.currency} procesada exitosamente\",\n            \"deposit_id\": deposit_id,\n            \"new_available_amount\": updated_deposit.available_amount\n        }\n    except ValueError as e:\n        raise HTTPException(status_code=400, detail=str(e))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=\"Error interno del servidor\")\n\n@router.get(\"/customer/{customer_id}\", response_model=List[Deposit])\nasync def get_customer_deposits(\n    customer_id: int,\n    active_only: bool = Query(False, description=\"Solo dep√≥sitos activos\"),\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Obtener dep√≥sitos de un cliente espec√≠fico\"\"\"\n    deposits = deposit_crud.get_customer_deposits(\n        db=db,\n        customer_id=customer_id,\n        active_only=active_only\n    )\n    \n    return deposits\n\n@router.get(\"/customer/{customer_id}/summary\", response_model=CustomerDepositSummary)\nasync def get_customer_deposit_summary(\n    customer_id: int,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Obtener resumen de dep√≥sitos de un cliente\"\"\"\n    summary = deposit_crud.get_customer_deposit_summary(db=db, customer_id=customer_id)\n    \n    if not summary:\n        # Si no existe resumen, crear uno vac√≠o\n        summary = {\n            \"customer_id\": customer_id,\n            \"customer_name\": None,\n            \"total_deposits_pyg\": 0,\n            \"available_deposits_pyg\": 0,\n            \"applied_deposits_pyg\": 0,\n            \"total_deposits_usd\": 0,\n            \"available_deposits_usd\": 0,\n            \"applied_deposits_usd\": 0,\n            \"active_deposits_count\": 0,\n            \"total_deposits_count\": 0,\n            \"last_deposit_date\": None,\n            \"last_application_date\": None,\n            \"updated_at\": None\n        }\n    \n    return summary\n\n@router.post(\"/customer/{customer_id}/update-summary\")\nasync def update_customer_deposit_summary(\n    customer_id: int,\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Actualizar manualmente el resumen de dep√≥sitos de un cliente\"\"\"\n    # Verificar permisos (solo admin/manager)\n    if current_user.role not in [\"admin\", \"manager\"]:\n        raise HTTPException(status_code=403, detail=\"Solo administradores y gerentes pueden actualizar res√∫menes\")\n    \n    try:\n        deposit_crud.update_customer_deposit_summary(db=db, customer_id=customer_id)\n        return {\"message\": \"Resumen de dep√≥sitos actualizado exitosamente\"}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=\"Error actualizando resumen\")\n\n# Endpoints de reportes\n@router.get(\"/reports/summary\")\nasync def get_deposits_summary_report(\n    start_date: Optional[date] = Query(None, description=\"Fecha de inicio\"),\n    end_date: Optional[date] = Query(None, description=\"Fecha de fin\"),\n    currency: Optional[Currency] = Query(None, description=\"Filtrar por moneda\"),\n    current_user: User = Depends(get_current_active_user),\n    db: Session = Depends(get_database)\n):\n    \"\"\"Reporte resumen de dep√≥sitos\"\"\"\n    # Verificar permisos\n    if not bool(current_user.can_view_reports):\n        raise HTTPException(status_code=403, detail=\"No tiene permisos para ver reportes\")\n    \n    # L√≥gica b√°sica de reporte\n    deposits = deposit_crud.get_deposits(\n        db=db,\n        skip=0,\n        limit=10000,  # Obtener todos para el reporte\n        currency=currency.value if currency else None,\n        start_date=start_date,\n        end_date=end_date\n    )\n    \n    # Calcular estad√≠sticas\n    total_deposits = sum(d.amount for d in deposits)\n    total_available = sum(d.available_amount for d in deposits)\n    total_applied = sum(d.applied_amount for d in deposits)\n    \n    by_type = {}\n    by_status = {}\n    \n    for deposit in deposits:\n        # Por tipo\n        if deposit.deposit_type not in by_type:\n            by_type[deposit.deposit_type] = {\"count\": 0, \"amount\": 0}\n        by_type[deposit.deposit_type][\"count\"] += 1\n        by_type[deposit.deposit_type][\"amount\"] += deposit.amount\n        \n        # Por estado\n        if deposit.status not in by_status:\n            by_status[deposit.status] = {\"count\": 0, \"amount\": 0}\n        by_status[deposit.status][\"count\"] += 1\n        by_status[deposit.status][\"amount\"] += deposit.amount\n    \n    return {\n        \"period\": {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"currency\": currency.value if currency else \"ALL\"\n        },\n        \"totals\": {\n            \"total_deposits\": total_deposits,\n            \"total_available\": total_available,\n            \"total_applied\": total_applied,\n            \"deposit_count\": len(deposits)\n        },\n        \"by_type\": by_type,\n        \"by_status\": by_status\n    }","size_bytes":12250},"app/crud/deposit.py":{"content":"from sqlalchemy.orm import Session, joinedload\nfrom sqlalchemy import func, and_, desc, asc\nfrom typing import List, Optional, Any\nfrom datetime import date, datetime\nfrom decimal import Decimal\n\nfrom app.models.deposit import Deposit, DepositApplication, CustomerDepositSummary, DepositType, DepositStatus\nfrom app.models.customer import Customer\nfrom app.models.invoice import Invoice\nfrom app.models.user import User\nfrom app.schemas.deposit import (\n    DepositCreate, DepositUpdate, DepositApplicationCreate,\n    ApplyDepositToInvoice, RefundDeposit, Currency\n)\n\nclass DepositCRUD:\n    def __init__(self):\n        pass\n\n    def generate_deposit_number(self, db: Session) -> str:\n        \"\"\"Generar n√∫mero de dep√≥sito con formato DEP2025090001\"\"\"\n        today = date.today()\n        year = today.year\n        month = today.month\n        \n        # Buscar el √∫ltimo n√∫mero de dep√≥sito del mes actual\n        prefix = f\"DEP{year}{month:02d}\"\n        last_deposit = db.query(Deposit).filter(\n            Deposit.deposit_number.like(f\"{prefix}%\")\n        ).order_by(desc(Deposit.deposit_number)).first()\n        \n        if last_deposit:\n            # Extraer el n√∫mero secuencial del √∫ltimo n√∫mero\n            deposit_number_str = str(last_deposit.deposit_number)\n            last_number = int(deposit_number_str[-4:])\n            new_number = last_number + 1\n        else:\n            new_number = 1\n            \n        return f\"{prefix}{new_number:04d}\"\n\n    def create_deposit(self, db: Session, deposit: DepositCreate, created_by_id: int) -> Deposit:\n        \"\"\"Crear nuevo dep√≥sito\"\"\"\n        # Verificar que el cliente existe\n        customer = db.query(Customer).filter(Customer.id == deposit.customer_id).first()\n        if not customer:\n            raise ValueError(\"Cliente no encontrado\")\n        \n        # Generar n√∫mero de dep√≥sito\n        deposit_number = self.generate_deposit_number(db)\n        \n        # Crear dep√≥sito\n        db_deposit = Deposit(\n            deposit_number=deposit_number,\n            customer_id=deposit.customer_id,\n            deposit_type=deposit.deposit_type,\n            amount=deposit.amount,\n            currency=deposit.currency,\n            deposit_date=deposit.deposit_date,\n            expiry_date=deposit.expiry_date,\n            status=DepositStatus.ACTIVE,\n            applied_amount=Decimal('0'),\n            available_amount=deposit.amount,\n            payment_method=deposit.payment_method,\n            reference_number=deposit.reference_number,\n            bank_name=deposit.bank_name,\n            notes=deposit.notes,\n            project_reference=deposit.project_reference,\n            contract_number=deposit.contract_number,\n            created_by_id=created_by_id\n        )\n        \n        db.add(db_deposit)\n        db.commit()\n        db.refresh(db_deposit)\n        \n        # Actualizar resumen del cliente\n        self.update_customer_deposit_summary(db, int(deposit.customer_id))  # type: ignore\n        \n        return db_deposit\n\n    def get_deposit(self, db: Session, deposit_id: int) -> Optional[Deposit]:\n        \"\"\"Obtener dep√≥sito por ID con detalles\"\"\"\n        return db.query(Deposit).options(\n            joinedload(Deposit.customer),\n            joinedload(Deposit.created_by),\n            joinedload(Deposit.applications)\n        ).filter(Deposit.id == deposit_id).first()\n\n    def get_deposits(self, db: Session, skip: int = 0, limit: int = 100,\n                    customer_id: Optional[int] = None,\n                    status: Optional[str] = None,\n                    deposit_type: Optional[str] = None,\n                    currency: Optional[str] = None,\n                    start_date: Optional[date] = None,\n                    end_date: Optional[date] = None) -> List[Deposit]:\n        \"\"\"Obtener lista de dep√≥sitos con filtros\"\"\"\n        query = db.query(Deposit).join(Customer)\n        \n        # Aplicar filtros\n        if customer_id:\n            query = query.filter(Deposit.customer_id == customer_id)\n        \n        if status:\n            query = query.filter(Deposit.status == status)\n            \n        if deposit_type:\n            query = query.filter(Deposit.deposit_type == deposit_type)\n            \n        if currency:\n            query = query.filter(Deposit.currency == currency)\n        \n        if start_date:\n            query = query.filter(Deposit.deposit_date >= start_date)\n            \n        if end_date:\n            query = query.filter(Deposit.deposit_date <= end_date)\n        \n        return query.order_by(desc(Deposit.created_at)).offset(skip).limit(limit).all()\n\n    def update_deposit(self, db: Session, deposit_id: int, deposit_update: DepositUpdate) -> Optional[Deposit]:\n        \"\"\"Actualizar dep√≥sito\"\"\"\n        db_deposit = db.query(Deposit).filter(Deposit.id == deposit_id).first()\n        \n        if not db_deposit:\n            return None\n        \n        # Actualizar campos\n        for field, value in deposit_update.dict(exclude_unset=True).items():\n            setattr(db_deposit, field, value)\n        \n        db.commit()\n        db.refresh(db_deposit)\n        return db_deposit\n\n    def apply_deposit_to_invoice(self, db: Session, application: ApplyDepositToInvoice, applied_by_id: int) -> DepositApplication:\n        \"\"\"Aplicar dep√≥sito a una factura\"\"\"\n        # Verificar que el dep√≥sito existe y est√° activo\n        deposit = db.query(Deposit).filter(Deposit.id == application.deposit_id).first()\n        if not deposit:\n            raise ValueError(\"Dep√≥sito no encontrado\")\n        \n        if str(deposit.status) != DepositStatus.ACTIVE:  # type: ignore\n            raise ValueError(\"Solo se pueden aplicar dep√≥sitos activos\")\n        \n        # Verificar que la factura existe\n        invoice = db.query(Invoice).filter(Invoice.id == application.invoice_id).first()\n        if not invoice:\n            raise ValueError(\"Factura no encontrada\")\n        \n        # Verificar que el dep√≥sito y la factura son del mismo cliente\n        if int(deposit.customer_id) != int(invoice.customer_id):  # type: ignore\n            raise ValueError(\"El dep√≥sito y la factura deben ser del mismo cliente\")\n        \n        # Verificar que las monedas coinciden\n        if str(deposit.currency) != str(invoice.currency):  # type: ignore\n            raise ValueError(f\"La moneda del dep√≥sito ({deposit.currency}) no coincide con la moneda de la factura ({invoice.currency})\")\n        \n        # Verificar que hay saldo disponible\n        available_amt = Decimal(str(deposit.available_amount))  # type: ignore\n        if application.amount_to_apply > available_amt:\n            raise ValueError(f\"Monto a aplicar ({application.amount_to_apply}) excede el disponible ({available_amt})\")\n        \n        # Verificar que no excede el balance de la factura\n        balance_due = Decimal(str(invoice.balance_due))  # type: ignore\n        if application.amount_to_apply > balance_due:\n            raise ValueError(f\"Monto a aplicar ({application.amount_to_apply}) excede el balance de la factura ({balance_due})\")\n        \n        # Crear la aplicaci√≥n\n        db_application = DepositApplication(\n            deposit_id=application.deposit_id,\n            invoice_id=application.invoice_id,\n            amount_applied=application.amount_to_apply,\n            application_date=date.today(),\n            notes=application.notes,\n            applied_by_id=applied_by_id\n        )\n        \n        db.add(db_application)\n        \n        # Actualizar el dep√≥sito\n        new_applied = Decimal(str(deposit.applied_amount)) + application.amount_to_apply  # type: ignore\n        new_available = Decimal(str(deposit.available_amount)) - application.amount_to_apply  # type: ignore\n        deposit.applied_amount = new_applied  # type: ignore\n        deposit.available_amount = new_available  # type: ignore\n        \n        # Si el dep√≥sito se agot√≥, cambiar estado\n        if new_available <= 0:\n            deposit.status = DepositStatus.APPLIED  # type: ignore\n        \n        # Actualizar la factura\n        new_paid = Decimal(str(invoice.paid_amount)) + application.amount_to_apply  # type: ignore\n        new_balance = Decimal(str(invoice.balance_due)) - application.amount_to_apply  # type: ignore\n        invoice.paid_amount = new_paid  # type: ignore\n        invoice.balance_due = new_balance  # type: ignore\n        \n        # Actualizar estado de la factura si est√° totalmente pagada\n        if new_balance <= 0:\n            invoice.status = \"PAID\"  # type: ignore\n        \n        db.commit()\n        db.refresh(db_application)\n        \n        # Actualizar resumen del cliente\n        self.update_customer_deposit_summary(db, int(deposit.customer_id))  # type: ignore\n        \n        return db_application\n\n    def refund_deposit(self, db: Session, deposit_id: int, refund_data: RefundDeposit, refunded_by_id: int) -> Deposit:\n        \"\"\"Devolver dep√≥sito (total o parcial)\"\"\"\n        deposit = db.query(Deposit).filter(Deposit.id == deposit_id).first()\n        if not deposit:\n            raise ValueError(\"Dep√≥sito no encontrado\")\n        \n        if str(deposit.status) not in [DepositStatus.ACTIVE, DepositStatus.APPLIED]:  # type: ignore\n            raise ValueError(\"Solo se pueden devolver dep√≥sitos activos o aplicados\")\n        \n        # Verificar que no excede el monto disponible\n        available_amt = Decimal(str(deposit.available_amount))  # type: ignore\n        if refund_data.refund_amount > available_amt:\n            raise ValueError(f\"Monto a devolver ({refund_data.refund_amount}) excede el disponible ({available_amt})\")\n        \n        # Actualizar el dep√≥sito\n        current_available = Decimal(str(deposit.available_amount))  # type: ignore\n        new_available = current_available - refund_data.refund_amount\n        deposit.available_amount = new_available  # type: ignore\n        \n        # Si se devolvi√≥ todo el saldo disponible, cambiar estado\n        if new_available <= 0:\n            deposit.status = DepositStatus.REFUNDED  # type: ignore\n        \n        # Agregar nota de devoluci√≥n\n        refund_note = f\"DEVOLUCI√ìN: {refund_data.refund_amount} {str(deposit.currency)} - {refund_data.refund_reason}\"  # type: ignore\n        current_notes = str(deposit.notes) if deposit.notes else None  # type: ignore\n        if current_notes:\n            deposit.notes = f\"{current_notes}\\n{refund_note}\"  # type: ignore\n        else:\n            deposit.notes = refund_note  # type: ignore\n        \n        db.commit()\n        db.refresh(deposit)\n        \n        # Actualizar resumen del cliente\n        self.update_customer_deposit_summary(db, int(deposit.customer_id))  # type: ignore\n        \n        return deposit\n\n    def get_customer_deposits(self, db: Session, customer_id: int, active_only: bool = False) -> List[Deposit]:\n        \"\"\"Obtener dep√≥sitos de un cliente espec√≠fico\"\"\"\n        query = db.query(Deposit).filter(Deposit.customer_id == customer_id)\n        \n        if active_only:\n            query = query.filter(Deposit.status == DepositStatus.ACTIVE)\n        \n        return query.order_by(desc(Deposit.created_at)).all()\n\n    def get_customer_deposit_summary(self, db: Session, customer_id: int) -> Optional[CustomerDepositSummary]:\n        \"\"\"Obtener resumen de dep√≥sitos de un cliente\"\"\"\n        return db.query(CustomerDepositSummary).filter(\n            CustomerDepositSummary.customer_id == customer_id\n        ).first()\n\n    def update_customer_deposit_summary(self, db: Session, customer_id: int):\n        \"\"\"Actualizar resumen de dep√≥sitos de un cliente\"\"\"\n        # Calcular saldos por moneda\n        pyg_totals = db.query(\n            func.coalesce(func.sum(Deposit.amount), 0).label('total'),\n            func.coalesce(func.sum(Deposit.available_amount), 0).label('available'),\n            func.coalesce(func.sum(Deposit.applied_amount), 0).label('applied'),\n            func.count(Deposit.id).label('count'),\n            func.count(Deposit.id).filter(Deposit.status == DepositStatus.ACTIVE).label('active_count')\n        ).filter(\n            Deposit.customer_id == customer_id,\n            Deposit.currency == 'PYG'\n        ).first()\n        \n        usd_totals = db.query(\n            func.coalesce(func.sum(Deposit.amount), 0).label('total'),\n            func.coalesce(func.sum(Deposit.available_amount), 0).label('available'),\n            func.coalesce(func.sum(Deposit.applied_amount), 0).label('applied'),\n            func.count(Deposit.id).label('count'),\n            func.count(Deposit.id).filter(Deposit.status == DepositStatus.ACTIVE).label('active_count')\n        ).filter(\n            Deposit.customer_id == customer_id,\n            Deposit.currency == 'USD'\n        ).first()\n        \n        # Obtener fechas importantes\n        last_deposit = db.query(func.max(Deposit.deposit_date)).filter(\n            Deposit.customer_id == customer_id\n        ).scalar()\n        \n        last_application = db.query(func.max(DepositApplication.application_date)).join(\n            Deposit\n        ).filter(Deposit.customer_id == customer_id).scalar()\n        \n        # Buscar resumen existente o crear nuevo\n        summary = db.query(CustomerDepositSummary).filter(\n            CustomerDepositSummary.customer_id == customer_id\n        ).first()\n        \n        if not summary:\n            summary = CustomerDepositSummary(customer_id=customer_id)\n            db.add(summary)\n        \n        # Actualizar valores\n        summary.total_deposits_pyg = Decimal(str(getattr(pyg_totals, 'total', 0) or 0))  # type: ignore\n        summary.available_deposits_pyg = Decimal(str(getattr(pyg_totals, 'available', 0) or 0))  # type: ignore\n        summary.applied_deposits_pyg = Decimal(str(getattr(pyg_totals, 'applied', 0) or 0))  # type: ignore\n        \n        summary.total_deposits_usd = Decimal(str(getattr(usd_totals, 'total', 0) or 0))  # type: ignore\n        summary.available_deposits_usd = Decimal(str(getattr(usd_totals, 'available', 0) or 0))  # type: ignore\n        summary.applied_deposits_usd = Decimal(str(getattr(usd_totals, 'applied', 0) or 0))  # type: ignore\n        \n        pyg_count = int(getattr(pyg_totals, 'count', 0) or 0)\n        usd_count = int(getattr(usd_totals, 'count', 0) or 0)\n        summary.total_deposits_count = pyg_count + usd_count  # type: ignore\n        \n        pyg_active = int(getattr(pyg_totals, 'active_count', 0) or 0)\n        usd_active = int(getattr(usd_totals, 'active_count', 0) or 0)\n        summary.active_deposits_count = pyg_active + usd_active  # type: ignore\n        \n        summary.last_deposit_date = last_deposit  # type: ignore\n        summary.last_application_date = last_application  # type: ignore\n        summary.updated_at = datetime.now()  # type: ignore\n        \n        db.commit()\n\n# Instancia global\ndeposit_crud = DepositCRUD()","size_bytes":14840},"app/models/deposit.py":{"content":"from sqlalchemy import Column, Integer, String, Numeric, DateTime, Date, Text, ForeignKey, Boolean\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\n\nclass DepositType:\n    \"\"\"Tipos de dep√≥sito espec√≠ficos para Paraguay\"\"\"\n    ADVANCE = \"ANTICIPO\"        # Anticipo sobre trabajo futuro\n    EARNEST = \"SE√ëA\"           # Se√±a para reservar producto/servicio\n    GUARANTEE = \"GARANTIA\"      # Garant√≠a de cumplimiento\n    SECURITY = \"CAUCION\"        # Cauci√≥n para contratos\n    PARTIAL = \"PARCIAL\"         # Pago parcial a cuenta\n\nclass DepositStatus:\n    \"\"\"Estados de dep√≥sito\"\"\"\n    ACTIVE = \"ACTIVO\"           # Dep√≥sito disponible para aplicar\n    APPLIED = \"APLICADO\"        # Dep√≥sito aplicado a facturas\n    REFUNDED = \"DEVUELTO\"       # Dep√≥sito devuelto al cliente\n    EXPIRED = \"VENCIDO\"         # Dep√≥sito vencido (si aplica)\n\nclass Deposit(Base):\n    \"\"\"\n    Modelo para gesti√≥n de dep√≥sitos independientes\n    Espec√≠fico para procesos financieros de Paraguay\n    \"\"\"\n    __tablename__ = \"deposits\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    deposit_number = Column(String, unique=True, index=True, nullable=False)\n    customer_id = Column(Integer, ForeignKey(\"customers.id\"), nullable=False)\n    \n    # Informaci√≥n del dep√≥sito\n    deposit_type = Column(String, nullable=False)  # ANTICIPO, SE√ëA, GARANTIA, etc.\n    amount = Column(Numeric(12, 2), nullable=False)\n    currency = Column(String(3), default=\"PYG\", nullable=False)  # PYG, USD\n    \n    # Control de fechas\n    deposit_date = Column(Date, nullable=False)\n    expiry_date = Column(Date, nullable=True)  # Para garant√≠as con vencimiento\n    \n    # Estado y aplicaci√≥n\n    status = Column(String, default=DepositStatus.ACTIVE, nullable=False)\n    applied_amount = Column(Numeric(12, 2), default=0, nullable=False)\n    available_amount = Column(Numeric(12, 2), nullable=False)  # amount - applied_amount\n    \n    # Informaci√≥n de pago\n    payment_method = Column(String, nullable=False)  # CASH, TRANSFER, CHECK, CARD\n    reference_number = Column(String, nullable=True)\n    bank_name = Column(String, nullable=True)  # Para transferencias/cheques\n    \n    # Informaci√≥n adicional Paraguay\n    notes = Column(Text, nullable=True)\n    project_reference = Column(String, nullable=True)  # Referencia del proyecto/trabajo\n    contract_number = Column(String, nullable=True)   # N√∫mero de contrato asociado\n    \n    # Auditor√≠a\n    created_by_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    # Relaciones\n    customer = relationship(\"Customer\", back_populates=\"deposits\")\n    created_by = relationship(\"User\")\n    applications = relationship(\"DepositApplication\", back_populates=\"deposit\")\n\nclass DepositApplication(Base):\n    \"\"\"\n    Registro de aplicaci√≥n de dep√≥sitos a facturas\n    Para auditor√≠a y control detallado\n    \"\"\"\n    __tablename__ = \"deposit_applications\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    deposit_id = Column(Integer, ForeignKey(\"deposits.id\"), nullable=False)\n    invoice_id = Column(Integer, ForeignKey(\"invoices.id\"), nullable=False)\n    \n    # Informaci√≥n de la aplicaci√≥n\n    amount_applied = Column(Numeric(12, 2), nullable=False)\n    application_date = Column(Date, nullable=False)\n    notes = Column(Text, nullable=True)\n    \n    # Auditor√≠a\n    applied_by_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Relaciones\n    deposit = relationship(\"Deposit\", back_populates=\"applications\")\n    invoice = relationship(\"Invoice\")\n    applied_by = relationship(\"User\")\n\nclass CustomerDepositSummary(Base):\n    \"\"\"\n    Vista/tabla para resumen r√°pido de dep√≥sitos por cliente\n    Optimiza consultas frecuentes\n    \"\"\"\n    __tablename__ = \"customer_deposit_summary\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    customer_id = Column(Integer, ForeignKey(\"customers.id\"), unique=True, nullable=False)\n    \n    # Saldos por moneda\n    total_deposits_pyg = Column(Numeric(12, 2), default=0, nullable=False)\n    available_deposits_pyg = Column(Numeric(12, 2), default=0, nullable=False)\n    applied_deposits_pyg = Column(Numeric(12, 2), default=0, nullable=False)\n    \n    total_deposits_usd = Column(Numeric(12, 2), default=0, nullable=False)\n    available_deposits_usd = Column(Numeric(12, 2), default=0, nullable=False)\n    applied_deposits_usd = Column(Numeric(12, 2), default=0, nullable=False)\n    \n    # Contadores\n    active_deposits_count = Column(Integer, default=0, nullable=False)\n    total_deposits_count = Column(Integer, default=0, nullable=False)\n    \n    # Informaci√≥n de control\n    last_deposit_date = Column(Date, nullable=True)\n    last_application_date = Column(Date, nullable=True)\n    \n    # Auditor√≠a\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    # Relaciones\n    customer = relationship(\"Customer\", back_populates=\"deposit_summary\")","size_bytes":5194},"app/schemas/deposit.py":{"content":"from pydantic import BaseModel, Field, validator\nfrom decimal import Decimal\nfrom datetime import date, datetime\nfrom typing import Optional, List\nfrom enum import Enum\n\nclass DepositType(str, Enum):\n    \"\"\"Tipos de dep√≥sito espec√≠ficos para Paraguay\"\"\"\n    ADVANCE = \"ANTICIPO\"        # Anticipo sobre trabajo futuro\n    EARNEST = \"SE√ëA\"           # Se√±a para reservar producto/servicio\n    GUARANTEE = \"GARANTIA\"      # Garant√≠a de cumplimiento\n    SECURITY = \"CAUCION\"        # Cauci√≥n para contratos\n    PARTIAL = \"PARCIAL\"         # Pago parcial a cuenta\n\nclass DepositStatus(str, Enum):\n    \"\"\"Estados de dep√≥sito\"\"\"\n    ACTIVE = \"ACTIVO\"           # Dep√≥sito disponible para aplicar\n    APPLIED = \"APLICADO\"        # Dep√≥sito aplicado a facturas\n    REFUNDED = \"DEVUELTO\"       # Dep√≥sito devuelto al cliente\n    EXPIRED = \"VENCIDO\"         # Dep√≥sito vencido (si aplica)\n\nclass Currency(str, Enum):\n    \"\"\"Monedas soportadas en Paraguay\"\"\"\n    PYG = \"PYG\"  # Guaran√≠es\n    USD = \"USD\"  # D√≥lares\n\nclass PaymentMethod(str, Enum):\n    \"\"\"M√©todos de pago para dep√≥sitos\"\"\"\n    CASH = \"CASH\"\n    TRANSFER = \"TRANSFER\"\n    CHECK = \"CHECK\"\n    CARD = \"CARD\"\n\n# Schemas para Deposit\nclass DepositBase(BaseModel):\n    customer_id: int\n    deposit_type: DepositType\n    amount: Decimal = Field(..., gt=0, description=\"Monto debe ser mayor a 0\")\n    currency: Currency = Currency.PYG\n    deposit_date: date\n    expiry_date: Optional[date] = None\n    payment_method: PaymentMethod\n    reference_number: Optional[str] = None\n    bank_name: Optional[str] = None\n    notes: Optional[str] = None\n    project_reference: Optional[str] = None\n    contract_number: Optional[str] = None\n\n    @validator('expiry_date')\n    def validate_expiry_date(cls, v, values):\n        if v and 'deposit_date' in values and v <= values['deposit_date']:\n            raise ValueError('Fecha de vencimiento debe ser posterior a la fecha del dep√≥sito')\n        return v\n\nclass DepositCreate(DepositBase):\n    pass\n\nclass DepositUpdate(BaseModel):\n    deposit_type: Optional[DepositType] = None\n    expiry_date: Optional[date] = None\n    payment_method: Optional[PaymentMethod] = None\n    reference_number: Optional[str] = None\n    bank_name: Optional[str] = None\n    notes: Optional[str] = None\n    project_reference: Optional[str] = None\n    contract_number: Optional[str] = None\n\nclass Deposit(DepositBase):\n    id: int\n    deposit_number: str\n    status: DepositStatus\n    applied_amount: Decimal\n    available_amount: Decimal\n    created_by_id: int\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n    \n    # Informaci√≥n del cliente para mostrar\n    customer_name: Optional[str] = None\n    \n    class Config:\n        from_attributes = True\n\nclass DepositList(BaseModel):\n    \"\"\"Schema para lista de dep√≥sitos\"\"\"\n    id: int\n    deposit_number: str\n    customer_id: int\n    customer_name: str\n    deposit_type: DepositType\n    amount: Decimal\n    currency: Currency\n    deposit_date: date\n    status: DepositStatus\n    available_amount: Decimal\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# Schemas para DepositApplication\nclass DepositApplicationBase(BaseModel):\n    deposit_id: int\n    invoice_id: int\n    amount_applied: Decimal = Field(..., gt=0, description=\"Monto a aplicar debe ser mayor a 0\")\n    application_date: date\n    notes: Optional[str] = None\n\nclass DepositApplicationCreate(DepositApplicationBase):\n    pass\n\nclass DepositApplication(DepositApplicationBase):\n    id: int\n    applied_by_id: int\n    created_at: datetime\n    \n    # Informaci√≥n adicional para mostrar\n    deposit_number: Optional[str] = None\n    invoice_number: Optional[str] = None\n    \n    class Config:\n        from_attributes = True\n\n# Schemas para CustomerDepositSummary\nclass CustomerDepositSummary(BaseModel):\n    customer_id: int\n    customer_name: Optional[str] = None\n    \n    # Saldos en Guaran√≠es\n    total_deposits_pyg: Decimal\n    available_deposits_pyg: Decimal\n    applied_deposits_pyg: Decimal\n    \n    # Saldos en D√≥lares\n    total_deposits_usd: Decimal\n    available_deposits_usd: Decimal\n    applied_deposits_usd: Decimal\n    \n    # Contadores\n    active_deposits_count: int\n    total_deposits_count: int\n    \n    # Fechas importantes\n    last_deposit_date: Optional[date] = None\n    last_application_date: Optional[date] = None\n    updated_at: Optional[datetime] = None\n    \n    class Config:\n        from_attributes = True\n\n# Schemas para operaciones espec√≠ficas\nclass ApplyDepositToInvoice(BaseModel):\n    \"\"\"Schema para aplicar dep√≥sito a factura\"\"\"\n    deposit_id: int\n    invoice_id: int\n    amount_to_apply: Decimal = Field(..., gt=0, description=\"Monto a aplicar debe ser mayor a 0\")\n    notes: Optional[str] = None\n\nclass RefundDeposit(BaseModel):\n    \"\"\"Schema para devolver dep√≥sito\"\"\"\n    refund_amount: Decimal = Field(..., gt=0, description=\"Monto a devolver debe ser mayor a 0\")\n    refund_reason: str\n    refund_method: PaymentMethod\n    reference_number: Optional[str] = None\n    notes: Optional[str] = None\n\nclass DepositReport(BaseModel):\n    \"\"\"Schema para reportes de dep√≥sitos\"\"\"\n    period_start: date\n    period_end: date\n    total_deposits: Decimal\n    total_applications: Decimal\n    total_refunds: Decimal\n    deposit_count: int\n    currency: Currency\n\n# Respuestas de operaciones\nclass DepositOperationResponse(BaseModel):\n    \"\"\"Respuesta gen√©rica para operaciones de dep√≥sitos\"\"\"\n    success: bool\n    message: str\n    deposit_id: Optional[int] = None\n    new_available_amount: Optional[Decimal] = None","size_bytes":5584},"alembic/versions/4e9f6f26e197_add_currency_field_to_invoices.py":{"content":"\"\"\"add_currency_field_to_invoices\n\nRevision ID: 4e9f6f26e197\nRevises: eaf3cd424b38\nCreate Date: 2025-09-17 05:19:23.672630\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '4e9f6f26e197'\ndown_revision: Union[str, Sequence[str], None] = 'eaf3cd424b38'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    # Add currency column as nullable first\n    op.add_column('invoices', sa.Column('currency', sa.String(length=3), nullable=True))\n    \n    # Update existing invoices to have default currency PYG\n    op.execute(\"UPDATE invoices SET currency = 'PYG' WHERE currency IS NULL\")\n    \n    # Now make the column non-nullable\n    op.alter_column('invoices', 'currency', nullable=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('invoices', 'currency')\n    # ### end Alembic commands ###\n","size_bytes":1185},"frontend/src/context/AuthContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { apiService } from '../services/api';\n\ninterface User {\n  id: number;\n  username: string;\n  full_name: string;\n  email: string;\n  role: string;\n  is_active: boolean;\n  can_create_customers: boolean;\n  can_create_quotes: boolean;\n  can_manage_deposits: boolean;\n  can_view_reports: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (username: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Verificar si hay un token guardado\n    const token = localStorage.getItem('token');\n    if (token) {\n      apiService.setToken(token);\n      // Verificar si el token es v√°lido\n      fetchUserProfile();\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const fetchUserProfile = async () => {\n    try {\n      const userData = await apiService.getCurrentUser();\n      setUser(userData);\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      localStorage.removeItem('token');\n      apiService.setToken(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (username: string, password: string): Promise<boolean> => {\n    try {\n      setIsLoading(true);\n      const response = await apiService.login(username, password);\n      \n      if (response.access_token) {\n        localStorage.setItem('token', response.access_token);\n        apiService.setToken(response.access_token);\n        \n        // Obtener datos del usuario\n        const userData = await apiService.getCurrentUser();\n        setUser(userData);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error al iniciar sesi√≥n:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    apiService.setToken(null);\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n    isLoading,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};","size_bytes":2651},"frontend/src/pages/Customers.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControlLabel,\n  Switch,\n  Grid,\n  Alert,\n  CircularProgress,\n  Tooltip,\n  Card,\n  CardContent,\n  CardActions,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  PictureAsPdf as PdfIcon,\n  CloudUpload as UploadIcon,\n  Download as DownloadIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckIcon,\n  Business as BusinessIcon,\n  Person as PersonIcon,\n  LocationOn as LocationIcon,\n  MonetizationOn as MoneyIcon,\n  Notes as NotesIcon,\n  AttachFile as AttachFileIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { apiService } from '../services/api';\n\ninterface Customer {\n  id: number;\n  company_name: string;\n  contact_name?: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  country: string;\n  tax_id?: string;\n  credit_limit: number;\n  payment_terms: number;\n  is_active: boolean;\n  tourism_regime: boolean;\n  tourism_regime_pdf?: string;\n  tourism_regime_expiry?: string;\n  notes?: string;\n}\n\nexport default function Customers() {\n  const { user } = useAuth();\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  // File upload is now integrated into the main form\n  \n  // Estados para manejo de archivos y validaciones\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [fileError, setFileError] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n  const [emailError, setEmailError] = useState('');\n  const [rucError, setRucError] = useState('');\n  \n  // Formulario\n  const [formData, setFormData] = useState({\n    company_name: '',\n    contact_name: '',\n    email: '',\n    phone: '',\n    address: '',\n    city: '',\n    country: 'Paraguay',\n    tax_id: '',\n    credit_limit: 0,\n    payment_terms: 30,\n    is_active: true,\n    tourism_regime: false,\n    tourism_regime_expiry: '',\n    notes: '',\n  });\n\n  useEffect(() => {\n    loadCustomers();\n  }, []);\n\n  const loadCustomers = async () => {\n    try {\n      setLoading(true);\n      const data = await apiService.getCustomers({ limit: 1000 });\n      setCustomers(data);\n    } catch (err) {\n      setError('Error al cargar clientes');\n      console.error('Error loading customers:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOpenDialog = (customer?: Customer) => {\n    if (customer) {\n      setEditingCustomer(customer);\n      setFormData({\n        company_name: customer.company_name,\n        contact_name: customer.contact_name || '',\n        email: customer.email || '',\n        phone: customer.phone || '',\n        address: customer.address || '',\n        city: customer.city || '',\n        country: customer.country,\n        tax_id: customer.tax_id || '',\n        credit_limit: customer.credit_limit,\n        payment_terms: customer.payment_terms,\n        is_active: customer.is_active,\n        tourism_regime: customer.tourism_regime,\n        tourism_regime_expiry: customer.tourism_regime_expiry || '',\n        notes: customer.notes || '',\n      });\n    } else {\n      setEditingCustomer(null);\n      setFormData({\n        company_name: '',\n        contact_name: '',\n        email: '',\n        phone: '',\n        address: '',\n        city: '',\n        country: 'Paraguay',\n        tax_id: '',\n        credit_limit: 0,\n        payment_terms: 30,\n        is_active: true,\n        tourism_regime: false,\n        tourism_regime_expiry: '',\n        notes: '',\n      });\n      setSelectedFile(null);\n      setFileError('');\n      setEmailError('');\n      setRucError('');\n    }\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setEditingCustomer(null);\n    setSelectedFile(null);\n    setFileError('');\n    setEmailError('');\n    setRucError('');\n    setSubmitting(false);\n  };\n\n  // Funci√≥n para validaci√≥n de email en tiempo real\n  const validateEmail = (email: string) => {\n    if (!email) {\n      setEmailError('');\n      return true;\n    }\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      setEmailError('Formato de email inv√°lido');\n      return false;\n    }\n    setEmailError('');\n    return true;\n  };\n\n  // Funci√≥n para validaci√≥n de RUC paraguayo en tiempo real\n  const validateRuc = (ruc: string) => {\n    if (!ruc) {\n      setRucError('');\n      return true;\n    }\n    // Formato b√°sico del RUC paraguayo: 12345678-1\n    const rucRegex = /^\\d{8}-\\d{1}$/;\n    if (!rucRegex.test(ruc)) {\n      setRucError('Formato RUC inv√°lido. Use: 12345678-1');\n      return false;\n    }\n    setRucError('');\n    return true;\n  };\n\n  // Funci√≥n para manejar la selecci√≥n de archivos\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validar tipo de archivo - solo PDF\n      if (file.type !== 'application/pdf') {\n        setFileError('Solo se permiten archivos PDF');\n        return;\n      }\n      \n      // Validar tama√±o (m√°ximo 10MB)\n      if (file.size > 10 * 1024 * 1024) {\n        setFileError('El archivo es demasiado grande. M√°ximo permitido: 10MB');\n        return;\n      }\n      \n      setSelectedFile(file);\n      setFileError('');\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setSubmitting(true);\n      setError('');\n      \n      // Validaciones frontend espec√≠ficas para r√©gimen tur√≠stico\n      if (formData.tourism_regime) {\n        if (!formData.tourism_regime_expiry) {\n          setError('Debe proporcionar la fecha de vencimiento del r√©gimen de turismo');\n          return;\n        }\n        \n        // Validar que la fecha de vencimiento sea futura\n        const expiryDate = new Date(formData.tourism_regime_expiry);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0); // Reset time for accurate date comparison\n        \n        if (expiryDate <= today) {\n          setError('La fecha de vencimiento del r√©gimen de turismo debe ser futura');\n          return;\n        }\n      }\n      \n      let customer;\n      \n      if (editingCustomer) {\n        customer = await apiService.updateCustomer(editingCustomer.id, formData);\n      } else {\n        customer = await apiService.createCustomer(formData);\n      }\n      \n      // Si hay un archivo seleccionado y r√©gimen de turismo activo, subirlo\n      if (selectedFile && formData.tourism_regime && customer) {\n        const customerId = editingCustomer ? editingCustomer.id : customer.id;\n        try {\n          await apiService.uploadTourismPdf(customerId, selectedFile);\n        } catch (fileErr) {\n          setError('Cliente guardado, pero error al subir archivo. Puede subirlo despu√©s editando el cliente.');\n          console.error('Error uploading file:', fileErr);\n        }\n      }\n      \n      await loadCustomers();\n      handleCloseDialog();\n    } catch (err) {\n      setError('Error al guardar cliente');\n      console.error('Error saving customer:', err);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleDeleteCustomer = async (id: number) => {\n    if (window.confirm('¬øEst√° seguro que desea eliminar este cliente?')) {\n      try {\n        await apiService.deleteCustomer(id);\n        await loadCustomers();\n      } catch (err) {\n        setError('Error al eliminar cliente');\n        console.error('Error deleting customer:', err);\n      }\n    }\n  };\n\n\n  const handlePdfDownload = async (customer: Customer) => {\n    try {\n      const blob = await apiService.downloadTourismPdf(customer.id);\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `regimen_turismo_${customer.company_name}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      setError('Error al descargar PDF');\n      console.error('Error downloading PDF:', err);\n    }\n  };\n\n  const handlePdfDelete = async (customer: Customer) => {\n    if (window.confirm('¬øEst√° seguro que desea eliminar el PDF del r√©gimen de turismo?')) {\n      try {\n        await apiService.deleteTourismPdf(customer.id);\n        await loadCustomers();\n      } catch (err) {\n        setError('Error al eliminar PDF');\n        console.error('Error deleting PDF:', err);\n      }\n    }\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '-';\n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return '-';\n      return date.toLocaleDateString('es-PY', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return '-';\n    }\n  };\n\n  const isRegimeExpiringSoon = (expiryDate?: string) => {\n    if (!expiryDate) return false;\n    try {\n      const expiry = new Date(expiryDate);\n      if (isNaN(expiry.getTime())) return false;\n      \n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      expiry.setHours(0, 0, 0, 0);\n      \n      const daysUntilExpiry = Math.ceil((expiry.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n      return daysUntilExpiry <= 5 && daysUntilExpiry >= 0;\n    } catch (error) {\n      console.error('Error checking expiry:', error);\n      return false;\n    }\n  };\n\n  const isRegimeExpired = (expiryDate?: string) => {\n    if (!expiryDate) return false;\n    try {\n      const expiry = new Date(expiryDate);\n      if (isNaN(expiry.getTime())) return false;\n      \n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      expiry.setHours(0, 0, 0, 0);\n      \n      return expiry < today;\n    } catch (error) {\n      console.error('Error checking expiry:', error);\n      return false;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Encabezado */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n          Gesti√≥n de Clientes\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={() => handleOpenDialog()}\n          disabled={!user?.can_create_customers}\n        >\n          Nuevo Cliente\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Estad√≠sticas r√°pidas del r√©gimen de turismo */}\n      <Box \n        display=\"flex\" \n        flexWrap=\"wrap\" \n        gap={2} \n        mb={3}\n        sx={{\n          '& > *': {\n            flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)', md: '1 1 calc(25% - 12px)' },\n            minWidth: { xs: '100%', sm: '250px', md: '200px' }\n          }\n        }}\n      >\n        <Box>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <BusinessIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {customers.filter(c => c.tourism_regime).length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Con R√©gimen de Turismo\n              </Typography>\n            </CardContent>\n          </Card>\n        </Box>\n        \n        <Box>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <WarningIcon sx={{ fontSize: 40, color: 'warning.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {customers.filter(c => c.tourism_regime && isRegimeExpiringSoon(c.tourism_regime_expiry)).length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Vencen Pronto (5 d√≠as)\n              </Typography>\n            </CardContent>\n          </Card>\n        </Box>\n        \n        <Box>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <CheckIcon sx={{ fontSize: 40, color: 'error.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {customers.filter(c => c.tourism_regime && isRegimeExpired(c.tourism_regime_expiry)).length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Reg√≠menes Vencidos\n              </Typography>\n            </CardContent>\n          </Card>\n        </Box>\n        \n        <Box>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <PdfIcon sx={{ fontSize: 40, color: 'info.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {customers.filter(c => c.tourism_regime && c.tourism_regime_pdf).length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Con PDF Subido\n              </Typography>\n            </CardContent>\n          </Card>\n        </Box>\n      </Box>\n\n      {/* Tabla de clientes */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>Empresa</strong></TableCell>\n              <TableCell><strong>Contacto</strong></TableCell>\n              <TableCell><strong>Email</strong></TableCell>\n              <TableCell><strong>RUC</strong></TableCell>\n              <TableCell><strong>R√©gimen Turismo</strong></TableCell>\n              <TableCell><strong>Estado</strong></TableCell>\n              <TableCell><strong>Acciones</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {customers.map((customer) => (\n              <TableRow key={customer.id}>\n                <TableCell>{customer.company_name}</TableCell>\n                <TableCell>{customer.contact_name || '-'}</TableCell>\n                <TableCell>{customer.email || '-'}</TableCell>\n                <TableCell>{customer.tax_id || '-'}</TableCell>\n                <TableCell>\n                  {customer.tourism_regime ? (\n                    <Box>\n                      <Chip \n                        label=\"Activo\" \n                        color={\n                          isRegimeExpired(customer.tourism_regime_expiry) ? 'error' :\n                          isRegimeExpiringSoon(customer.tourism_regime_expiry) ? 'warning' : 'success'\n                        }\n                        size=\"small\"\n                        sx={{ mb: 0.5 }}\n                      />\n                      {customer.tourism_regime_expiry && (\n                        <Typography variant=\"caption\" display=\"block\">\n                          Vence: {formatDate(customer.tourism_regime_expiry)}\n                        </Typography>\n                      )}\n                      <Box display=\"flex\" gap={0.5} mt={0.5}>\n                        {customer.tourism_regime_pdf ? (\n                          <>\n                            <Tooltip title=\"Descargar PDF del r√©gimen\">\n                              <IconButton \n                                size=\"small\" \n                                onClick={() => handlePdfDownload(customer)}\n                                color=\"primary\"\n                                sx={{ \n                                  bgcolor: 'primary.light', \n                                  '&:hover': { bgcolor: 'primary.main', color: 'white' } \n                                }}\n                              >\n                                <DownloadIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Eliminar PDF\">\n                              <IconButton \n                                size=\"small\" \n                                onClick={() => handlePdfDelete(customer)}\n                                color=\"error\"\n                                sx={{ \n                                  bgcolor: 'error.light', \n                                  '&:hover': { bgcolor: 'error.main', color: 'white' } \n                                }}\n                              >\n                                <DeleteIcon fontSize=\"small\" />\n                              </IconButton>\n                            </Tooltip>\n                          </>\n                        ) : (\n                          <Tooltip title=\"Editar cliente para subir PDF\">\n                            <Button\n                              size=\"small\"\n                              variant=\"outlined\"\n                              startIcon={<EditIcon />}\n                              onClick={() => handleOpenDialog(customer)}\n                              sx={{ \n                                minWidth: 'auto', \n                                px: 1,\n                                color: 'warning.main',\n                                borderColor: 'warning.main',\n                                '&:hover': { \n                                  bgcolor: 'warning.main', \n                                  color: 'white',\n                                  borderColor: 'warning.main'\n                                }\n                              }}\n                            >\n                              Subir PDF\n                            </Button>\n                          </Tooltip>\n                        )}\n                      </Box>\n                    </Box>\n                  ) : (\n                    <Chip label=\"No aplica\" variant=\"outlined\" size=\"small\" />\n                  )}\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={customer.is_active ? 'Activo' : 'Inactivo'} \n                    color={customer.is_active ? 'success' : 'default'}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <IconButton \n                    onClick={() => handleOpenDialog(customer)}\n                    color=\"primary\"\n                    size=\"small\"\n                  >\n                    <EditIcon />\n                  </IconButton>\n                  <IconButton \n                    onClick={() => handleDeleteCustomer(customer.id)}\n                    color=\"error\"\n                    size=\"small\"\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Dialog para crear/editar cliente - MEJORADO CON SECCIONES ORGANIZADAS */}\n      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth=\"lg\" fullWidth>\n        <DialogTitle sx={{ bgcolor: 'primary.main', color: 'white', display: 'flex', alignItems: 'center', gap: 2 }}>\n          <BusinessIcon />\n          {editingCustomer ? 'Editar Cliente' : 'Nuevo Cliente'}\n        </DialogTitle>\n        <DialogContent sx={{ pt: 3 }}>\n          <Box display=\"flex\" flexDirection=\"column\" gap={3}>\n            \n            {/* SECCI√ìN 1: INFORMACI√ìN DE LA EMPRESA */}\n            <Box>\n              <Paper elevation={2} sx={{ p: 3, bgcolor: 'info.light', borderRadius: 2 }}>\n                <Box display=\"flex\" alignItems=\"center\" gap={2} mb={3}>\n                  <PersonIcon sx={{ fontSize: 28, color: 'info.main' }} />\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600, color: 'info.dark' }}>\n                    Informaci√≥n del Cliente\n                  </Typography>\n                </Box>\n                <Box display=\"flex\" flexWrap=\"wrap\" gap={2}>\n                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }, minWidth: '250px' }}>\n                    <TextField\n                      fullWidth\n                      label=\"Raz√≥n Social / Nombre del Cliente *\"\n                      placeholder=\"Ej: Turismo Paraguay SA o Juan P√©rez\"\n                      value={formData.company_name}\n                      onChange={(e) => setFormData({...formData, company_name: e.target.value})}\n                      error={!formData.company_name}\n                      helperText={!formData.company_name ? 'Campo obligatorio - puede ser empresa o persona individual' : 'Puede ser nombre de empresa o persona individual'}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }, minWidth: '250px' }}>\n                    <TextField\n                      fullWidth\n                      label=\"Contacto Principal\"\n                      placeholder=\"Ej: Juan P√©rez\"\n                      value={formData.contact_name}\n                      onChange={(e) => setFormData({...formData, contact_name: e.target.value})}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }, minWidth: '250px' }}>\n                    <TextField\n                      fullWidth\n                      label=\"Email\"\n                      type=\"email\"\n                      placeholder=\"contacto@empresa.com\"\n                      value={formData.email}\n                      onChange={(e) => {\n                        const email = e.target.value;\n                        setFormData({...formData, email});\n                        validateEmail(email);\n                      }}\n                      error={!!emailError}\n                      helperText={emailError || 'Email de contacto principal'}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }, minWidth: '250px' }}>\n                    <TextField\n                      fullWidth\n                      label=\"Tel√©fono\"\n                      placeholder=\"Ej: +595 21 123-4567\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                </Box>\n              </Paper>\n            </Box>\n\n            {/* SECCI√ìN 2: DATOS FISCALES */}\n            <Box>\n              <Paper elevation={2} sx={{ p: 3, bgcolor: 'warning.light', borderRadius: 2 }}>\n                <Box display=\"flex\" alignItems=\"center\" gap={2} mb={3}>\n                  <LocationIcon sx={{ fontSize: 28, color: 'warning.main' }} />\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600, color: 'warning.dark' }}>\n                    Datos Fiscales y Ubicaci√≥n\n                  </Typography>\n                </Box>\n                <Box display=\"flex\" flexWrap=\"wrap\" gap={2}>\n                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }, minWidth: '250px' }}>\n                    <TextField\n                      fullWidth\n                      label=\"RUC/Identificaci√≥n Fiscal\"\n                      placeholder=\"Ej: 80012345-1\"\n                      value={formData.tax_id}\n                      onChange={(e) => {\n                        const ruc = e.target.value;\n                        setFormData({...formData, tax_id: ruc});\n                        validateRuc(ruc);\n                      }}\n                      error={!!rucError}\n                      helperText={rucError || 'Formato: 12345678-1'}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }, minWidth: '250px' }}>\n                    <TextField\n                      fullWidth\n                      label=\"Ciudad\"\n                      placeholder=\"Ej: Asunci√≥n\"\n                      value={formData.city}\n                      onChange={(e) => setFormData({...formData, city: e.target.value})}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                  <Box sx={{ flex: '1 1 100%' }}>\n                    <TextField\n                      fullWidth\n                      label=\"Direcci√≥n Completa\"\n                      placeholder=\"Ej: Av. Espa√±a 1234 c/ Brasil\"\n                      value={formData.address}\n                      onChange={(e) => setFormData({...formData, address: e.target.value})}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                </Box>\n              </Paper>\n            </Box>\n\n            {/* SECCI√ìN 3: T√âRMINOS COMERCIALES */}\n            <Box>\n              <Paper elevation={2} sx={{ p: 3, bgcolor: 'success.light', borderRadius: 2 }}>\n                <Box display=\"flex\" alignItems=\"center\" gap={2} mb={3}>\n                  <MoneyIcon sx={{ fontSize: 28, color: 'success.main' }} />\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600, color: 'success.dark' }}>\n                    T√©rminos Comerciales\n                  </Typography>\n                </Box>\n                <Box display=\"flex\" flexWrap=\"wrap\" gap={2}>\n                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }, minWidth: '250px' }}>\n                    <TextField\n                      fullWidth\n                      label=\"L√≠mite de Cr√©dito (Gs.)\"\n                      type=\"number\"\n                      placeholder=\"0\"\n                      value={formData.credit_limit}\n                      onChange={(e) => setFormData({...formData, credit_limit: Number(e.target.value)})}\n                      variant=\"outlined\"\n                      helperText=\"Monto m√°ximo de cr√©dito autorizado\"\n                      InputProps={{\n                        inputProps: { min: 0 }\n                      }}\n                    />\n                  </Box>\n                  <Box sx={{ flex: { xs: '1 1 100%', sm: '1 1 calc(50% - 8px)' }, minWidth: '250px' }}>\n                    <TextField\n                      fullWidth\n                      label=\"T√©rminos de Pago (d√≠as)\"\n                      type=\"number\"\n                      placeholder=\"30\"\n                      value={formData.payment_terms}\n                      onChange={(e) => setFormData({...formData, payment_terms: Number(e.target.value)})}\n                      variant=\"outlined\"\n                      helperText=\"D√≠as de plazo para el pago\"\n                      InputProps={{\n                        inputProps: { min: 0, max: 365 }\n                      }}\n                    />\n                  </Box>\n                </Box>\n              </Paper>\n            </Box>\n\n            {/* SECCI√ìN 4: R√âGIMEN DE TURISMO - CON UPLOAD INTEGRADO */}\n            <Box>\n              <Paper \n                elevation={3} \n                sx={{ \n                  p: 3, \n                  bgcolor: formData.tourism_regime ? 'primary.light' : 'grey.50',\n                  border: formData.tourism_regime ? '2px solid' : '1px solid',\n                  borderColor: formData.tourism_regime ? 'primary.main' : 'grey.300',\n                  borderRadius: 2,\n                  transition: 'all 0.3s ease'\n                }}\n              >\n                <Box display=\"flex\" alignItems=\"center\" gap={2} mb={3}>\n                  <BusinessIcon \n                    sx={{ \n                      fontSize: 32, \n                      color: formData.tourism_regime ? 'primary.main' : 'grey.600' \n                    }} \n                  />\n                  <Box>\n                    <Typography variant=\"h6\" sx={{ fontWeight: 600, color: formData.tourism_regime ? 'primary.main' : 'text.primary' }}>\n                      R√©gimen de Turismo Paraguay\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Cliente exento de impuestos por r√©gimen especial de turismo\n                    </Typography>\n                  </Box>\n                </Box>\n                \n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={formData.tourism_regime}\n                      onChange={(e) => {\n                        const isChecked = e.target.checked;\n                        setFormData({\n                          ...formData, \n                          tourism_regime: isChecked,\n                          tourism_regime_expiry: isChecked ? formData.tourism_regime_expiry : ''\n                        });\n                        if (!isChecked) {\n                          setSelectedFile(null);\n                          setFileError('');\n                        }\n                      }}\n                      size=\"medium\"\n                      color=\"primary\"\n                    />\n                  }\n                  label={\n                    <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                      Este cliente tiene R√©gimen de Turismo activo\n                    </Typography>\n                  }\n                />\n                \n                {formData.tourism_regime && (\n                  <Box sx={{ mt: 3 }}>\n                    <Alert severity=\"info\" sx={{ mb: 3 }}>\n                      <Typography variant=\"body2\">\n                        <strong>Informaci√≥n requerida:</strong> Complete la fecha de vencimiento y suba el documento oficial del r√©gimen de turismo.\n                      </Typography>\n                    </Alert>\n                    \n                    <Box display=\"flex\" flexWrap=\"wrap\" gap={3}>\n                      <Box sx={{ flex: { xs: '1 1 100%', md: '1 1 calc(50% - 12px)' }, minWidth: '300px' }}>\n                        <TextField\n                          fullWidth\n                          label=\"Fecha de Vencimiento del R√©gimen *\"\n                          type=\"date\"\n                          value={formData.tourism_regime_expiry || ''}\n                          onChange={(e) => setFormData({...formData, tourism_regime_expiry: e.target.value})}\n                          InputLabelProps={{ shrink: true }}\n                          required={formData.tourism_regime}\n                          error={formData.tourism_regime && !formData.tourism_regime_expiry}\n                          helperText={formData.tourism_regime && !formData.tourism_regime_expiry ? 'Campo obligatorio para r√©gimen de turismo' : 'Fecha hasta la cual el r√©gimen est√° vigente'}\n                          inputProps={{\n                            min: new Date().toISOString().split('T')[0]\n                          }}\n                          variant=\"outlined\"\n                        />\n                      </Box>\n                      \n                      <Box sx={{ flex: { xs: '1 1 100%', md: '1 1 calc(50% - 12px)' }, minWidth: '300px' }}>\n                        <Box>\n                          <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 600 }}>\n                            Documento del R√©gimen de Turismo\n                          </Typography>\n                          \n                          <Paper \n                            variant=\"outlined\" \n                            sx={{ \n                              p: 2, \n                              border: selectedFile ? '2px solid' : '2px dashed',\n                              borderColor: selectedFile ? 'success.main' : 'grey.400',\n                              bgcolor: selectedFile ? 'success.light' : 'grey.50',\n                              transition: 'all 0.3s ease',\n                              '&:hover': {\n                                bgcolor: selectedFile ? 'success.light' : 'grey.100',\n                                borderColor: selectedFile ? 'success.main' : 'primary.main'\n                              }\n                            }}\n                          >\n                            <input\n                              accept=\".pdf,application/pdf\"\n                              style={{ display: 'none' }}\n                              id=\"tourism-file-upload\"\n                              type=\"file\"\n                              onChange={handleFileSelect}\n                            />\n                            <label htmlFor=\"tourism-file-upload\">\n                              <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" sx={{ cursor: 'pointer' }}>\n                                {selectedFile ? (\n                                  <>\n                                    <CheckIcon sx={{ fontSize: 32, color: 'success.main', mb: 1 }} />\n                                    <Typography variant=\"body2\" sx={{ fontWeight: 600, color: 'success.dark' }}>\n                                      Archivo seleccionado:\n                                    </Typography>\n                                    <Typography variant=\"body2\" sx={{ color: 'success.dark', textAlign: 'center' }}>\n                                      {selectedFile.name}\n                                    </Typography>\n                                    <Typography variant=\"caption\" color=\"text.secondary\">\n                                      {(selectedFile.size / 1024 / 1024).toFixed(2)} MB\n                                    </Typography>\n                                    <Button \n                                      size=\"small\" \n                                      variant=\"outlined\" \n                                      sx={{ mt: 1 }}\n                                      startIcon={<AttachFileIcon />}\n                                    >\n                                      Cambiar archivo\n                                    </Button>\n                                  </>\n                                ) : (\n                                  <>\n                                    <UploadIcon sx={{ fontSize: 32, color: 'grey.600', mb: 1 }} />\n                                    <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\n                                      Explorar Archivo\n                                    </Typography>\n                                    <Typography variant=\"caption\" color=\"text.secondary\" sx={{ textAlign: 'center' }}>\n                                      PDF o Excel (m√°x. 10MB)\n                                    </Typography>\n                                    <Button \n                                      size=\"small\" \n                                      variant=\"contained\" \n                                      sx={{ mt: 1 }}\n                                      startIcon={<AttachFileIcon />}\n                                    >\n                                      Seleccionar Archivo\n                                    </Button>\n                                  </>\n                                )}\n                              </Box>\n                            </label>\n                          </Paper>\n                          \n                          {fileError && (\n                            <Alert severity=\"error\" sx={{ mt: 1 }}>\n                              {fileError}\n                            </Alert>\n                          )}\n                          \n                          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block', mt: 1 }}>\n                            Formatos permitidos: PDF √∫nicamente. Tama√±o m√°ximo: 10MB\n                          </Typography>\n                        </Box>\n                      </Box>\n                    </Box>\n                    \n                    {/* Mostrar informaci√≥n del archivo existente si estamos editando */}\n                    {editingCustomer && editingCustomer.tourism_regime_pdf && (\n                      <Alert severity=\"warning\" sx={{ mt: 2 }}>\n                        <Typography variant=\"body2\">\n                          <strong>Archivo actual:</strong> {editingCustomer.tourism_regime_pdf}\n                          {selectedFile && (\n                            <>\n                              <br />\n                              <strong>Ser√° reemplazado por:</strong> {selectedFile.name}\n                            </>\n                          )}\n                        </Typography>\n                      </Alert>\n                    )}\n                  </Box>\n                )}\n              </Paper>\n            </Box>\n\n            {/* SECCI√ìN 5: NOTAS Y ESTADO */}\n            <Box>\n              <Paper elevation={2} sx={{ p: 3, bgcolor: 'grey.50', borderRadius: 2 }}>\n                <Box display=\"flex\" alignItems=\"center\" gap={2} mb={3}>\n                  <NotesIcon sx={{ fontSize: 28, color: 'grey.700' }} />\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600, color: 'grey.800' }}>\n                    Notas y Estado del Cliente\n                  </Typography>\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n                  <Box>\n                    <TextField\n                      fullWidth\n                      label=\"Notas Adicionales\"\n                      multiline\n                      rows={3}\n                      placeholder=\"Informaci√≥n adicional sobre el cliente...\"\n                      value={formData.notes}\n                      onChange={(e) => setFormData({...formData, notes: e.target.value})}\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                  <Box>\n                    <FormControlLabel\n                      control={\n                        <Switch\n                          checked={formData.is_active}\n                          onChange={(e) => setFormData({...formData, is_active: e.target.checked})}\n                          size=\"medium\"\n                          color=\"success\"\n                        />\n                      }\n                      label={\n                        <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                          Cliente Activo - Puede realizar transacciones\n                        </Typography>\n                      }\n                    />\n                  </Box>\n                </Box>\n              </Paper>\n            </Box>\n          </Box>\n        </DialogContent>\n        <DialogActions sx={{ p: 3, bgcolor: 'grey.50', gap: 2 }}>\n          <Button \n            onClick={handleCloseDialog} \n            variant=\"outlined\" \n            size=\"medium\"\n            disabled={submitting}\n          >\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleSubmit} \n            variant=\"contained\"\n            size=\"medium\"\n            disabled={Boolean(\n              submitting || \n              !formData.company_name || \n              (formData.tourism_regime && !formData.tourism_regime_expiry) ||\n              (formData.tourism_regime && selectedFile && fileError)\n            )}\n            startIcon={submitting ? <CircularProgress size={20} /> : null}\n            sx={{ px: 4 }}\n          >\n            {submitting ? 'Guardando...' : (editingCustomer ? 'Actualizar Cliente' : 'Crear Cliente')}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}","size_bytes":39767},"frontend/src/pages/Dashboard.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Paper,\n  Typography,\n  Card,\n  CardContent,\n  Button,\n  Chip,\n  Alert,\n  CircularProgress,\n  Divider,\n} from '@mui/material';\nimport {\n  People,\n  Description,\n  Receipt,\n  AccountBalance,\n  TrendingUp,\n  Warning,\n  CheckCircle,\n  Schedule,\n  AttachMoney,\n  Inventory,\n  Assessment,\n  MonetizationOn,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { apiService } from '../services/api';\n\ninterface DashboardStats {\n  basic_stats: {\n    total_customers: number;\n    active_customers: number;\n    total_quotes: number;\n    total_invoices: number;\n    total_products: number;\n  };\n  monthly_stats: {\n    quotes: number;\n    invoices: number;\n    sales_pyg: number;\n    sales_usd: number;\n  };\n  pending_invoices: {\n    count: number;\n    amount_pyg: number;\n    amount_usd: number;\n  };\n  deposits: {\n    active_count: number;\n    total_amount: number;\n  };\n  alerts: {\n    tourism_regime_expiring: number;\n    low_stock_count: number;\n    out_of_stock_count: number;\n  };\n}\n\nexport default function Dashboard() {\n  const { user, isLoading: authLoading } = useAuth();\n  const [stats, setStats] = useState<DashboardStats | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    // Solo cargar datos cuando el usuario est√© autenticado\n    if (user && !authLoading) {\n      loadDashboardData();\n    }\n  }, [user, authLoading]);\n\n  const loadDashboardData = async () => {\n    try {\n      setLoading(true);\n      setError('');\n      \n      // Cargar estad√≠sticas consolidadas del endpoint\n      const dashboardStats = await apiService.getDashboardStats();\n      \n      setStats(dashboardStats);\n    } catch (err: any) {\n      const errorMessage = err?.response?.data?.detail || 'Error al cargar datos del dashboard';\n      setError(errorMessage);\n      console.error('Dashboard error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Funci√≥n helper para formatear n√∫meros como moneda paraguaya\n  const formatCurrency = (amount: number, currency: string = 'PYG'): string => {\n    if (amount === null || amount === undefined || isNaN(amount)) return '-';\n    \n    try {\n      if (currency === 'USD') {\n        return `USD ${amount.toLocaleString('en-US', {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        })}`;\n      } else {\n        return `Gs. ${Math.round(amount).toLocaleString('es-PY')}`;\n      }\n    } catch (error) {\n      console.error('Error formatting currency:', error);\n      return `${currency} ${amount || 0}`;\n    }\n  };\n\n  // Funci√≥n helper para formatear fechas de manera segura\n  const formatDate = (dateString?: string | null): string => {\n    if (!dateString) return '-';\n    \n    try {\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return '-';\n      \n      return date.toLocaleDateString('es-PY', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n      });\n    } catch (error) {\n      console.error('Error formatting date:', error);\n      return '-';\n    }\n  };\n\n  // Funci√≥n helper para formatear n√∫meros de manera segura\n  const formatNumber = (num: number): string => {\n    if (num === null || num === undefined || isNaN(num)) return '0';\n    \n    try {\n      return num.toLocaleString('es-PY');\n    } catch (error) {\n      console.error('Error formatting number:', error);\n      return String(num || 0);\n    }\n  };\n\n  // Si a√∫n est√° cargando la autenticaci√≥n, mostrar loading\n  if (authLoading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Cargando...</Typography>\n      </Box>\n    );\n  }\n\n  // Si no hay usuario autenticado, mostrar mensaje\n  if (!user) {\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" minHeight=\"400px\">\n        <Alert severity=\"info\" sx={{ mb: 2 }}>\n          Debe iniciar sesi√≥n para acceder al dashboard\n        </Alert>\n        <Button variant=\"contained\" href=\"/login\">\n          Iniciar Sesi√≥n\n        </Button>\n      </Box>\n    );\n  }\n\n  // Si est√° cargando los datos del dashboard\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n        <Typography sx={{ ml: 2 }}>Cargando estad√≠sticas...</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Encabezado de bienvenida */}\n      <Box mb={4}>\n        <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 600 }}>\n          ¬°Bienvenido, {user?.full_name || user?.username}!\n        </Typography>\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          Sistema de Gesti√≥n de Ventas - Paraguay\n        </Typography>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Tarjetas de estad√≠sticas b√°sicas */}\n      <Grid container spacing={3} mb={4}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ height: '100%', bgcolor: 'primary.main', color: 'white' }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box>\n                  <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n                    {formatNumber(stats?.basic_stats?.total_customers || 0)}\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    Clientes\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                    {formatNumber(stats?.basic_stats?.active_customers || 0)} activos\n                  </Typography>\n                </Box>\n                <People sx={{ fontSize: 48, opacity: 0.8 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ height: '100%', bgcolor: 'secondary.main', color: 'white' }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box>\n                  <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n                    {formatNumber(stats?.monthly_stats?.quotes || 0)}\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    Cotizaciones\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                    Este mes\n                  </Typography>\n                </Box>\n                <Description sx={{ fontSize: 48, opacity: 0.8 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ height: '100%', bgcolor: 'success.main', color: 'white' }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box>\n                  <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n                    {formatNumber(stats?.monthly_stats?.invoices || 0)}\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    Facturas\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                    Este mes\n                  </Typography>\n                </Box>\n                <Receipt sx={{ fontSize: 48, opacity: 0.8 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ height: '100%', bgcolor: 'info.main', color: 'white' }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                <Box>\n                  <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n                    {formatNumber(stats?.deposits?.active_count || 0)}\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    Dep√≥sitos\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                    Activos\n                  </Typography>\n                </Box>\n                <AccountBalance sx={{ fontSize: 48, opacity: 0.8 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tarjetas de ventas por moneda */}\n      <Grid container spacing={3} mb={4}>\n        <Grid item xs={12} md={6}>\n          <Card sx={{ height: '100%' }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <MonetizationOn sx={{ color: 'success.main', mr: 1 }} />\n                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                  Ventas del Mes - Guaran√≠es\n                </Typography>\n              </Box>\n              <Typography variant=\"h4\" sx={{ fontWeight: 600, color: 'success.main' }}>\n                {formatCurrency(stats?.monthly_stats?.sales_pyg || 0, 'PYG')}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Facturaci√≥n en guaran√≠es del mes actual\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Card sx={{ height: '100%' }}>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <AttachMoney sx={{ color: 'primary.main', mr: 1 }} />\n                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                  Ventas del Mes - D√≥lares\n                </Typography>\n              </Box>\n              <Typography variant=\"h4\" sx={{ fontWeight: 600, color: 'primary.main' }}>\n                {formatCurrency(stats?.monthly_stats?.sales_usd || 0, 'USD')}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Facturaci√≥n en d√≥lares del mes actual\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Alertas y informaci√≥n importante */}\n      <Grid container spacing={3} mb={4}>\n        {/* Facturas Pendientes */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 3, height: '100%' }}>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n              <Schedule sx={{ color: 'warning.main', mr: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Facturas Pendientes\n              </Typography>\n            </Box>\n            \n            <Typography variant=\"h5\" sx={{ fontWeight: 600, mb: 1 }}>\n              {formatNumber(stats?.pending_invoices?.count || 0)}\n            </Typography>\n            \n            <Box mb={2}>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                PYG: {formatCurrency(stats?.pending_invoices?.amount_pyg || 0, 'PYG')}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                USD: {formatCurrency(stats?.pending_invoices?.amount_usd || 0, 'USD')}\n              </Typography>\n            </Box>\n            \n            <Button variant=\"outlined\" size=\"small\" href=\"/facturas\">\n              Ver Facturas\n            </Button>\n          </Paper>\n        </Grid>\n\n        {/* R√©gimen de Turismo */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 3, height: '100%' }}>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n              <Warning sx={{ color: 'warning.main', mr: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                R√©gimen de Turismo\n              </Typography>\n            </Box>\n            \n            {stats?.alerts?.tourism_regime_expiring === 0 ? (\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <CheckCircle sx={{ color: 'success.main', mr: 1 }} />\n                <Typography variant=\"body1\">\n                  Todos los reg√≠menes vigentes\n                </Typography>\n              </Box>\n            ) : (\n              <Alert severity=\"warning\" sx={{ mb: 2 }}>\n                {formatNumber(stats?.alerts?.tourism_regime_expiring || 0)} r√©gimen(es) vencen pronto\n              </Alert>\n            )}\n            \n            <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\n              Documentos PDF del r√©gimen de turismo. Alertas autom√°ticas 30 d√≠as antes del vencimiento.\n            </Typography>\n            \n            <Button variant=\"outlined\" size=\"small\" href=\"/clientes\">\n              Gestionar Clientes\n            </Button>\n          </Paper>\n        </Grid>\n\n        {/* Inventario */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 3, height: '100%' }}>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n              <Inventory sx={{ color: 'info.main', mr: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Estado del Inventario\n              </Typography>\n            </Box>\n            \n            <Box mb={2}>\n              <Typography variant=\"body1\">\n                Total productos: {formatNumber(stats?.basic_stats?.total_products || 0)}\n              </Typography>\n              \n              {(stats?.alerts?.low_stock_count || 0) > 0 && (\n                <Alert severity=\"warning\" sx={{ mt: 1, mb: 1 }}>\n                  {formatNumber(stats?.alerts?.low_stock_count || 0)} productos con stock bajo\n                </Alert>\n              )}\n              \n              {(stats?.alerts?.out_of_stock_count || 0) > 0 && (\n                <Alert severity=\"error\" sx={{ mt: 1, mb: 1 }}>\n                  {formatNumber(stats?.alerts?.out_of_stock_count || 0)} productos sin stock\n                </Alert>\n              )}\n              \n              {(stats?.alerts?.low_stock_count || 0) === 0 && (stats?.alerts?.out_of_stock_count || 0) === 0 && (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Inventario sin alertas\n                </Typography>\n              )}\n            </Box>\n            \n            <Button variant=\"outlined\" size=\"small\" href=\"/productos\">\n              Ver Productos\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Acciones R√°pidas */}\n      <Grid container spacing={3} mb={4}>\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 3 }}>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n              <TrendingUp sx={{ color: 'primary.main', mr: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Acciones R√°pidas\n              </Typography>\n            </Box>\n            \n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Button \n                  variant=\"contained\" \n                  fullWidth \n                  href=\"/clientes\"\n                  sx={{ mb: 1, justifyContent: 'flex-start' }}\n                >\n                  <People sx={{ mr: 1 }} />\n                  Nuevo Cliente\n                </Button>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Button \n                  variant=\"outlined\" \n                  fullWidth \n                  href=\"/cotizaciones\"\n                  sx={{ mb: 1, justifyContent: 'flex-start' }}\n                >\n                  <Description sx={{ mr: 1 }} />\n                  Nueva Cotizaci√≥n\n                </Button>\n              </Grid>\n              \n              <Grid item xs={12}>\n                <Button \n                  variant=\"outlined\" \n                  fullWidth \n                  href=\"/depositos\"\n                  sx={{ mb: 1, justifyContent: 'flex-start' }}\n                >\n                  <AccountBalance sx={{ mr: 1 }} />\n                  Gestionar Dep√≥sitos\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n\n        {/* Informaci√≥n de Dep√≥sitos */}\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 3 }}>\n            <Box display=\"flex\" alignItems=\"center\" mb={2}>\n              <Assessment sx={{ color: 'secondary.main', mr: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Resumen de Dep√≥sitos\n              </Typography>\n            </Box>\n            \n            <Typography variant=\"h5\" sx={{ fontWeight: 600, mb: 1 }}>\n              {formatCurrency(stats?.deposits?.total_amount || 0, 'PYG')}\n            </Typography>\n            \n            <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\n              Total disponible en {formatNumber(stats?.deposits?.active_count || 0)} dep√≥sitos activos\n            </Typography>\n            \n            <Divider sx={{ my: 2 }} />\n            \n            <Typography variant=\"body2\" color=\"text.secondary\" mb={2}>\n              Tipos: ANTICIPO, SE√ëA, GARANT√çA, RETENCI√ìN\n            </Typography>\n            \n            <Button variant=\"outlined\" size=\"small\" href=\"/depositos\">\n              Ver Todos los Dep√≥sitos\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n\n      {/* Informaci√≥n del Sistema */}\n      <Grid item xs={12}>\n        <Paper sx={{ p: 3, bgcolor: 'background.paper' }}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600, mb: 2 }}>\n            Funcionalidades del Sistema\n          </Typography>\n          \n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\" p={2}>\n                <Chip \n                  label=\"R√©gimen de Turismo\" \n                  color=\"primary\" \n                  sx={{ mb: 1, width: '100%' }} \n                />\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Gesti√≥n de exenci√≥n fiscal para turismo\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\" p={2}>\n                <Chip \n                  label=\"Multi-Moneda\" \n                  color=\"secondary\" \n                  sx={{ mb: 1, width: '100%' }} \n                />\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Guaran√≠es (PYG) y D√≥lares (USD)\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\" p={2}>\n                <Chip \n                  label=\"Dep√≥sitos Paraguay\" \n                  color=\"success\" \n                  sx={{ mb: 1, width: '100%' }} \n                />\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  ANTICIPO, SE√ëA, GARANT√çA, etc.\n                </Typography>\n              </Box>\n            </Grid>\n            \n            <Grid item xs={12} sm={6} md={3}>\n              <Box textAlign=\"center\" p={2}>\n                <Chip \n                  label=\"Notificaciones\" \n                  color=\"info\" \n                  sx={{ mb: 1, width: '100%' }} \n                />\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Alertas autom√°ticas de vencimientos\n                </Typography>\n              </Box>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Grid>\n    </Box>\n  );\n}","size_bytes":19624},"frontend/src/pages/Deposits.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  Autocomplete,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Payment as PaymentIcon,\n  Undo as UndoIcon,\n  AccountBalance as AccountBalanceIcon,\n  AttachMoney as MoneyIcon,\n  TrendingUp as TrendingUpIcon,\n  Assignment as AssignmentIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { apiService } from '../services/api';\n\ninterface Customer {\n  id: number;\n  company_name: string;\n}\n\ninterface Deposit {\n  id: number;\n  deposit_number: string;\n  customer_id: number;\n  customer_name: string;\n  deposit_type: string;\n  amount: number;\n  currency: string;\n  available_amount: number;\n  status: string;\n  deposit_date: string;\n  expiry_date?: string;\n  project_reference?: string;\n  contract_reference?: string;\n  notes?: string;\n}\n\n// Tipos de dep√≥sito espec√≠ficos para Paraguay\nconst DEPOSIT_TYPES = [\n  { value: 'ANTICIPO', label: 'Anticipo' },\n  { value: 'SE√ëA', label: 'Se√±a' },\n  { value: 'GARANTIA', label: 'Garant√≠a' },\n  { value: 'CAUCION', label: 'Cauci√≥n' },\n  { value: 'PARCIAL', label: 'Pago Parcial' },\n];\n\nconst CURRENCIES = [\n  { value: 'PYG', label: 'Guaran√≠es (PYG)' },\n  { value: 'USD', label: 'D√≥lares (USD)' },\n];\n\nexport default function Deposits() {\n  const { user } = useAuth();\n  const [deposits, setDeposits] = useState<Deposit[]>([]);\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [actionDialogOpen, setActionDialogOpen] = useState(false);\n  const [selectedDeposit, setSelectedDeposit] = useState<Deposit | null>(null);\n  const [actionType, setActionType] = useState<'apply' | 'refund'>('apply');\n  \n  // Formulario para nuevo dep√≥sito\n  const [formData, setFormData] = useState({\n    customer_id: 0,\n    deposit_type: 'ANTICIPO',\n    amount: 0,\n    currency: 'PYG',\n    deposit_date: new Date().toISOString().split('T')[0],\n    expiry_date: '',\n    project_reference: '',\n    contract_reference: '',\n    notes: '',\n  });\n\n  // Formulario para aplicar/reembolsar\n  const [actionData, setActionData] = useState({\n    amount: 0,\n    invoice_id: 0,\n    reason: '',\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [depositsData, customersData] = await Promise.all([\n        apiService.getDeposits({ limit: 1000 }),\n        apiService.getCustomers({ limit: 1000, is_active: true })\n      ]);\n      \n      setDeposits(depositsData);\n      setCustomers(customersData);\n    } catch (err) {\n      setError('Error al cargar dep√≥sitos');\n      console.error('Error loading deposits:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOpenDialog = () => {\n    setFormData({\n      customer_id: 0,\n      deposit_type: 'ANTICIPO',\n      amount: 0,\n      currency: 'PYG',\n      deposit_date: new Date().toISOString().split('T')[0],\n      expiry_date: '',\n      project_reference: '',\n      contract_reference: '',\n      notes: '',\n    });\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      await apiService.createDeposit(formData);\n      await loadData();\n      handleCloseDialog();\n    } catch (err) {\n      setError('Error al crear dep√≥sito');\n      console.error('Error creating deposit:', err);\n    }\n  };\n\n  const handleOpenActionDialog = (deposit: Deposit, action: 'apply' | 'refund') => {\n    setSelectedDeposit(deposit);\n    setActionType(action);\n    setActionData({\n      amount: action === 'apply' ? deposit.available_amount : 0,\n      invoice_id: 0,\n      reason: '',\n    });\n    setActionDialogOpen(true);\n  };\n\n  const handleCloseActionDialog = () => {\n    setActionDialogOpen(false);\n    setSelectedDeposit(null);\n  };\n\n  const handleApplyDeposit = async () => {\n    if (!selectedDeposit) return;\n    \n    try {\n      await apiService.applyDepositToInvoice(selectedDeposit.id, {\n        invoice_id: actionData.invoice_id,\n        amount: actionData.amount,\n      });\n      \n      await loadData();\n      handleCloseActionDialog();\n    } catch (err) {\n      setError('Error al aplicar dep√≥sito');\n      console.error('Error applying deposit:', err);\n    }\n  };\n\n  const handleRefundDeposit = async () => {\n    if (!selectedDeposit) return;\n    \n    try {\n      await apiService.refundDeposit(selectedDeposit.id, {\n        amount: actionData.amount,\n        reason: actionData.reason,\n      });\n      \n      await loadData();\n      handleCloseActionDialog();\n    } catch (err) {\n      setError('Error al reembolsar dep√≥sito');\n      console.error('Error refunding deposit:', err);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'ACTIVE': return 'success';\n      case 'APPLIED': return 'info';\n      case 'REFUNDED': return 'warning';\n      case 'EXPIRED': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'ANTICIPO': return 'primary';\n      case 'SE√ëA': return 'secondary';\n      case 'GARANTIA': return 'info';\n      case 'CAUCION': return 'warning';\n      case 'PARCIAL': return 'success';\n      default: return 'default';\n    }\n  };\n\n  const getTotalByType = (type: string) => {\n    return deposits\n      .filter(d => d.deposit_type === type && d.status === 'ACTIVE')\n      .reduce((sum, d) => sum + d.available_amount, 0);\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Encabezado */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n          Control de Dep√≥sitos\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={handleOpenDialog}\n          disabled={!user?.can_manage_deposits}\n        >\n          Nuevo Dep√≥sito\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Estad√≠sticas por tipo de dep√≥sito (Paraguay) */}\n      <Grid container spacing={2} mb={3}>\n        {DEPOSIT_TYPES.map((type) => (\n          <Grid item xs={12} sm={6} md={2.4} key={type.value}>\n            <Card>\n              <CardContent sx={{ textAlign: 'center' }}>\n                <AccountBalanceIcon sx={{ fontSize: 40, color: `${getTypeColor(type.value)}.main`, mb: 1 }} />\n                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                  Gs. {getTotalByType(type.value).toLocaleString()}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  {type.label}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {deposits.filter(d => d.deposit_type === type.value && d.status === 'ACTIVE').length} activos\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Resumen general */}\n      <Grid container spacing={2} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <MoneyIcon sx={{ fontSize: 40, color: 'success.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Gs. {deposits.filter(d => d.status === 'ACTIVE').reduce((sum, d) => sum + d.available_amount, 0).toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Disponible\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <TrendingUpIcon sx={{ fontSize: 40, color: 'info.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Gs. {deposits.filter(d => d.status === 'APPLIED').reduce((sum, d) => sum + d.amount, 0).toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Aplicado\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <AssignmentIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {deposits.length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Dep√≥sitos\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <AccountBalanceIcon sx={{ fontSize: 40, color: 'warning.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {deposits.filter(d => d.status === 'ACTIVE').length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Dep√≥sitos Activos\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Informaci√≥n sobre el sistema de dep√≥sitos paraguayo */}\n      <Alert severity=\"info\" sx={{ mb: 3 }}>\n        <Typography variant=\"subtitle2\" gutterBottom>\n          Sistema de Dep√≥sitos para Paraguay:\n        </Typography>\n        <Typography variant=\"body2\">\n          ‚Ä¢ <strong>ANTICIPO:</strong> Pago adelantado sobre servicios/productos futuros<br/>\n          ‚Ä¢ <strong>SE√ëA:</strong> Reserva de productos o servicios<br/>\n          ‚Ä¢ <strong>GARANT√çA:</strong> Dep√≥sito de garant√≠a por da√±os o incumplimiento<br/>\n          ‚Ä¢ <strong>CAUCI√ìN:</strong> Garant√≠a monetaria por obligaciones contractuales<br/>\n          ‚Ä¢ <strong>PARCIAL:</strong> Pago parcial de una factura mayor\n        </Typography>\n      </Alert>\n\n      {/* Tabla de dep√≥sitos */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>N√∫mero</strong></TableCell>\n              <TableCell><strong>Cliente</strong></TableCell>\n              <TableCell><strong>Tipo</strong></TableCell>\n              <TableCell><strong>Monto Total</strong></TableCell>\n              <TableCell><strong>Disponible</strong></TableCell>\n              <TableCell><strong>Moneda</strong></TableCell>\n              <TableCell><strong>Fecha</strong></TableCell>\n              <TableCell><strong>Estado</strong></TableCell>\n              <TableCell><strong>Acciones</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {deposits.map((deposit) => (\n              <TableRow key={deposit.id}>\n                <TableCell>{deposit.deposit_number}</TableCell>\n                <TableCell>{deposit.customer_name}</TableCell>\n                <TableCell>\n                  <Chip \n                    label={DEPOSIT_TYPES.find(t => t.value === deposit.deposit_type)?.label || deposit.deposit_type}\n                    color={getTypeColor(deposit.deposit_type)}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>{deposit.currency} {deposit.amount.toLocaleString()}</TableCell>\n                <TableCell>\n                  <Typography\n                    color={deposit.available_amount > 0 ? 'success.main' : 'text.secondary'}\n                    fontWeight={deposit.available_amount > 0 ? 600 : 400}\n                  >\n                    {deposit.currency} {deposit.available_amount.toLocaleString()}\n                  </Typography>\n                </TableCell>\n                <TableCell>{deposit.currency}</TableCell>\n                <TableCell>{new Date(deposit.deposit_date).toLocaleDateString()}</TableCell>\n                <TableCell>\n                  <Chip \n                    label={deposit.status} \n                    color={getStatusColor(deposit.status)}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  {deposit.status === 'ACTIVE' && deposit.available_amount > 0 && (\n                    <>\n                      <IconButton \n                        onClick={() => handleOpenActionDialog(deposit, 'apply')}\n                        color=\"primary\"\n                        size=\"small\"\n                        title=\"Aplicar a Factura\"\n                      >\n                        <PaymentIcon />\n                      </IconButton>\n                      <IconButton \n                        onClick={() => handleOpenActionDialog(deposit, 'refund')}\n                        color=\"warning\"\n                        size=\"small\"\n                        title=\"Reembolsar\"\n                      >\n                        <UndoIcon />\n                      </IconButton>\n                    </>\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Dialog para crear dep√≥sito */}\n      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Nuevo Dep√≥sito</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <Autocomplete\n                options={customers}\n                getOptionLabel={(option) => option.company_name}\n                value={customers.find(c => c.id === formData.customer_id) || null}\n                onChange={(_, value) => setFormData({...formData, customer_id: value?.id || 0})}\n                renderInput={(params) => <TextField {...params} label=\"Cliente *\" />}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Tipo de Dep√≥sito</InputLabel>\n                <Select\n                  value={formData.deposit_type}\n                  onChange={(e) => setFormData({...formData, deposit_type: e.target.value})}\n                >\n                  {DEPOSIT_TYPES.map((type) => (\n                    <MenuItem key={type.value} value={type.value}>\n                      {type.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Monto *\"\n                type=\"number\"\n                value={formData.amount}\n                onChange={(e) => setFormData({...formData, amount: Number(e.target.value)})}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <FormControl fullWidth>\n                <InputLabel>Moneda</InputLabel>\n                <Select\n                  value={formData.currency}\n                  onChange={(e) => setFormData({...formData, currency: e.target.value})}\n                >\n                  {CURRENCIES.map((currency) => (\n                    <MenuItem key={currency.value} value={currency.value}>\n                      {currency.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Fecha del Dep√≥sito\"\n                type=\"date\"\n                value={formData.deposit_date}\n                onChange={(e) => setFormData({...formData, deposit_date: e.target.value})}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Fecha de Vencimiento\"\n                type=\"date\"\n                value={formData.expiry_date}\n                onChange={(e) => setFormData({...formData, expiry_date: e.target.value})}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Referencia de Proyecto\"\n                value={formData.project_reference}\n                onChange={(e) => setFormData({...formData, project_reference: e.target.value})}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Referencia de Contrato\"\n                value={formData.contract_reference}\n                onChange={(e) => setFormData({...formData, contract_reference: e.target.value})}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Notas\"\n                multiline\n                rows={3}\n                value={formData.notes}\n                onChange={(e) => setFormData({...formData, notes: e.target.value})}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleSubmit} \n            variant=\"contained\"\n            disabled={!formData.customer_id || !formData.amount}\n          >\n            Crear Dep√≥sito\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Dialog para aplicar/reembolsar dep√≥sito */}\n      <Dialog open={actionDialogOpen} onClose={handleCloseActionDialog} maxWidth=\"sm\" fullWidth>\n        <DialogTitle>\n          {actionType === 'apply' ? 'Aplicar Dep√≥sito a Factura' : 'Reembolsar Dep√≥sito'}\n        </DialogTitle>\n        <DialogContent>\n          {selectedDeposit && (\n            <Box>\n              <Typography variant=\"body1\" gutterBottom>\n                <strong>Dep√≥sito:</strong> {selectedDeposit.deposit_number}\n              </Typography>\n              <Typography variant=\"body1\" gutterBottom>\n                <strong>Cliente:</strong> {selectedDeposit.customer_name}\n              </Typography>\n              <Typography variant=\"body1\" gutterBottom>\n                <strong>Disponible:</strong> {selectedDeposit.currency} {selectedDeposit.available_amount.toLocaleString()}\n              </Typography>\n              \n              <Grid container spacing={2} sx={{ mt: 2 }}>\n                <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    label=\"Monto\"\n                    type=\"number\"\n                    value={actionData.amount}\n                    onChange={(e) => setActionData({...actionData, amount: Number(e.target.value)})}\n                    inputProps={{\n                      max: selectedDeposit.available_amount,\n                      min: 0,\n                    }}\n                  />\n                </Grid>\n                \n                {actionType === 'apply' && (\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"ID de Factura\"\n                      type=\"number\"\n                      value={actionData.invoice_id}\n                      onChange={(e) => setActionData({...actionData, invoice_id: Number(e.target.value)})}\n                    />\n                  </Grid>\n                )}\n                \n                {actionType === 'refund' && (\n                  <Grid item xs={12}>\n                    <TextField\n                      fullWidth\n                      label=\"Motivo del Reembolso *\"\n                      multiline\n                      rows={3}\n                      value={actionData.reason}\n                      onChange={(e) => setActionData({...actionData, reason: e.target.value})}\n                    />\n                  </Grid>\n                )}\n              </Grid>\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseActionDialog}>\n            Cancelar\n          </Button>\n          <Button \n            onClick={actionType === 'apply' ? handleApplyDeposit : handleRefundDeposit}\n            variant=\"contained\"\n            color={actionType === 'apply' ? 'primary' : 'warning'}\n            disabled={\n              !actionData.amount || \n              (actionType === 'apply' && !actionData.invoice_id) ||\n              (actionType === 'refund' && !actionData.reason)\n            }\n          >\n            {actionType === 'apply' ? 'Aplicar' : 'Reembolsar'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}","size_bytes":21585},"frontend/src/pages/Invoices.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  Autocomplete,\n  MenuItem,\n  ButtonGroup,\n  Tooltip,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Print as PrintIcon,\n  Save as SaveIcon,\n  PrintOutlined as PrintOutlinedIcon,\n  Receipt as ReceiptIcon,\n  Payment as PaymentIcon,\n  PictureAsPdf as PdfIcon,\n  CheckCircle as CheckIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { apiService } from '../services/api';\n\ninterface Customer {\n  id: number;\n  company_name: string;\n}\n\ninterface Invoice {\n  id: number;\n  invoice_number: string;\n  customer_id: number;\n  customer_name: string;\n  invoice_date: string;\n  due_date: string;\n  status: string;\n  subtotal: number;\n  tax_amount: number;\n  total_amount: number;\n  paid_amount: number;\n  balance_due: number;\n  currency: string;\n  notes?: string;\n}\n\nexport default function Invoices() {\n  const { user } = useAuth();\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingInvoice, setEditingInvoice] = useState<Invoice | null>(null);\n  const [processingAction, setProcessingAction] = useState<string>('');\n  \n  // Formulario\n  const [formData, setFormData] = useState({\n    customer_id: 0,\n    invoice_date: new Date().toISOString().split('T')[0],\n    due_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 d√≠as\n    currency: 'PYG',\n    notes: '',\n    lines: [] as any[],\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [invoicesData, customersData] = await Promise.all([\n        apiService.getInvoices({ limit: 1000 }),\n        apiService.getCustomers({ limit: 1000, is_active: true })\n      ]);\n      \n      setInvoices(invoicesData);\n      setCustomers(customersData);\n    } catch (err) {\n      setError('Error al cargar facturas');\n      console.error('Error loading invoices:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOpenDialog = (invoice?: Invoice) => {\n    if (invoice) {\n      setEditingInvoice(invoice);\n      setFormData({\n        customer_id: invoice.customer_id,\n        invoice_date: invoice.invoice_date,\n        due_date: invoice.due_date,\n        currency: invoice.currency,\n        notes: invoice.notes || '',\n        lines: [],\n      });\n    } else {\n      setEditingInvoice(null);\n      setFormData({\n        customer_id: 0,\n        invoice_date: new Date().toISOString().split('T')[0],\n        due_date: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        currency: 'PYG',\n        notes: '',\n        lines: [],\n      });\n    }\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setEditingInvoice(null);\n  };\n\n  // Opciones de guardado que pidi√≥ el usuario\n  const handleSave = async () => {\n    try {\n      setProcessingAction('save');\n      \n      if (editingInvoice) {\n        await apiService.updateInvoice(editingInvoice.id, formData);\n      } else {\n        await apiService.createInvoice(formData);\n      }\n      \n      await loadData();\n      handleCloseDialog();\n    } catch (err) {\n      setError('Error al guardar factura');\n      console.error('Error saving invoice:', err);\n    } finally {\n      setProcessingAction('');\n    }\n  };\n\n  const handleSaveAndPrint = async () => {\n    try {\n      setProcessingAction('save_print');\n      \n      let invoiceId;\n      if (editingInvoice) {\n        await apiService.updateInvoice(editingInvoice.id, formData);\n        invoiceId = editingInvoice.id;\n      } else {\n        const newInvoice = await apiService.createInvoice(formData);\n        invoiceId = newInvoice.id;\n      }\n      \n      // Imprimir directamente despu√©s de guardar\n      await handlePrint({ id: invoiceId } as Invoice);\n      \n      await loadData();\n      handleCloseDialog();\n    } catch (err) {\n      setError('Error al guardar e imprimir factura');\n      console.error('Error saving and printing invoice:', err);\n    } finally {\n      setProcessingAction('');\n    }\n  };\n\n  const handlePrint = async (invoice: Invoice) => {\n    try {\n      setProcessingAction('print');\n      \n      // Generar PDF desde el backend y abrir en nueva ventana para imprimir\n      const response = await fetch(`/api/invoices/${invoice.id}/pdf`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error al generar PDF');\n      }\n      \n      // Convertir respuesta a blob y crear URL\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      \n      // Abrir PDF en nueva ventana para impresi√≥n\n      const printWindow = window.open(url, '_blank');\n      if (printWindow) {\n        printWindow.onload = () => {\n          printWindow.print();\n        };\n      }\n      \n      // Limpiar URL despu√©s de un tiempo\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n      }, 1000);\n      \n    } catch (err) {\n      setError('Error al imprimir factura');\n      console.error('Error printing invoice:', err);\n    } finally {\n      setProcessingAction('');\n    }\n  };\n\n  const handleGeneratePdf = async (invoice: Invoice) => {\n    try {\n      setProcessingAction('pdf');\n      \n      // Descargar PDF desde el backend\n      const response = await fetch(`/api/invoices/${invoice.id}/pdf`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error('Error al generar PDF');\n      }\n      \n      // Convertir respuesta a blob y crear descarga\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `factura_${invoice.invoice_number}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n    } catch (err) {\n      setError('Error al generar PDF');\n      console.error('Error generating PDF:', err);\n    } finally {\n      setProcessingAction('');\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'DRAFT': return 'default';\n      case 'SENT': return 'info';\n      case 'PAID': return 'success';\n      case 'OVERDUE': return 'error';\n      case 'PARTIALLY_PAID': return 'warning';\n      default: return 'default';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Encabezado */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n          Gesti√≥n de Facturas\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={() => handleOpenDialog()}\n        >\n          Nueva Factura\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Estad√≠sticas r√°pidas */}\n      <Grid container spacing={2} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <ReceiptIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {invoices.length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Facturas\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <CheckIcon sx={{ fontSize: 40, color: 'success.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {invoices.filter(i => i.status === 'PAID').length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Pagadas\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <PaymentIcon sx={{ fontSize: 40, color: 'warning.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {invoices.filter(i => i.status === 'OVERDUE').length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Vencidas\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <PdfIcon sx={{ fontSize: 40, color: 'info.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Gs. {invoices.reduce((sum, i) => sum + (i.balance_due || 0), 0).toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Por Cobrar\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tabla de facturas */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>N√∫mero</strong></TableCell>\n              <TableCell><strong>Cliente</strong></TableCell>\n              <TableCell><strong>Fecha</strong></TableCell>\n              <TableCell><strong>Vencimiento</strong></TableCell>\n              <TableCell><strong>Total</strong></TableCell>\n              <TableCell><strong>Pagado</strong></TableCell>\n              <TableCell><strong>Saldo</strong></TableCell>\n              <TableCell><strong>Estado</strong></TableCell>\n              <TableCell><strong>Acciones</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {invoices.map((invoice) => (\n              <TableRow key={invoice.id}>\n                <TableCell>{invoice.invoice_number}</TableCell>\n                <TableCell>{invoice.customer_name}</TableCell>\n                <TableCell>{new Date(invoice.invoice_date).toLocaleDateString()}</TableCell>\n                <TableCell>{new Date(invoice.due_date).toLocaleDateString()}</TableCell>\n                <TableCell>{invoice.currency} {invoice.total_amount.toLocaleString()}</TableCell>\n                <TableCell>{invoice.currency} {invoice.paid_amount.toLocaleString()}</TableCell>\n                <TableCell>\n                  <Typography \n                    color={invoice.balance_due > 0 ? 'error' : 'success.main'}\n                    fontWeight={invoice.balance_due > 0 ? 600 : 400}\n                  >\n                    {invoice.currency} {invoice.balance_due.toLocaleString()}\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={invoice.status} \n                    color={getStatusColor(invoice.status)}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <ButtonGroup size=\"small\" variant=\"outlined\">\n                    <Tooltip title=\"Editar\">\n                      <IconButton \n                        onClick={() => handleOpenDialog(invoice)}\n                        color=\"primary\"\n                        size=\"small\"\n                      >\n                        <EditIcon fontSize=\"small\" />\n                      </IconButton>\n                    </Tooltip>\n                    \n                    <Tooltip title=\"Imprimir\">\n                      <IconButton \n                        onClick={() => handlePrint(invoice)}\n                        color=\"info\"\n                        size=\"small\"\n                        disabled={processingAction === 'print'}\n                      >\n                        {processingAction === 'print' ? \n                          <CircularProgress size={16} /> : \n                          <PrintIcon fontSize=\"small\" />\n                        }\n                      </IconButton>\n                    </Tooltip>\n                    \n                    <Tooltip title=\"Descargar PDF\">\n                      <IconButton \n                        onClick={() => handleGeneratePdf(invoice)}\n                        color=\"secondary\"\n                        size=\"small\"\n                        disabled={processingAction === 'pdf'}\n                      >\n                        {processingAction === 'pdf' ? \n                          <CircularProgress size={16} /> : \n                          <PdfIcon fontSize=\"small\" />\n                        }\n                      </IconButton>\n                    </Tooltip>\n                  </ButtonGroup>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Dialog para crear/editar factura */}\n      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {editingInvoice ? 'Editar Factura' : 'Nueva Factura'}\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <Autocomplete\n                options={customers}\n                getOptionLabel={(option) => option.company_name}\n                value={customers.find(c => c.id === formData.customer_id) || null}\n                onChange={(_, value) => setFormData({...formData, customer_id: value?.id || 0})}\n                renderInput={(params) => <TextField {...params} label=\"Cliente *\" />}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                select\n                label=\"Moneda\"\n                value={formData.currency}\n                onChange={(e) => setFormData({...formData, currency: e.target.value})}\n              >\n                <MenuItem value=\"PYG\">Guaran√≠es (PYG)</MenuItem>\n                <MenuItem value=\"USD\">D√≥lares (USD)</MenuItem>\n              </TextField>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Fecha de Factura\"\n                type=\"date\"\n                value={formData.invoice_date}\n                onChange={(e) => setFormData({...formData, invoice_date: e.target.value})}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Fecha de Vencimiento\"\n                type=\"date\"\n                value={formData.due_date}\n                onChange={(e) => setFormData({...formData, due_date: e.target.value})}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Notas\"\n                multiline\n                rows={3}\n                value={formData.notes}\n                onChange={(e) => setFormData({...formData, notes: e.target.value})}\n              />\n            </Grid>\n            \n            {/* Informaci√≥n sobre productos */}\n            <Grid item xs={12}>\n              <Alert severity=\"info\">\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Agregar productos a la factura:\n                </Typography>\n                <Typography variant=\"body2\">\n                  Para agregar productos/servicios a esta factura, use el sistema de cotizaciones \n                  y convi√©rtalas a facturas, o implemente la funcionalidad de l√≠neas de productos aqu√≠.\n                </Typography>\n              </Alert>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>\n            Cancelar\n          </Button>\n          \n          <ButtonGroup variant=\"contained\">\n            <Button \n              onClick={handleSave} \n              disabled={!formData.customer_id || processingAction !== ''}\n              startIcon={processingAction === 'save' ? <CircularProgress size={16} /> : <SaveIcon />}\n            >\n              Guardar\n            </Button>\n            \n            <Button \n              onClick={handleSaveAndPrint} \n              disabled={!formData.customer_id || processingAction !== ''}\n              startIcon={processingAction === 'save_print' ? <CircularProgress size={16} /> : <PrintOutlinedIcon />}\n            >\n              Guardar e Imprimir\n            </Button>\n          </ButtonGroup>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}","size_bytes":17856},"frontend/src/pages/Login.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  Paper,\n  TextField,\n  Button,\n  Typography,\n  Container,\n  Alert,\n  InputAdornment,\n  IconButton,\n  CircularProgress,\n} from '@mui/material';\nimport {\n  Visibility,\n  VisibilityOff,\n  Business,\n  Person,\n  Lock,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\n\nexport default function Login() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  \n  const { login, user } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (user) {\n      navigate('/');\n    }\n  }, [user, navigate]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    try {\n      const success = await login(username, password);\n      if (success) {\n        navigate('/');\n      } else {\n        setError('Usuario o contrase√±a incorrectos');\n      }\n    } catch (error) {\n      setError('Error al conectar con el servidor');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"sm\">\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          minHeight: '100vh',\n        }}\n      >\n        <Paper\n          elevation={3}\n          sx={{\n            padding: 4,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            width: '100%',\n            borderRadius: 3,\n          }}\n        >\n          {/* Logo y t√≠tulo */}\n          <Box sx={{ textAlign: 'center', mb: 3 }}>\n            <Business sx={{ fontSize: 60, color: 'primary.main', mb: 2 }} />\n            <Typography component=\"h1\" variant=\"h4\" sx={{ fontWeight: 600, color: 'primary.main' }}>\n              Sistema de Gesti√≥n\n            </Typography>\n            <Typography variant=\"h6\" color=\"text.secondary\">\n              Paraguay - ERP/CRM\n            </Typography>\n          </Box>\n\n          {/* Formulario */}\n          <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 1, width: '100%' }}>\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 2 }}>\n                {error}\n              </Alert>\n            )}\n            \n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Usuario\"\n              name=\"username\"\n              autoComplete=\"username\"\n              autoFocus\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Person color=\"action\" />\n                  </InputAdornment>\n                ),\n              }}\n            />\n            \n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Contrase√±a\"\n              type={showPassword ? 'text' : 'password'}\n              id=\"password\"\n              autoComplete=\"current-password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <Lock color=\"action\" />\n                  </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"toggle password visibility\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      edge=\"end\"\n                    >\n                      {showPassword ? <VisibilityOff /> : <Visibility />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n            />\n            \n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2, py: 1.5, fontSize: '1.1rem' }}\n              disabled={loading}\n            >\n              {loading ? (\n                <CircularProgress size={24} color=\"inherit\" />\n              ) : (\n                'Iniciar Sesi√≥n'\n              )}\n            </Button>\n          </Box>\n\n          {/* Informaci√≥n adicional */}\n          <Box sx={{ mt: 2, textAlign: 'center' }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Sistema de gesti√≥n de ventas para empresas paraguayas\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n              Incluye gesti√≥n de r√©gimen de turismo, dep√≥sitos y multi-moneda\n            </Typography>\n          </Box>\n        </Paper>\n      </Box>\n    </Container>\n  );\n}","size_bytes":5161},"frontend/src/pages/Products.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Grid,\n  Alert,\n  CircularProgress,\n  Card,\n  CardContent,\n  MenuItem,\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  Inventory as InventoryIcon,\n  Category as CategoryIcon,\n  AttachMoney as MoneyIcon,\n  Warning as WarningIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { apiService } from '../services/api';\n\ninterface Product {\n  id: number;\n  name: string;\n  description?: string;\n  sku: string;\n  category_id?: number;\n  category_name?: string;\n  unit_price: number;\n  cost_price: number;\n  stock_quantity: number;\n  min_stock_level: number;\n  max_stock_level: number;\n  is_active: boolean;\n  expiry_date?: string;\n}\n\ninterface Category {\n  id: number;\n  name: string;\n}\n\nexport default function Products() {\n  const { user } = useAuth();\n  const [products, setProducts] = useState<Product[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  \n  // Formulario\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    sku: '',\n    category_id: 0,\n    unit_price: 0,\n    cost_price: 0,\n    stock_quantity: 0,\n    min_stock_level: 0,\n    max_stock_level: 100,\n    is_active: true,\n    expiry_date: '',\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [productsData, categoriesData] = await Promise.all([\n        apiService.getProducts({ limit: 1000 }),\n        apiService.getProductCategories()\n      ]);\n      \n      setProducts(productsData);\n      setCategories(categoriesData);\n    } catch (err) {\n      setError('Error al cargar productos');\n      console.error('Error loading products:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOpenDialog = (product?: Product) => {\n    if (product) {\n      setEditingProduct(product);\n      setFormData({\n        name: product.name,\n        description: product.description || '',\n        sku: product.sku,\n        category_id: product.category_id || 0,\n        unit_price: product.unit_price,\n        cost_price: product.cost_price,\n        stock_quantity: product.stock_quantity,\n        min_stock_level: product.min_stock_level,\n        max_stock_level: product.max_stock_level,\n        is_active: product.is_active,\n        expiry_date: product.expiry_date || '',\n      });\n    } else {\n      setEditingProduct(null);\n      setFormData({\n        name: '',\n        description: '',\n        sku: '',\n        category_id: 0,\n        unit_price: 0,\n        cost_price: 0,\n        stock_quantity: 0,\n        min_stock_level: 0,\n        max_stock_level: 100,\n        is_active: true,\n        expiry_date: '',\n      });\n    }\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setEditingProduct(null);\n  };\n\n  const handleSubmit = async () => {\n    try {\n      if (editingProduct) {\n        await apiService.updateProduct(editingProduct.id, formData);\n      } else {\n        await apiService.createProduct(formData);\n      }\n      \n      await loadData();\n      handleCloseDialog();\n    } catch (err) {\n      setError('Error al guardar producto');\n      console.error('Error saving product:', err);\n    }\n  };\n\n  const isLowStock = (product: Product) => {\n    return product.stock_quantity <= product.min_stock_level;\n  };\n\n  const isExpiringSoon = (expiryDate?: string) => {\n    if (!expiryDate) return false;\n    const expiry = new Date(expiryDate);\n    const today = new Date();\n    const daysUntilExpiry = Math.ceil((expiry.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    return daysUntilExpiry <= 30 && daysUntilExpiry >= 0;\n  };\n\n  const isExpired = (expiryDate?: string) => {\n    if (!expiryDate) return false;\n    const expiry = new Date(expiryDate);\n    const today = new Date();\n    return expiry < today;\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Encabezado */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n          Gesti√≥n de Productos\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={() => handleOpenDialog()}\n        >\n          Nuevo Producto\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Estad√≠sticas r√°pidas */}\n      <Grid container spacing={2} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <InventoryIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {products.length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Productos\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <WarningIcon sx={{ fontSize: 40, color: 'warning.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {products.filter(p => isLowStock(p)).length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Stock Bajo\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <CategoryIcon sx={{ fontSize: 40, color: 'info.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {categories.length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Categor√≠as\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <MoneyIcon sx={{ fontSize: 40, color: 'success.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Gs. {products.reduce((sum, p) => sum + (p.unit_price * p.stock_quantity), 0).toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Valor Inventario\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Alertas de productos */}\n      {products.filter(p => isLowStock(p) || isExpiringSoon(p.expiry_date) || isExpired(p.expiry_date)).length > 0 && (\n        <Alert severity=\"warning\" sx={{ mb: 3 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Productos que requieren atenci√≥n:\n          </Typography>\n          <ul style={{ margin: 0, paddingLeft: 20 }}>\n            {products.filter(p => isLowStock(p)).map(p => (\n              <li key={p.id}>\n                <strong>{p.name}</strong> - Stock bajo ({p.stock_quantity} unidades)\n              </li>\n            ))}\n            {products.filter(p => isExpired(p.expiry_date)).map(p => (\n              <li key={p.id}>\n                <strong>{p.name}</strong> - Producto vencido\n              </li>\n            ))}\n            {products.filter(p => isExpiringSoon(p.expiry_date) && !isExpired(p.expiry_date)).map(p => (\n              <li key={p.id}>\n                <strong>{p.name}</strong> - Vence pronto\n              </li>\n            ))}\n          </ul>\n        </Alert>\n      )}\n\n      {/* Tabla de productos */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>Producto</strong></TableCell>\n              <TableCell><strong>SKU</strong></TableCell>\n              <TableCell><strong>Categor√≠a</strong></TableCell>\n              <TableCell><strong>Precio</strong></TableCell>\n              <TableCell><strong>Stock</strong></TableCell>\n              <TableCell><strong>Vencimiento</strong></TableCell>\n              <TableCell><strong>Estado</strong></TableCell>\n              <TableCell><strong>Acciones</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {products.map((product) => (\n              <TableRow key={product.id}>\n                <TableCell>\n                  <Box>\n                    <Typography variant=\"subtitle2\" fontWeight={600}>\n                      {product.name}\n                    </Typography>\n                    {product.description && (\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {product.description}\n                      </Typography>\n                    )}\n                  </Box>\n                </TableCell>\n                <TableCell>{product.sku}</TableCell>\n                <TableCell>{product.category_name || '-'}</TableCell>\n                <TableCell>Gs. {product.unit_price.toLocaleString()}</TableCell>\n                <TableCell>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    <Typography\n                      variant=\"body2\"\n                      color={isLowStock(product) ? 'error' : 'text.primary'}\n                      fontWeight={isLowStock(product) ? 600 : 400}\n                    >\n                      {product.stock_quantity}\n                    </Typography>\n                    {isLowStock(product) && (\n                      <Chip \n                        label=\"Bajo\" \n                        color=\"warning\" \n                        size=\"small\"\n                      />\n                    )}\n                  </Box>\n                </TableCell>\n                <TableCell>\n                  {product.expiry_date ? (\n                    <Box>\n                      <Typography \n                        variant=\"body2\"\n                        color={\n                          isExpired(product.expiry_date) ? 'error' :\n                          isExpiringSoon(product.expiry_date) ? 'warning.main' : 'text.primary'\n                        }\n                      >\n                        {new Date(product.expiry_date).toLocaleDateString()}\n                      </Typography>\n                      {isExpired(product.expiry_date) && (\n                        <Chip label=\"Vencido\" color=\"error\" size=\"small\" />\n                      )}\n                      {isExpiringSoon(product.expiry_date) && !isExpired(product.expiry_date) && (\n                        <Chip label=\"Vence pronto\" color=\"warning\" size=\"small\" />\n                      )}\n                    </Box>\n                  ) : '-'}\n                </TableCell>\n                <TableCell>\n                  <Chip \n                    label={product.is_active ? 'Activo' : 'Inactivo'} \n                    color={product.is_active ? 'success' : 'default'}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <IconButton \n                    onClick={() => handleOpenDialog(product)}\n                    color=\"primary\"\n                    size=\"small\"\n                  >\n                    <EditIcon />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Dialog para crear/editar producto */}\n      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          {editingProduct ? 'Editar Producto' : 'Nuevo Producto'}\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Nombre del Producto *\"\n                value={formData.name}\n                onChange={(e) => setFormData({...formData, name: e.target.value})}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"SKU/C√≥digo\"\n                value={formData.sku}\n                onChange={(e) => setFormData({...formData, sku: e.target.value})}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                label=\"Descripci√≥n\"\n                multiline\n                rows={2}\n                value={formData.description}\n                onChange={(e) => setFormData({...formData, description: e.target.value})}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                select\n                label=\"Categor√≠a\"\n                value={formData.category_id}\n                onChange={(e) => setFormData({...formData, category_id: Number(e.target.value)})}\n              >\n                <MenuItem value={0}>Sin categor√≠a</MenuItem>\n                {categories.map((category) => (\n                  <MenuItem key={category.id} value={category.id}>\n                    {category.name}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Fecha de Vencimiento\"\n                type=\"date\"\n                value={formData.expiry_date}\n                onChange={(e) => setFormData({...formData, expiry_date: e.target.value})}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Precio de Venta\"\n                type=\"number\"\n                value={formData.unit_price}\n                onChange={(e) => setFormData({...formData, unit_price: Number(e.target.value)})}\n                InputProps={{\n                  startAdornment: <Typography sx={{ mr: 1 }}>Gs.</Typography>,\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                fullWidth\n                label=\"Precio de Costo\"\n                type=\"number\"\n                value={formData.cost_price}\n                onChange={(e) => setFormData({...formData, cost_price: Number(e.target.value)})}\n                InputProps={{\n                  startAdornment: <Typography sx={{ mr: 1 }}>Gs.</Typography>,\n                }}\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <TextField\n                fullWidth\n                label=\"Stock Actual\"\n                type=\"number\"\n                value={formData.stock_quantity}\n                onChange={(e) => setFormData({...formData, stock_quantity: Number(e.target.value)})}\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <TextField\n                fullWidth\n                label=\"Stock M√≠nimo\"\n                type=\"number\"\n                value={formData.min_stock_level}\n                onChange={(e) => setFormData({...formData, min_stock_level: Number(e.target.value)})}\n              />\n            </Grid>\n            <Grid item xs={12} sm={4}>\n              <TextField\n                fullWidth\n                label=\"Stock M√°ximo\"\n                type=\"number\"\n                value={formData.max_stock_level}\n                onChange={(e) => setFormData({...formData, max_stock_level: Number(e.target.value)})}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleSubmit} \n            variant=\"contained\"\n            disabled={!formData.name}\n          >\n            {editingProduct ? 'Actualizar' : 'Crear'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n}","size_bytes":16918},"frontend/src/pages/Quotes.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  IconButton,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  Alert,\n  CircularProgress,\n  Autocomplete,\n  Card,\n  CardContent,\n  Divider,\n  Fab,\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Print as PrintIcon,\n  Download as DownloadIcon,\n  Save as SaveIcon,\n  Remove as RemoveIcon,\n  Business as BusinessIcon,\n  Description as DescriptionIcon,\n  PictureAsPdf as PdfIcon,\n  Person as PersonIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { apiService } from '../services/api';\n\ninterface Customer {\n  id: number;\n  company_name: string;\n}\n\ninterface Product {\n  id: number;\n  name: string;\n  description?: string;\n  unit_price: number;\n  category_name?: string;\n  stock_quantity: number;\n}\n\ninterface QuoteLine {\n  product_id: number;\n  product_name?: string;\n  quantity: number;\n  unit_price: number;\n  discount: number;\n  subtotal: number;\n}\n\ninterface Quote {\n  id: number;\n  quote_number: string;\n  customer_id: number;\n  customer_name: string;\n  quote_date: string;\n  valid_until: string;\n  status: string;\n  subtotal: number;\n  tax_amount: number;\n  total_amount: number;\n  notes?: string;\n  terms_conditions?: string;\n  lines: QuoteLine[];\n}\n\n// Robust number formatter to prevent toLocaleString crashes\nconst formatNumber = (n?: number): string => (n ?? 0).toLocaleString();\n\nexport default function Quotes() {\n  const { user } = useAuth();\n  const [quotes, setQuotes] = useState<Quote[]>([]);\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingQuote, setEditingQuote] = useState<Quote | null>(null);\n  const [generatingPdf, setGeneratingPdf] = useState(false);\n  \n  // Formulario de cotizaci√≥n\n  const [formData, setFormData] = useState({\n    customer_id: 0,\n    quote_date: new Date().toISOString().split('T')[0],\n    valid_until: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 d√≠as\n    notes: '',\n    terms_conditions: 'Precios v√°lidos por 30 d√≠as. No incluye IVA. Tiempo de entrega: 7 d√≠as h√°biles.',\n  });\n\n  // L√≠neas de productos en la cotizaci√≥n\n  const [quoteLines, setQuoteLines] = useState<QuoteLine[]>([]);\n  \n  // Producto seleccionado para agregar\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [productQuantity, setProductQuantity] = useState(1);\n  const [productDiscount, setProductDiscount] = useState(0);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [quotesData, customersData, productsData] = await Promise.all([\n        apiService.getQuotes({ limit: 1000 }),\n        apiService.getCustomers({ limit: 1000, is_active: true }),\n        apiService.getProducts({ limit: 1000 })\n      ]);\n      \n      setQuotes(quotesData);\n      setCustomers(customersData);\n      setProducts(productsData);\n    } catch (err) {\n      setError('Error al cargar datos');\n      console.error('Error loading data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOpenDialog = (quote?: Quote) => {\n    if (quote) {\n      setEditingQuote(quote);\n      setFormData({\n        customer_id: quote.customer_id,\n        quote_date: quote.quote_date,\n        valid_until: quote.valid_until,\n        notes: quote.notes || '',\n        terms_conditions: quote.terms_conditions || '',\n      });\n      setQuoteLines(quote.lines || []);\n    } else {\n      setEditingQuote(null);\n      setFormData({\n        customer_id: 0,\n        quote_date: new Date().toISOString().split('T')[0],\n        valid_until: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        notes: '',\n        terms_conditions: 'Precios v√°lidos por 30 d√≠as. No incluye IVA. Tiempo de entrega: 7 d√≠as h√°biles.',\n      });\n      setQuoteLines([]);\n    }\n    setDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setDialogOpen(false);\n    setEditingQuote(null);\n    setQuoteLines([]);\n    // Limpiar campos de producto\n    setSelectedProduct(null);\n    setProductQuantity(1);\n    setProductDiscount(0);\n  };\n\n  const handleAddProduct = () => {\n    if (!selectedProduct) return;\n    \n    const existingLineIndex = quoteLines.findIndex(line => line.product_id === selectedProduct.id);\n    \n    if (existingLineIndex >= 0) {\n      // Actualizar l√≠nea existente\n      const updatedLines = [...quoteLines];\n      updatedLines[existingLineIndex].quantity += productQuantity;\n      updatedLines[existingLineIndex].discount = productDiscount;\n      updatedLines[existingLineIndex].subtotal = \n        updatedLines[existingLineIndex].quantity * updatedLines[existingLineIndex].unit_price * \n        (1 - productDiscount / 100);\n      setQuoteLines(updatedLines);\n    } else {\n      // Agregar nueva l√≠nea - NO AFECTA STOCK\n      const newLine: QuoteLine = {\n        product_id: selectedProduct.id,\n        product_name: selectedProduct.name,\n        quantity: productQuantity,\n        unit_price: selectedProduct.unit_price,\n        discount: productDiscount,\n        subtotal: productQuantity * selectedProduct.unit_price * (1 - productDiscount / 100),\n      };\n      setQuoteLines([...quoteLines, newLine]);\n    }\n    \n    setSelectedProduct(null);\n    setProductQuantity(1);\n    setProductDiscount(0);\n  };\n\n  const handleRemoveProduct = (productId: number) => {\n    setQuoteLines(quoteLines.filter(line => line.product_id !== productId));\n  };\n\n  const handleUpdateLine = (index: number, field: keyof QuoteLine, value: any) => {\n    const updatedLines = [...quoteLines];\n    updatedLines[index] = { ...updatedLines[index], [field]: value };\n    \n    // Recalcular subtotal\n    if (field === 'quantity' || field === 'unit_price' || field === 'discount') {\n      updatedLines[index].subtotal = \n        updatedLines[index].quantity * \n        updatedLines[index].unit_price * \n        (1 - updatedLines[index].discount / 100);\n    }\n    \n    setQuoteLines(updatedLines);\n  };\n\n  const calculateTotals = () => {\n    const subtotal = quoteLines.reduce((sum, line) => sum + line.subtotal, 0);\n    const taxAmount = subtotal * 0.1; // 10% IVA\n    const total = subtotal + taxAmount;\n    \n    return { subtotal, taxAmount, total };\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const totals = calculateTotals();\n      const quoteData = {\n        ...formData,\n        lines: quoteLines.map(line => ({\n          product_id: line.product_id,\n          quantity: line.quantity,\n          unit_price: line.unit_price,\n          discount: line.discount,\n        })),\n        subtotal: totals.subtotal,\n        tax_amount: totals.taxAmount,\n        total_amount: totals.total,\n      };\n\n      if (editingQuote) {\n        await apiService.updateQuote(editingQuote.id, quoteData);\n      } else {\n        await apiService.createQuote(quoteData);\n      }\n      \n      await loadData();\n      handleCloseDialog();\n    } catch (err) {\n      setError('Error al guardar cotizaci√≥n');\n      console.error('Error saving quote:', err);\n    }\n  };\n\n  const handleGeneratePdf = async (quote: Quote) => {\n    try {\n      setGeneratingPdf(true);\n      await apiService.generateQuotePdf(quote.id);\n      \n      // Descargar autom√°ticamente\n      const blob = await apiService.downloadQuotePdf(quote.id);\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `cotizacion_${quote.quote_number}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      setError('Error al generar PDF');\n      console.error('Error generating PDF:', err);\n    } finally {\n      setGeneratingPdf(false);\n    }\n  };\n\n  const handlePrint = async (quote: Quote) => {\n    try {\n      setGeneratingPdf(true);\n      const blob = await apiService.downloadQuotePdf(quote.id);\n      const url = window.URL.createObjectURL(blob);\n      \n      // Abrir en nueva ventana para imprimir\n      const printWindow = window.open(url, '_blank');\n      if (printWindow) {\n        printWindow.onload = () => {\n          printWindow.print();\n        };\n      }\n      \n      window.URL.revokeObjectURL(url);\n    } catch (err) {\n      setError('Error al imprimir cotizaci√≥n');\n      console.error('Error printing quote:', err);\n    } finally {\n      setGeneratingPdf(false);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'DRAFT': return 'default';\n      case 'SENT': return 'info';\n      case 'ACCEPTED': return 'success';\n      case 'REJECTED': return 'error';\n      case 'EXPIRED': return 'warning';\n      default: return 'default';\n    }\n  };\n\n  const totals = calculateTotals();\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Encabezado */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n          Gesti√≥n de Cotizaciones\n        </Typography>\n        <Button\n          variant=\"contained\"\n          startIcon={<AddIcon />}\n          onClick={() => handleOpenDialog()}\n          disabled={!user?.can_create_quotes}\n        >\n          Nueva Cotizaci√≥n\n        </Button>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Estad√≠sticas r√°pidas */}\n      <Grid container spacing={2} mb={3}>\n        <Grid {...({ item: true, xs: 12, sm: 6, md: 3 } as any)}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <DescriptionIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {quotes.length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Total Cotizaciones\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid {...({ item: true, xs: 12, sm: 6, md: 3 } as any)}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <BusinessIcon sx={{ fontSize: 40, color: 'success.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {quotes.filter(q => q.status === 'ACCEPTED').length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Aceptadas\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid {...({ item: true, xs: 12, sm: 6, md: 3 } as any)}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <SaveIcon sx={{ fontSize: 40, color: 'info.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                {quotes.filter(q => q.status === 'DRAFT').length}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Borradores\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid {...({ item: true, xs: 12, sm: 6, md: 3 } as any)}>\n          <Card>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <PdfIcon sx={{ fontSize: 40, color: 'secondary.main', mb: 1 }} />\n              <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                Gs. {formatNumber(quotes.reduce((sum, q) => sum + (q.total_amount || 0), 0))}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Valor Total\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Tabla de cotizaciones */}\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell><strong>N√∫mero</strong></TableCell>\n              <TableCell><strong>Cliente</strong></TableCell>\n              <TableCell><strong>Fecha</strong></TableCell>\n              <TableCell><strong>V√°lida Hasta</strong></TableCell>\n              <TableCell><strong>Total</strong></TableCell>\n              <TableCell><strong>Estado</strong></TableCell>\n              <TableCell><strong>Acciones</strong></TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {quotes.map((quote) => (\n              <TableRow key={quote.id}>\n                <TableCell>{quote.quote_number}</TableCell>\n                <TableCell>{quote.customer_name}</TableCell>\n                <TableCell>{new Date(quote.quote_date).toLocaleDateString()}</TableCell>\n                <TableCell>{new Date(quote.valid_until).toLocaleDateString()}</TableCell>\n                <TableCell>Gs. {formatNumber(quote.total_amount)}</TableCell>\n                <TableCell>\n                  <Chip \n                    label={quote.status} \n                    color={getStatusColor(quote.status)}\n                    size=\"small\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <IconButton \n                    onClick={() => handleOpenDialog(quote)}\n                    color=\"primary\"\n                    size=\"small\"\n                  >\n                    <EditIcon />\n                  </IconButton>\n                  <IconButton \n                    onClick={() => handleGeneratePdf(quote)}\n                    color=\"secondary\"\n                    size=\"small\"\n                    disabled={generatingPdf}\n                  >\n                    <DownloadIcon />\n                  </IconButton>\n                  <IconButton \n                    onClick={() => handlePrint(quote)}\n                    color=\"info\"\n                    size=\"small\"\n                    disabled={generatingPdf}\n                  >\n                    <PrintIcon />\n                  </IconButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n      {/* Dialog para crear/editar cotizaci√≥n */}\n      <Dialog open={dialogOpen} onClose={handleCloseDialog} maxWidth=\"lg\" fullWidth>\n        <DialogTitle>\n          {editingQuote ? 'Editar Cotizaci√≥n' : 'Nueva Cotizaci√≥n'}\n        </DialogTitle>\n        <DialogContent>\n          <Grid container spacing={2} sx={{ mt: 1 }}>\n            {/* Informaci√≥n b√°sica */}\n            <Grid {...({ item: true, xs: 12, sm: 6 } as any)}>\n              <Autocomplete<Customer, false, false, false>\n                options={customers}\n                getOptionLabel={(option) => option?.company_name || ''}\n                value={customers.find(c => c.id === formData.customer_id) || null}\n                onChange={(_, value) => setFormData({...formData, customer_id: value?.id || 0})}\n                isOptionEqualToValue={(option, value) => option.id === value.id}\n                renderInput={(params) => <TextField {...params} label=\"Cliente *\" placeholder=\"Escriba para buscar clientes...\" />}\n                filterOptions={(options, { inputValue }) => {\n                  const filtered = options.filter(option =>\n                    option?.company_name?.toLowerCase().includes(inputValue.toLowerCase())\n                  );\n                  return filtered.slice(0, 50); // Limitar resultados para mejor rendimiento\n                }}\n                renderOption={(props, option) => (\n                  <Box component=\"li\" {...props} key={option.id}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', py: 1, '&:hover': { bgcolor: 'action.hover' } }}>\n                      <PersonIcon sx={{ mr: 2, color: 'primary.main', fontSize: 20 }} />\n                      <Box sx={{ flex: 1 }}>\n                        <Typography variant=\"body1\" sx={{ fontWeight: 500 }}>\n                          {option?.company_name || 'Sin nombre'}\n                        </Typography>\n                      </Box>\n                    </Box>\n                  </Box>\n                )}\n                noOptionsText=\"No se encontraron clientes\"\n                loadingText=\"Cargando clientes...\"\n                loading={loading}\n              />\n            </Grid>\n            <Grid {...({ item: true, xs: 12, sm: 3 } as any)}>\n              <TextField\n                fullWidth\n                label=\"Fecha de Cotizaci√≥n\"\n                type=\"date\"\n                value={formData.quote_date}\n                onChange={(e) => setFormData({...formData, quote_date: e.target.value})}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n            <Grid {...({ item: true, xs: 12, sm: 3 } as any)}>\n              <TextField\n                fullWidth\n                label=\"V√°lida Hasta\"\n                type=\"date\"\n                value={formData.valid_until}\n                onChange={(e) => setFormData({...formData, valid_until: e.target.value})}\n                InputLabelProps={{ shrink: true }}\n              />\n            </Grid>\n\n            {/* Productos */}\n            <Grid {...({ item: true, xs: 12 } as any)}>\n              <Paper sx={{ p: 2, mt: 2 }}>\n                <Typography variant=\"h6\" mb={2}>Productos/Servicios</Typography>\n                \n                {/* Autocompletado directo para productos */}\n                <Grid container spacing={2} alignItems=\"end\" mb={2}>\n                  <Grid {...({ item: true, xs: 12, sm: 5 } as any)}>\n                    <Autocomplete<Product, false, false, false>\n                      options={products}\n                      getOptionLabel={(option) => option ? `${option.name || 'Sin nombre'} - Gs. ${formatNumber(option.unit_price)} (Stock: ${option.stock_quantity || 0})` : ''}\n                      value={selectedProduct}\n                      onChange={(_, value) => setSelectedProduct(value)}\n                      isOptionEqualToValue={(option, value) => option.id === value.id}\n                      renderInput={(params) => <TextField {...params} label=\"Producto\" placeholder=\"Escriba para buscar productos...\" />}\n                      filterOptions={(options, { inputValue }) => {\n                        const filtered = options.filter(option =>\n                          option?.name?.toLowerCase().includes(inputValue.toLowerCase()) ||\n                          (option?.description && option.description.toLowerCase().includes(inputValue.toLowerCase())) ||\n                          (option?.category_name && option.category_name.toLowerCase().includes(inputValue.toLowerCase()))\n                        );\n                        return filtered.slice(0, 100);\n                      }}\n                      renderOption={(props, option) => (\n                        <Box component=\"li\" {...props} key={option.id}>\n                          <Box sx={{ display: 'flex', flexDirection: 'column', width: '100%', py: 1 }}>\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>\n                              <Box sx={{ flex: 1 }}>\n                                <Typography variant=\"body1\" sx={{ fontWeight: 500, mb: 0.5 }}>\n                                  {option.name}\n                                </Typography>\n                                <Typography variant=\"body2\" color=\"text.secondary\">\n                                  {option.description || 'Sin descripci√≥n'}\n                                </Typography>\n                                {option.category_name && (\n                                  <Typography variant=\"caption\" color=\"text.secondary\" sx={{ display: 'block', mt: 0.5 }}>\n                                    Categor√≠a: {option.category_name}\n                                  </Typography>\n                                )}\n                              </Box>\n                              <Box sx={{ textAlign: 'right', ml: 2 }}>\n                                <Typography variant=\"body1\" color=\"primary.main\" sx={{ fontWeight: 600 }}>\n                                  Gs. {formatNumber(option.unit_price)}\n                                </Typography>\n                                <Typography \n                                  variant=\"body2\" \n                                  color={(option.stock_quantity || 0) > 0 ? 'success.main' : 'error.main'}\n                                  sx={{ fontWeight: 500, mt: 0.5 }}\n                                >\n                                  Stock: {option.stock_quantity || 0}\n                                </Typography>\n                                {(option.stock_quantity || 0) === 0 && (\n                                  <Typography variant=\"caption\" color=\"error.main\">\n                                    Sin stock\n                                  </Typography>\n                                )}\n                              </Box>\n                            </Box>\n                          </Box>\n                        </Box>\n                      )}\n                      noOptionsText=\"No se encontraron productos\"\n                      loadingText=\"Cargando productos...\"\n                      loading={loading}\n                    />\n                  </Grid>\n                  <Grid {...({ item: true, xs: 12, sm: 2 } as any)}>\n                    <TextField\n                      fullWidth\n                      label=\"Cantidad\"\n                      type=\"number\"\n                      value={productQuantity}\n                      onChange={(e) => setProductQuantity(Number(e.target.value))}\n                      inputProps={{ min: 1 }}\n                    />\n                  </Grid>\n                  <Grid {...({ item: true, xs: 12, sm: 2 } as any)}>\n                    <TextField\n                      fullWidth\n                      label=\"Descuento %\"\n                      type=\"number\"\n                      value={productDiscount}\n                      onChange={(e) => setProductDiscount(Number(e.target.value))}\n                      inputProps={{ min: 0, max: 100 }}\n                    />\n                  </Grid>\n                  <Grid {...({ item: true, xs: 12, sm: 3 } as any)}>\n                    <Button\n                      fullWidth\n                      variant=\"contained\"\n                      startIcon={<AddIcon />}\n                      onClick={handleAddProduct}\n                      disabled={!selectedProduct || productQuantity <= 0}\n                      sx={{ py: 1.5 }}\n                    >\n                      Agregar\n                    </Button>\n                  </Grid>\n                </Grid>\n\n                {selectedProduct && (\n                  <Alert severity=\"info\" sx={{ mb: 2 }}>\n                    <strong>Nota:</strong> Los productos en cotizaciones NO afectan el stock del inventario. \n                    El stock solo se reduce cuando se convierte en venta o factura.\n                  </Alert>\n                )}\n\n                {/* Lista de productos agregados */}\n                {quoteLines.length === 0 ? (\n                  <Typography variant=\"body2\" color=\"text.secondary\" textAlign=\"center\" py={3}>\n                    No hay productos agregados. Seleccione un producto y haga clic en \"Agregar\".\n                  </Typography>\n                ) : (\n                  <TableContainer>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>Producto</TableCell>\n                          <TableCell align=\"right\">Cant.</TableCell>\n                          <TableCell align=\"right\">Precio Unit.</TableCell>\n                          <TableCell align=\"right\">Desc. %</TableCell>\n                          <TableCell align=\"right\">Subtotal</TableCell>\n                          <TableCell align=\"center\">Acci√≥n</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {quoteLines.map((line, index) => (\n                          <TableRow key={line.product_id}>\n                            <TableCell>{line.product_name}</TableCell>\n                            <TableCell align=\"right\">\n                              <TextField\n                                size=\"small\"\n                                type=\"number\"\n                                value={line.quantity}\n                                onChange={(e) => handleUpdateLine(index, 'quantity', Number(e.target.value))}\n                                sx={{ width: 80 }}\n                              />\n                            </TableCell>\n                            <TableCell align=\"right\">\n                              <TextField\n                                size=\"small\"\n                                type=\"number\"\n                                value={line.unit_price}\n                                onChange={(e) => handleUpdateLine(index, 'unit_price', Number(e.target.value))}\n                                sx={{ width: 100 }}\n                              />\n                            </TableCell>\n                            <TableCell align=\"right\">\n                              <TextField\n                                size=\"small\"\n                                type=\"number\"\n                                value={line.discount}\n                                onChange={(e) => handleUpdateLine(index, 'discount', Number(e.target.value))}\n                                sx={{ width: 70 }}\n                              />\n                            </TableCell>\n                            <TableCell align=\"right\">\n                              Gs. {formatNumber(line.subtotal)}\n                            </TableCell>\n                            <TableCell align=\"center\">\n                              <IconButton\n                                size=\"small\"\n                                color=\"error\"\n                                onClick={() => handleRemoveProduct(line.product_id)}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                )}\n\n                {/* Totales */}\n                {quoteLines.length > 0 && (\n                  <Box mt={2}>\n                    <Divider sx={{ mb: 2 }} />\n                    <Grid container spacing={2}>\n                      <Grid {...({ item: true, xs: 12, sm: 6 } as any)}>\n                        {/* Espacio vac√≠o */}\n                      </Grid>\n                      <Grid {...({ item: true, xs: 12, sm: 6 } as any)}>\n                        <Box textAlign=\"right\">\n                          <Typography variant=\"body1\">\n                            Subtotal: <strong>Gs. {formatNumber(totals.subtotal)}</strong>\n                          </Typography>\n                          <Typography variant=\"body1\">\n                            IVA (10%): <strong>Gs. {formatNumber(totals.taxAmount)}</strong>\n                          </Typography>\n                          <Typography variant=\"h6\" color=\"primary\">\n                            Total: <strong>Gs. {formatNumber(totals.total)}</strong>\n                          </Typography>\n                        </Box>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                )}\n              </Paper>\n            </Grid>\n\n            {/* Notas y t√©rminos */}\n            <Grid {...({ item: true, xs: 12, sm: 6 } as any)}>\n              <TextField\n                fullWidth\n                label=\"Notas\"\n                multiline\n                rows={3}\n                value={formData.notes}\n                onChange={(e) => setFormData({...formData, notes: e.target.value})}\n              />\n            </Grid>\n            <Grid {...({ item: true, xs: 12, sm: 6 } as any)}>\n              <TextField\n                fullWidth\n                label=\"T√©rminos y Condiciones\"\n                multiline\n                rows={3}\n                value={formData.terms_conditions}\n                onChange={(e) => setFormData({...formData, terms_conditions: e.target.value})}\n              />\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDialog}>\n            Cancelar\n          </Button>\n          <Button \n            onClick={handleSubmit} \n            variant=\"contained\"\n            disabled={!formData.customer_id || quoteLines.length === 0}\n          >\n            {editingQuote ? 'Actualizar' : 'Crear'}\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n      {/* FAB para acciones r√°pidas */}\n      {generatingPdf && (\n        <Fab\n          color=\"primary\"\n          sx={{ position: 'fixed', bottom: 16, right: 16 }}\n          disabled\n        >\n          <CircularProgress size={24} color=\"inherit\" />\n        </Fab>\n      )}\n    </Box>\n  );\n}","size_bytes":29749},"frontend/src/pages/Reports.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Alert,\n  CircularProgress,\n  Button,\n  ButtonGroup,\n  TextField,\n  MenuItem,\n} from '@mui/material';\nimport {\n  Assessment as AssessmentIcon,\n  TrendingUp as TrendingUpIcon,\n  People as PeopleIcon,\n  Receipt as ReceiptIcon,\n  AccountBalance as AccountBalanceIcon,\n  AttachMoney as MoneyIcon,\n  Download as DownloadIcon,\n  Print as PrintIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { apiService } from '../services/api';\n\ninterface ReportData {\n  customers: {\n    total: number;\n    with_tourism_regime: number;\n    active: number;\n  };\n  quotes: {\n    total: number;\n    by_status: Record<string, number>;\n    total_value: number;\n  };\n  invoices: {\n    total: number;\n    paid: number;\n    overdue: number;\n    total_value: number;\n    pending_amount: number;\n  };\n  deposits: {\n    total: number;\n    active: number;\n    total_value: number;\n    by_type: Record<string, number>;\n  };\n}\n\nexport default function Reports() {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [reportData, setReportData] = useState<ReportData | null>(null);\n  const [dateRange, setDateRange] = useState({\n    from: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],\n    to: new Date().toISOString().split('T')[0],\n  });\n  const [reportType, setReportType] = useState('general');\n\n  useEffect(() => {\n    loadReportData();\n  }, [dateRange]);\n\n  const loadReportData = async () => {\n    try {\n      setLoading(true);\n      \n      // Cargar datos desde m√∫ltiples endpoints\n      const [customers, quotes, invoices, deposits] = await Promise.all([\n        apiService.getCustomers({ limit: 10000 }),\n        apiService.getQuotes({ limit: 10000 }),\n        apiService.getInvoices({ limit: 10000 }),\n        apiService.getDeposits({ limit: 10000 })\n      ]);\n\n      // Procesar datos para el reporte\n      const processedData: ReportData = {\n        customers: {\n          total: customers.length,\n          with_tourism_regime: customers.filter((c: any) => c.tourism_regime).length,\n          active: customers.filter((c: any) => c.is_active).length,\n        },\n        quotes: {\n          total: quotes.length,\n          by_status: quotes.reduce((acc: any, quote: any) => {\n            acc[quote.status] = (acc[quote.status] || 0) + 1;\n            return acc;\n          }, {}),\n          total_value: quotes.reduce((sum: number, quote: any) => sum + (quote.total_amount || 0), 0),\n        },\n        invoices: {\n          total: invoices.length,\n          paid: invoices.filter((i: any) => i.status === 'PAID').length,\n          overdue: invoices.filter((i: any) => i.status === 'OVERDUE').length,\n          total_value: invoices.reduce((sum: number, invoice: any) => sum + (invoice.total_amount || 0), 0),\n          pending_amount: invoices.reduce((sum: number, invoice: any) => sum + (invoice.balance_due || 0), 0),\n        },\n        deposits: {\n          total: deposits.length,\n          active: deposits.filter((d: any) => d.status === 'ACTIVE').length,\n          total_value: deposits.reduce((sum: number, deposit: any) => sum + (deposit.available_amount || 0), 0),\n          by_type: deposits.reduce((acc: any, deposit: any) => {\n            acc[deposit.deposit_type] = (acc[deposit.deposit_type] || 0) + 1;\n            return acc;\n          }, {}),\n        },\n      };\n\n      setReportData(processedData);\n    } catch (err) {\n      setError('Error al cargar datos del reporte');\n      console.error('Error loading report data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExportReport = (format: 'pdf' | 'excel') => {\n    // Simular exportaci√≥n de reporte\n    if (format === 'pdf') {\n      const printWindow = window.open('', '_blank');\n      if (printWindow) {\n        printWindow.document.write(`\n          <html>\n            <head>\n              <title>Reporte de Gesti√≥n de Ventas</title>\n              <style>\n                body { font-family: Arial, sans-serif; margin: 40px; }\n                .header { text-align: center; margin-bottom: 30px; }\n                .section { margin-bottom: 20px; }\n                .metric { display: inline-block; margin: 10px; padding: 15px; border: 1px solid #ddd; }\n              </style>\n            </head>\n            <body>\n              <div class=\"header\">\n                <h1>Reporte de Gesti√≥n de Ventas</h1>\n                <p>Sistema ERP Paraguay</p>\n                <p>Per√≠odo: ${dateRange.from} a ${dateRange.to}</p>\n              </div>\n              ${reportData ? `\n                <div class=\"section\">\n                  <h2>Resumen de Clientes</h2>\n                  <div class=\"metric\">\n                    <strong>Total:</strong> ${reportData.customers.total}\n                  </div>\n                  <div class=\"metric\">\n                    <strong>Con R√©gimen Turismo:</strong> ${reportData.customers.with_tourism_regime}\n                  </div>\n                  <div class=\"metric\">\n                    <strong>Activos:</strong> ${reportData.customers.active}\n                  </div>\n                </div>\n                <div class=\"section\">\n                  <h2>Resumen de Cotizaciones</h2>\n                  <div class=\"metric\">\n                    <strong>Total:</strong> ${reportData.quotes.total}\n                  </div>\n                  <div class=\"metric\">\n                    <strong>Valor Total:</strong> Gs. ${reportData.quotes.total_value.toLocaleString()}\n                  </div>\n                </div>\n                <div class=\"section\">\n                  <h2>Resumen de Facturas</h2>\n                  <div class=\"metric\">\n                    <strong>Total:</strong> ${reportData.invoices.total}\n                  </div>\n                  <div class=\"metric\">\n                    <strong>Pagadas:</strong> ${reportData.invoices.paid}\n                  </div>\n                  <div class=\"metric\">\n                    <strong>Vencidas:</strong> ${reportData.invoices.overdue}\n                  </div>\n                  <div class=\"metric\">\n                    <strong>Por Cobrar:</strong> Gs. ${reportData.invoices.pending_amount.toLocaleString()}\n                  </div>\n                </div>\n                <div class=\"section\">\n                  <h2>Resumen de Dep√≥sitos</h2>\n                  <div class=\"metric\">\n                    <strong>Total:</strong> ${reportData.deposits.total}\n                  </div>\n                  <div class=\"metric\">\n                    <strong>Activos:</strong> ${reportData.deposits.active}\n                  </div>\n                  <div class=\"metric\">\n                    <strong>Disponible:</strong> Gs. ${reportData.deposits.total_value.toLocaleString()}\n                  </div>\n                </div>\n              ` : ''}\n            </body>\n          </html>\n        `);\n        printWindow.document.close();\n        printWindow.print();\n      }\n    } else {\n      // Simular exportaci√≥n Excel\n      alert('Funcionalidad de exportaci√≥n Excel pr√≥ximamente disponible');\n    }\n  };\n\n  if (!user?.can_view_reports) {\n    return (\n      <Alert severity=\"warning\">\n        No tiene permisos para ver reportes. Contacte al administrador.\n      </Alert>\n    );\n  }\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Encabezado */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n          Reportes y An√°lisis\n        </Typography>\n        <ButtonGroup variant=\"outlined\">\n          <Button\n            startIcon={<PrintIcon />}\n            onClick={() => handleExportReport('pdf')}\n          >\n            Imprimir\n          </Button>\n          <Button\n            startIcon={<DownloadIcon />}\n            onClick={() => handleExportReport('excel')}\n          >\n            Exportar Excel\n          </Button>\n        </ButtonGroup>\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }} onClose={() => setError('')}>\n          {error}\n        </Alert>\n      )}\n\n      {/* Filtros */}\n      <Paper sx={{ p: 3, mb: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Filtros de Reporte\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={4}>\n            <TextField\n              fullWidth\n              select\n              label=\"Tipo de Reporte\"\n              value={reportType}\n              onChange={(e) => setReportType(e.target.value)}\n            >\n              <MenuItem value=\"general\">Reporte General</MenuItem>\n              <MenuItem value=\"customers\">Clientes</MenuItem>\n              <MenuItem value=\"sales\">Ventas</MenuItem>\n              <MenuItem value=\"deposits\">Dep√≥sitos</MenuItem>\n              <MenuItem value=\"tourism\">R√©gimen de Turismo</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <TextField\n              fullWidth\n              label=\"Fecha Desde\"\n              type=\"date\"\n              value={dateRange.from}\n              onChange={(e) => setDateRange({...dateRange, from: e.target.value})}\n              InputLabelProps={{ shrink: true }}\n            />\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <TextField\n              fullWidth\n              label=\"Fecha Hasta\"\n              type=\"date\"\n              value={dateRange.to}\n              onChange={(e) => setDateRange({...dateRange, to: e.target.value})}\n              InputLabelProps={{ shrink: true }}\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n\n      {reportData && (\n        <>\n          {/* M√©tricas principales */}\n          <Grid container spacing={3} mb={4}>\n            <Grid item xs={12} sm={6} md={3}>\n              <Card sx={{ bgcolor: 'primary.main', color: 'white' }}>\n                <CardContent sx={{ textAlign: 'center' }}>\n                  <PeopleIcon sx={{ fontSize: 48, mb: 2 }} />\n                  <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n                    {reportData.customers.total}\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    Clientes Totales\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                    {reportData.customers.with_tourism_regime} con r√©gimen turismo\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={3}>\n              <Card sx={{ bgcolor: 'secondary.main', color: 'white' }}>\n                <CardContent sx={{ textAlign: 'center' }}>\n                  <ReceiptIcon sx={{ fontSize: 48, mb: 2 }} />\n                  <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n                    {reportData.invoices.total}\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    Facturas Emitidas\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                    {reportData.invoices.paid} pagadas\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={3}>\n              <Card sx={{ bgcolor: 'success.main', color: 'white' }}>\n                <CardContent sx={{ textAlign: 'center' }}>\n                  <MoneyIcon sx={{ fontSize: 48, mb: 2 }} />\n                  <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n                    Gs. {reportData.invoices.total_value.toLocaleString()}\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    Facturaci√≥n Total\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                    Per√≠odo actual\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={3}>\n              <Card sx={{ bgcolor: 'info.main', color: 'white' }}>\n                <CardContent sx={{ textAlign: 'center' }}>\n                  <AccountBalanceIcon sx={{ fontSize: 48, mb: 2 }} />\n                  <Typography variant=\"h4\" sx={{ fontWeight: 600 }}>\n                    Gs. {reportData.deposits.total_value.toLocaleString()}\n                  </Typography>\n                  <Typography variant=\"h6\">\n                    Dep√≥sitos Activos\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                    {reportData.deposits.active} dep√≥sitos\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n\n          {/* Detalles por secci√≥n */}\n          <Grid container spacing={3}>\n            {/* Resumen de Clientes */}\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 3 }}>\n                <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                  <PeopleIcon sx={{ mr: 1, color: 'primary.main' }} />\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                    An√°lisis de Clientes\n                  </Typography>\n                </Box>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Total Clientes\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"primary\">\n                      {reportData.customers.total}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Clientes Activos\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"success.main\">\n                      {reportData.customers.active}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Con R√©gimen de Turismo\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"secondary.main\">\n                      {reportData.customers.with_tourism_regime}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      ({((reportData.customers.with_tourism_regime / reportData.customers.total) * 100).toFixed(1)}% del total)\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n\n            {/* Resumen de Ventas */}\n            <Grid item xs={12} md={6}>\n              <Paper sx={{ p: 3 }}>\n                <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                  <TrendingUpIcon sx={{ mr: 1, color: 'success.main' }} />\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                    An√°lisis de Ventas\n                  </Typography>\n                </Box>\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Cotizaciones\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"primary\">\n                      {reportData.quotes.total}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Facturas\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"secondary.main\">\n                      {reportData.invoices.total}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Por Cobrar\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"error.main\">\n                      Gs. {reportData.invoices.pending_amount.toLocaleString()}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      ({reportData.invoices.overdue} facturas vencidas)\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n\n            {/* Resumen de Dep√≥sitos */}\n            <Grid item xs={12}>\n              <Paper sx={{ p: 3 }}>\n                <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                  <AccountBalanceIcon sx={{ mr: 1, color: 'info.main' }} />\n                  <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n                    An√°lisis de Dep√≥sitos (Sistema Paraguay)\n                  </Typography>\n                </Box>\n                <Grid container spacing={2}>\n                  <Grid item xs={12} sm={6} md={2.4}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Total Dep√≥sitos\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"primary\">\n                      {reportData.deposits.total}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={6} md={2.4}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Dep√≥sitos Activos\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"success.main\">\n                      {reportData.deposits.active}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={6} md={2.4}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Monto Disponible\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"info.main\">\n                      Gs. {reportData.deposits.total_value.toLocaleString()}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={6} md={2.4}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Anticipos\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"secondary.main\">\n                      {reportData.deposits.by_type.ANTICIPO || 0}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} sm={6} md={2.4}>\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      Garant√≠as\n                    </Typography>\n                    <Typography variant=\"h5\" color=\"warning.main\">\n                      {reportData.deposits.by_type.GARANTIA || 0}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n          </Grid>\n\n          {/* Informaci√≥n adicional */}\n          <Box mt={4}>\n            <Alert severity=\"success\">\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Resumen del Per√≠odo ({dateRange.from} a {dateRange.to}):\n              </Typography>\n              <Typography variant=\"body2\">\n                ‚Ä¢ Sistema funcionando correctamente con {reportData.customers.total} clientes registrados<br/>\n                ‚Ä¢ {reportData.customers.with_tourism_regime} clientes aprovechando el r√©gimen de turismo paraguayo<br/>\n                ‚Ä¢ Gs. {reportData.invoices.total_value.toLocaleString()} en facturaci√≥n total del per√≠odo<br/>\n                ‚Ä¢ Gs. {reportData.deposits.total_value.toLocaleString()} en dep√≥sitos activos gestionados<br/>\n                ‚Ä¢ {((reportData.invoices.paid / reportData.invoices.total) * 100).toFixed(1)}% de facturas pagadas\n              </Typography>\n            </Alert>\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n}","size_bytes":20267},"frontend/src/services/api.ts":{"content":"import axios, { type AxiosInstance } from 'axios';\n\n// Configuraci√≥n del cliente Axios\n// En Replit, usar URL relativa para que funcione correctamente\nconst API_BASE_URL = import.meta.env.VITE_API_URL || '/api';\n\nclass ApiService {\n  private client: AxiosInstance;\n  private token: string | null = null;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_BASE_URL,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Interceptor para agregar el token a las peticiones\n    this.client.interceptors.request.use((config) => {\n      if (this.token) {\n        config.headers.Authorization = `Bearer ${this.token}`;\n      }\n      return config;\n    });\n\n    // Interceptor para manejar errores de autenticaci√≥n\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          // Token expirado o inv√°lido\n          this.setToken(null);\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  setToken(token: string | null) {\n    this.token = token;\n  }\n\n  // ===== AUTENTICACI√ìN =====\n  async login(username: string, password: string) {\n    // Enviar como JSON, no FormData\n    const response = await this.client.post('/auth/login', {\n      username,\n      password\n    });\n    return response.data;\n  }\n\n  async getCurrentUser() {\n    const response = await this.client.get('/auth/me');\n    return response.data;\n  }\n\n  // ===== CLIENTES =====\n  async getCustomers(params?: { skip?: number; limit?: number; search?: string; is_active?: boolean }) {\n    const response = await this.client.get('/customers/', { params });\n    return response.data;\n  }\n\n  async getCustomer(id: number) {\n    const response = await this.client.get(`/customers/${id}`);\n    return response.data;\n  }\n\n  async createCustomer(customerData: any) {\n    const response = await this.client.post('/customers/', customerData);\n    return response.data;\n  }\n\n  async updateCustomer(id: number, customerData: any) {\n    const response = await this.client.put(`/customers/${id}`, customerData);\n    return response.data;\n  }\n\n  async deleteCustomer(id: number) {\n    const response = await this.client.delete(`/customers/${id}`);\n    return response.data;\n  }\n\n  // Funciones espec√≠ficas para r√©gimen de turismo\n  async uploadTourismPdf(customerId: number, file: File) {\n    const formData = new FormData();\n    formData.append('pdf_file', file);\n    \n    const response = await this.client.post(`/customers/${customerId}/upload-tourism-pdf`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n\n  async downloadTourismPdf(customerId: number) {\n    const response = await this.client.get(`/customers/${customerId}/tourism-pdf`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  }\n\n  async deleteTourismPdf(customerId: number) {\n    const response = await this.client.delete(`/customers/${customerId}/tourism-pdf`);\n    return response.data;\n  }\n\n  // ===== PRODUCTOS =====\n  async getProducts(params?: { skip?: number; limit?: number; search?: string; category_id?: number }) {\n    const response = await this.client.get('/products/', { params });\n    return response.data;\n  }\n\n  async getProduct(id: number) {\n    const response = await this.client.get(`/products/${id}`);\n    return response.data;\n  }\n\n  async createProduct(productData: any) {\n    const response = await this.client.post('/products/', productData);\n    return response.data;\n  }\n\n  async updateProduct(id: number, productData: any) {\n    const response = await this.client.put(`/products/${id}`, productData);\n    return response.data;\n  }\n\n  async getProductCategories() {\n    const response = await this.client.get('/products/categories/');\n    return response.data;\n  }\n\n  // ===== COTIZACIONES =====\n  async getQuotes(params?: { skip?: number; limit?: number; customer_id?: number; status?: string }) {\n    const response = await this.client.get('/quotes/', { params });\n    return response.data;\n  }\n\n  async getQuote(id: number) {\n    const response = await this.client.get(`/quotes/${id}`);\n    return response.data;\n  }\n\n  async createQuote(quoteData: any) {\n    const response = await this.client.post('/quotes/', quoteData);\n    return response.data;\n  }\n\n  async updateQuote(id: number, quoteData: any) {\n    const response = await this.client.put(`/quotes/${id}`, quoteData);\n    return response.data;\n  }\n\n  async generateQuotePdf(id: number) {\n    const response = await this.client.get(`/quotes/${id}/pdf`);\n    return response.data;\n  }\n\n  async downloadQuotePdf(id: number) {\n    const response = await this.client.get(`/quotes/${id}/pdf/download`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  }\n\n  // ===== FACTURAS =====\n  async getInvoices(params?: { skip?: number; limit?: number; customer_id?: number; status?: string }) {\n    const response = await this.client.get('/invoices/', { params });\n    return response.data;\n  }\n\n  async getInvoice(id: number) {\n    const response = await this.client.get(`/invoices/${id}`);\n    return response.data;\n  }\n\n  async createInvoice(invoiceData: any) {\n    const response = await this.client.post('/invoices/', invoiceData);\n    return response.data;\n  }\n\n  async updateInvoice(id: number, invoiceData: any) {\n    const response = await this.client.put(`/invoices/${id}`, invoiceData);\n    return response.data;\n  }\n\n  // ===== DEP√ìSITOS =====\n  async getDeposits(params?: { skip?: number; limit?: number; customer_id?: number; deposit_type?: string }) {\n    const response = await this.client.get('/deposits/', { params });\n    return response.data;\n  }\n\n  async getDeposit(id: number) {\n    const response = await this.client.get(`/deposits/${id}`);\n    return response.data;\n  }\n\n  async createDeposit(depositData: any) {\n    const response = await this.client.post('/deposits/', depositData);\n    return response.data;\n  }\n\n  async applyDepositToInvoice(depositId: number, data: { invoice_id: number; amount: number }) {\n    const response = await this.client.post(`/deposits/${depositId}/apply-to-invoice`, data);\n    return response.data;\n  }\n\n  async refundDeposit(depositId: number, data: { amount: number; reason: string }) {\n    const response = await this.client.post(`/deposits/${depositId}/refund`, data);\n    return response.data;\n  }\n\n  async getDepositSummary() {\n    const response = await this.client.get('/deposits/summary');\n    return response.data;\n  }\n\n  // ===== CONFIGURACI√ìN DE EMPRESA =====\n  async getCompanySettings() {\n    const response = await this.client.get('/company/settings');\n    return response.data;\n  }\n\n  async createCompanySettings(settingsData: any) {\n    const response = await this.client.post('/company/settings', settingsData);\n    return response.data;\n  }\n\n  async updateCompanySettings(settingsData: any) {\n    const response = await this.client.put('/company/settings', settingsData);\n    return response.data;\n  }\n\n  async getCompanySettingsPublic() {\n    const response = await this.client.get('/company/settings/public');\n    return response.data;\n  }\n\n  async markConfigurationComplete() {\n    const response = await this.client.post('/company/settings/complete');\n    return response.data;\n  }\n\n  async getNextInvoiceNumber() {\n    const response = await this.client.get('/company/numbering/next-invoice');\n    return response.data;\n  }\n\n  async getNextQuoteNumber() {\n    const response = await this.client.get('/company/numbering/next-quote');\n    return response.data;\n  }\n\n  // ===== DASHBOARD =====\n  async getDashboardStats() {\n    const response = await this.client.get('/dashboard/stats');\n    return response.data;\n  }\n\n  async getDashboardOverview() {\n    const response = await this.client.get('/dashboard/metrics/overview');\n    return response.data;\n  }\n\n  async getSalesTrend(days: number = 30) {\n    const response = await this.client.get(`/dashboard/metrics/sales-trend?days=${days}`);\n    return response.data;\n  }\n\n  async getTopProducts(limit: number = 10) {\n    const response = await this.client.get(`/dashboard/metrics/top-products?limit=${limit}`);\n    return response.data;\n  }\n\n  async getCustomerAnalysis() {\n    const response = await this.client.get('/dashboard/metrics/customer-analysis');\n    return response.data;\n  }\n\n  async getInventoryStatus() {\n    const response = await this.client.get('/dashboard/metrics/inventory-status');\n    return response.data;\n  }\n}\n\nexport const apiService = new ApiService();","size_bytes":8647},"frontend/src/components/Layout/Layout.tsx":{"content":"import React, { useState } from 'react';\nimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\nimport {\n  AppBar,\n  Box,\n  CssBaseline,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Toolbar,\n  Typography,\n  Avatar,\n  Menu,\n  MenuItem,\n  Divider,\n  useTheme,\n  useMediaQuery,\n} from '@mui/material';\nimport {\n  Menu as MenuIcon,\n  Dashboard as DashboardIcon,\n  People as PeopleIcon,\n  Description as DescriptionIcon,\n  Receipt as ReceiptIcon,\n  Inventory as InventoryIcon,\n  AccountBalance as AccountBalanceIcon,\n  Assessment as AssessmentIcon,\n  AccountCircle,\n  Logout,\n  Business,\n  Settings as SettingsIcon,\n} from '@mui/icons-material';\nimport { useAuth } from '../../context/AuthContext';\n\nconst drawerWidth = 280;\n\nconst menuItems = [\n  { text: 'Dashboard', icon: <DashboardIcon />, path: '/' },\n  { text: 'Clientes', icon: <PeopleIcon />, path: '/clientes' },\n  { text: 'Cotizaciones', icon: <DescriptionIcon />, path: '/cotizaciones' },\n  { text: 'Facturas', icon: <ReceiptIcon />, path: '/facturas' },\n  { text: 'Productos', icon: <InventoryIcon />, path: '/productos' },\n  { text: 'Dep√≥sitos', icon: <AccountBalanceIcon />, path: '/depositos' },\n  { text: 'Reportes', icon: <AssessmentIcon />, path: '/reportes' },\n  { text: 'Configuraci√≥n', icon: <SettingsIcon />, path: '/configuracion' },\n];\n\nexport default function Layout() {\n  const { user, logout } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  \n  const [mobileOpen, setMobileOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleLogout = () => {\n    logout();\n    navigate('/login');\n    handleMenuClose();\n  };\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n    if (isMobile) {\n      setMobileOpen(false);\n    }\n  };\n\n  // Redirect to login if not authenticated\n  React.useEffect(() => {\n    if (!user) {\n      navigate('/login');\n    }\n  }, [user, navigate]);\n\n  if (!user) {\n    return null; // or loading spinner\n  }\n\n  const drawer = (\n    <Box>\n      {/* Logo y nombre del sistema */}\n      <Box sx={{ p: 3, textAlign: 'center', borderBottom: 1, borderColor: 'divider' }}>\n        <Business sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />\n        <Typography variant=\"h6\" sx={{ fontWeight: 600, color: 'primary.main' }}>\n          Gesti√≥n de Ventas\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Sistema ERP Paraguay\n        </Typography>\n      </Box>\n      \n      {/* Navegaci√≥n */}\n      <List sx={{ px: 2, py: 1 }}>\n        {menuItems.map((item) => {\n          const isSelected = location.pathname === item.path;\n          \n          return (\n            <ListItem key={item.text} disablePadding>\n              <ListItemButton\n                onClick={() => handleNavigation(item.path)}\n                selected={isSelected}\n                sx={{\n                  borderRadius: 2,\n                  mb: 0.5,\n                  '&.Mui-selected': {\n                    backgroundColor: 'primary.main',\n                    color: 'white',\n                    '&:hover': {\n                      backgroundColor: 'primary.dark',\n                    },\n                    '& .MuiListItemIcon-root': {\n                      color: 'white',\n                    },\n                  },\n                  '&:hover': {\n                    backgroundColor: 'action.hover',\n                  },\n                }}\n              >\n                <ListItemIcon sx={{ minWidth: 40 }}>\n                  {item.icon}\n                </ListItemIcon>\n                <ListItemText \n                  primary={item.text}\n                  primaryTypographyProps={{\n                    fontWeight: isSelected ? 600 : 400,\n                    fontSize: '0.95rem',\n                  }}\n                />\n              </ListItemButton>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n\n  return (\n    <Box sx={{ display: 'flex' }}>\n      <CssBaseline />\n      \n      {/* Barra superior */}\n      <AppBar\n        position=\"fixed\"\n        sx={{\n          width: { md: `calc(100% - ${drawerWidth}px)` },\n          ml: { md: `${drawerWidth}px` },\n          backgroundColor: 'white',\n          color: 'text.primary',\n          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',\n        }}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            sx={{ mr: 2, display: { md: 'none' } }}\n          >\n            <MenuIcon />\n          </IconButton>\n          \n          <Typography variant=\"h6\" noWrap component=\"div\" sx={{ flexGrow: 1, fontWeight: 500 }}>\n            {menuItems.find(item => item.path === location.pathname)?.text || 'Dashboard'}\n          </Typography>\n          \n          {/* Informaci√≥n del usuario */}\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Typography variant=\"body2\" sx={{ display: { xs: 'none', sm: 'block' } }}>\n              {user.full_name || user.username}\n            </Typography>\n            <IconButton\n              size=\"large\"\n              aria-label=\"account of current user\"\n              aria-controls=\"menu-appbar\"\n              aria-haspopup=\"true\"\n              onClick={handleMenuOpen}\n              color=\"inherit\"\n            >\n              <Avatar sx={{ width: 32, height: 32, bgcolor: 'primary.main' }}>\n                {(user.full_name || user.username).charAt(0).toUpperCase()}\n              </Avatar>\n            </IconButton>\n          </Box>\n        </Toolbar>\n      </AppBar>\n\n      {/* Men√∫ de usuario */}\n      <Menu\n        id=\"menu-appbar\"\n        anchorEl={anchorEl}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        keepMounted\n        transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        open={Boolean(anchorEl)}\n        onClose={handleMenuClose}\n      >\n        <MenuItem onClick={handleMenuClose}>\n          <AccountCircle sx={{ mr: 1 }} />\n          Perfil\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={handleLogout}>\n          <Logout sx={{ mr: 1 }} />\n          Cerrar Sesi√≥n\n        </MenuItem>\n      </Menu>\n\n      {/* Navegaci√≥n lateral */}\n      <Box\n        component=\"nav\"\n        sx={{ width: { md: drawerWidth }, flexShrink: { md: 0 } }}\n        aria-label=\"mailbox folders\"\n      >\n        {/* Drawer para m√≥vil */}\n        <Drawer\n          variant=\"temporary\"\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          ModalProps={{ keepMounted: true }}\n          sx={{\n            display: { xs: 'block', md: 'none' },\n            '& .MuiDrawer-paper': {\n              boxSizing: 'border-box',\n              width: drawerWidth,\n            },\n          }}\n        >\n          {drawer}\n        </Drawer>\n        \n        {/* Drawer para escritorio */}\n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            display: { xs: 'none', md: 'block' },\n            '& .MuiDrawer-paper': {\n              boxSizing: 'border-box',\n              width: drawerWidth,\n              borderRight: '1px solid',\n              borderRightColor: 'divider',\n            },\n          }}\n          open\n        >\n          {drawer}\n        </Drawer>\n      </Box>\n\n      {/* Contenido principal */}\n      <Box\n        component=\"main\"\n        sx={{\n          flexGrow: 1,\n          p: 3,\n          width: { md: `calc(100% - ${drawerWidth}px)` },\n          minHeight: '100vh',\n          backgroundColor: 'background.default',\n        }}\n      >\n        <Toolbar />\n        <Outlet />\n      </Box>\n    </Box>\n  );\n}","size_bytes":8094},"create_admin.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript para crear usuario administrador\n\"\"\"\nfrom app.core.database import SessionLocal\nfrom app.models.user import User\nfrom app.core.auth import get_password_hash\n\ndef create_admin_user():\n    \"\"\"Crear usuario administrador por defecto\"\"\"\n    db = SessionLocal()\n    \n    try:\n        # Verificar si ya existe el usuario admin\n        existing_admin = db.query(User).filter(User.username == \"admin\").first()\n        \n        if existing_admin:\n            print(\"‚úÖ El usuario admin ya existe\")\n            print(\"=\" * 50)\n            print(\"üìß Usuario: admin\")\n            print(\"üîë Contrase√±a: admin123\")\n            print(\"=\" * 50)\n            return\n        \n        from app.models.user import UserRole\n        \n        # Crear nuevo usuario administrador\n        admin_user = User(\n            username=\"admin\",\n            email=\"admin@empresa.py\",\n            full_name=\"Administrador Sistema\",\n            hashed_password=get_password_hash(\"admin123\"),\n            is_active=True,\n            is_superuser=True,\n            role=UserRole.ADMIN,\n            # Permisos completos para admin\n            can_create_customers=True,\n            can_manage_inventory=True,\n            can_view_reports=True,\n            can_manage_tourism_regime=True,\n            can_manage_deposits=True,\n            can_export_data=True,\n            # L√≠mites altos para admin\n            max_customers=10000,\n            max_quotes=10000,\n            max_orders=10000,\n            max_invoices=10000\n        )\n        \n        db.add(admin_user)\n        db.commit()\n        db.refresh(admin_user)\n        \n        print(\"‚úÖ Usuario administrador creado exitosamente!\")\n        print(\"=\" * 50)\n        print(\"üìß Usuario: admin\")\n        print(\"üîë Contrase√±a: admin123\")\n        print(\"=\" * 50)\n        print(\"‚ö†Ô∏è  IMPORTANTE: Cambie esta contrase√±a despu√©s del primer login\")\n        \n    except Exception as e:\n        print(f\"‚ùå Error al crear usuario: {e}\")\n        db.rollback()\n    finally:\n        db.close()\n\nif __name__ == \"__main__\":\n    print(\"Creando usuario administrador para el sistema...\")\n    create_admin_user()","size_bytes":2164},"alembic/versions/891f08c40066_add_company_settings_table.py":{"content":"\"\"\"add_company_settings_table\n\nRevision ID: 891f08c40066\nRevises: 4e9f6f26e197\nCreate Date: 2025-09-17 08:10:42.458934\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\nfrom sqlalchemy.dialects import postgresql\n\n# revision identifiers, used by Alembic.\nrevision: str = '891f08c40066'\ndown_revision: Union[str, Sequence[str], None] = '4e9f6f26e197'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('company_settings',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('razon_social', sa.String(length=200), nullable=False, comment='Raz√≥n social de la empresa'),\n    sa.Column('nombre_comercial', sa.String(length=200), nullable=True, comment='Nombre comercial'),\n    sa.Column('ruc', sa.String(length=20), nullable=False, comment='RUC paraguayo (ej: 80012345-1)'),\n    sa.Column('timbrado', sa.String(length=20), nullable=False, comment='N√∫mero de timbrado fiscal'),\n    sa.Column('punto_expedicion', sa.String(length=10), nullable=False, comment='Punto de expedici√≥n'),\n    sa.Column('dv_ruc', sa.String(length=2), nullable=True, comment='D√≠gito verificador del RUC'),\n    sa.Column('direccion', sa.Text(), nullable=False, comment='Direcci√≥n completa de la empresa'),\n    sa.Column('ciudad', sa.String(length=100), nullable=False, comment='Ciudad'),\n    sa.Column('departamento', sa.String(length=100), nullable=False, comment='Departamento/Estado'),\n    sa.Column('codigo_postal', sa.String(length=10), nullable=True, comment='C√≥digo postal'),\n    sa.Column('telefono', sa.String(length=20), nullable=True, comment='Tel√©fono fijo'),\n    sa.Column('celular', sa.String(length=20), nullable=True, comment='Tel√©fono celular'),\n    sa.Column('email', sa.String(length=100), nullable=True, comment='Email principal'),\n    sa.Column('sitio_web', sa.String(length=200), nullable=True, comment='Sitio web de la empresa'),\n    sa.Column('moneda_defecto', postgresql.ENUM('PYG', 'USD', name='currency_type'), nullable=False, comment='Moneda por defecto'),\n    sa.Column('iva_10_porciento', sa.Numeric(precision=5, scale=2), nullable=False, comment='Tasa IVA 10%'),\n    sa.Column('iva_5_porciento', sa.Numeric(precision=5, scale=2), nullable=False, comment='Tasa IVA 5%'),\n    sa.Column('iva_exento', sa.Boolean(), nullable=True, comment='Empresa exenta de IVA'),\n    sa.Column('numeracion_facturas_inicio', sa.Integer(), nullable=False, comment='N√∫mero inicial de facturas'),\n    sa.Column('numeracion_facturas_actual', sa.Integer(), nullable=False, comment='N√∫mero actual de facturas'),\n    sa.Column('numeracion_cotizaciones_inicio', sa.Integer(), nullable=False, comment='N√∫mero inicial de cotizaciones'),\n    sa.Column('numeracion_cotizaciones_actual', sa.Integer(), nullable=False, comment='N√∫mero actual de cotizaciones'),\n    sa.Column('formato_impresion', postgresql.ENUM('A4', 'ticket', name='print_format'), nullable=False, comment='Formato de impresi√≥n por defecto'),\n    sa.Column('logo_empresa', sa.String(length=500), nullable=True, comment='Path del logo de la empresa'),\n    sa.Column('firma_digital', sa.String(length=500), nullable=True, comment='Path de la firma digital'),\n    sa.Column('regimen_tributario', sa.String(length=50), nullable=False, comment='R√©gimen tributario'),\n    sa.Column('contribuyente_iva', sa.Boolean(), nullable=False, comment='Es contribuyente de IVA'),\n    sa.Column('actividad_economica', sa.String(length=200), nullable=True, comment='Actividad econ√≥mica principal'),\n    sa.Column('sector_economico', sa.String(length=100), nullable=True, comment='Sector econ√≥mico'),\n    sa.Column('notas_adicionales', sa.Text(), nullable=True, comment='Notas y observaciones adicionales'),\n    sa.Column('is_active', sa.Boolean(), nullable=False),\n    sa.Column('configuracion_completa', sa.Boolean(), nullable=False, comment='Indica si la configuraci√≥n est√° completa'),\n    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),\n    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('ruc')\n    )\n    op.create_index(op.f('ix_company_settings_id'), 'company_settings', ['id'], unique=False)\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_company_settings_id'), table_name='company_settings')\n    op.drop_table('company_settings')\n    # ### end Alembic commands ###\n","size_bytes":4714},"app/api/company.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import Optional\n\nfrom app.core.database import get_database\nfrom app.core.dependencies import get_current_active_user\nfrom app.crud.company import company_settings_crud\nfrom app.schemas.company import CompanySettings, CompanySettingsCreate, CompanySettingsUpdate, CompanySettingsPublic\nfrom app.schemas.auth import User\n\nrouter = APIRouter(prefix=\"/company\", tags=[\"configuraci√≥n de empresa\"])\n\n@router.get(\"/settings\", response_model=CompanySettings)\ndef get_company_settings(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener configuraci√≥n de la empresa\"\"\"\n    try:\n        settings = company_settings_crud.get_settings(db)\n        if not settings:\n            # Si no existe configuraci√≥n, devolver estructura b√°sica\n            raise HTTPException(\n                status_code=404,\n                detail=\"No existe configuraci√≥n de empresa. Por favor, configure los datos de su empresa.\"\n            )\n        return settings\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al obtener configuraci√≥n de empresa: {str(e)}\"\n        )\n\n@router.get(\"/settings/public\", response_model=CompanySettingsPublic)\ndef get_company_settings_public(\n    db: Session = Depends(get_database)\n):\n    \"\"\"Obtener configuraci√≥n p√∫blica de la empresa (sin autenticaci√≥n)\"\"\"\n    try:\n        settings = company_settings_crud.get_settings(db)\n        if not settings:\n            raise HTTPException(\n                status_code=404,\n                detail=\"No existe configuraci√≥n de empresa\"\n            )\n        return settings\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al obtener configuraci√≥n p√∫blica: {str(e)}\"\n        )\n\n@router.post(\"/settings\", response_model=CompanySettings)\ndef create_company_settings(\n    company_in: CompanySettingsCreate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Crear nueva configuraci√≥n de empresa (solo administradores)\"\"\"\n    # Verificar permisos de administrador\n    if current_user.role not in [\"admin\", \"manager\"]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Solo los administradores pueden crear configuraci√≥n de empresa\"\n        )\n    \n    try:\n        return company_settings_crud.create(db, company_in=company_in)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=400,\n            detail=str(e)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al crear configuraci√≥n de empresa: {str(e)}\"\n        )\n\n@router.put(\"/settings\", response_model=CompanySettings)\ndef update_company_settings(\n    company_in: CompanySettingsUpdate,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Actualizar configuraci√≥n de empresa existente\"\"\"\n    # Verificar permisos\n    if current_user.role not in [\"admin\", \"manager\"]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Solo los administradores pueden modificar la configuraci√≥n de empresa\"\n        )\n    \n    try:\n        return company_settings_crud.update(db, company_in=company_in)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=400,\n            detail=str(e)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al actualizar configuraci√≥n de empresa: {str(e)}\"\n        )\n\n@router.post(\"/settings/complete\", response_model=CompanySettings)\ndef mark_configuration_complete(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Marcar la configuraci√≥n de empresa como completa\"\"\"\n    if current_user.role not in [\"admin\", \"manager\"]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Solo los administradores pueden completar la configuraci√≥n\"\n        )\n    \n    try:\n        return company_settings_crud.mark_configuration_complete(db)\n    except ValueError as e:\n        raise HTTPException(\n            status_code=400,\n            detail=str(e)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al completar configuraci√≥n: {str(e)}\"\n        )\n\n@router.get(\"/numbering/next-invoice\")\ndef get_next_invoice_number(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener siguiente n√∫mero de factura\"\"\"\n    try:\n        next_number = company_settings_crud.get_next_invoice_number(db)\n        return {\"next_number\": next_number}\n    except ValueError as e:\n        raise HTTPException(\n            status_code=400,\n            detail=str(e)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al obtener n√∫mero de factura: {str(e)}\"\n        )\n\n@router.get(\"/numbering/next-quote\")\ndef get_next_quote_number(\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Obtener siguiente n√∫mero de cotizaci√≥n\"\"\"\n    try:\n        next_number = company_settings_crud.get_next_quote_number(db)\n        return {\"next_number\": next_number}\n    except ValueError as e:\n        raise HTTPException(\n            status_code=400,\n            detail=str(e)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al obtener n√∫mero de cotizaci√≥n: {str(e)}\"\n        )\n\n@router.put(\"/numbering/reset-invoices\")\ndef reset_invoice_numbering(\n    start_number: int = 1,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Reiniciar numeraci√≥n de facturas (solo administradores)\"\"\"\n    if current_user.role not in [\"admin\"]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Solo los administradores principales pueden reiniciar la numeraci√≥n\"\n        )\n    \n    try:\n        settings = company_settings_crud.reset_invoice_numbering(db, start_number)\n        return {\n            \"message\": f\"Numeraci√≥n de facturas reiniciada desde {start_number}\",\n            \"new_number\": settings.numeracion_facturas_actual\n        }\n    except ValueError as e:\n        raise HTTPException(\n            status_code=400,\n            detail=str(e)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al reiniciar numeraci√≥n: {str(e)}\"\n        )\n\n@router.put(\"/numbering/reset-quotes\")\ndef reset_quote_numbering(\n    start_number: int = 1,\n    db: Session = Depends(get_database),\n    current_user: User = Depends(get_current_active_user)\n):\n    \"\"\"Reiniciar numeraci√≥n de cotizaciones (solo administradores)\"\"\"\n    if current_user.role not in [\"admin\"]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Solo los administradores principales pueden reiniciar la numeraci√≥n\"\n        )\n    \n    try:\n        settings = company_settings_crud.reset_quote_numbering(db, start_number)\n        return {\n            \"message\": f\"Numeraci√≥n de cotizaciones reiniciada desde {start_number}\",\n            \"new_number\": settings.numeracion_cotizaciones_actual\n        }\n    except ValueError as e:\n        raise HTTPException(\n            status_code=400,\n            detail=str(e)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=500,\n            detail=f\"Error al reiniciar numeraci√≥n: {str(e)}\"\n        )","size_bytes":7998},"app/crud/company.py":{"content":"from typing import Optional\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy.exc import IntegrityError\n\nfrom app.models.company import CompanySettings\nfrom app.schemas.company import CompanySettingsCreate, CompanySettingsUpdate\n\nclass CRUDCompanySettings:\n    def get_settings(self, db: Session) -> Optional[CompanySettings]:\n        \"\"\"Obtener configuraci√≥n de la empresa (solo deber√≠a haber una)\"\"\"\n        return db.query(CompanySettings).filter(CompanySettings.is_active == True).first()\n    \n    def get_by_id(self, db: Session, company_id: int) -> Optional[CompanySettings]:\n        \"\"\"Obtener configuraci√≥n por ID\"\"\"\n        return db.query(CompanySettings).filter(\n            CompanySettings.id == company_id,\n            CompanySettings.is_active == True\n        ).first()\n    \n    def create(self, db: Session, company_in: CompanySettingsCreate) -> CompanySettings:\n        \"\"\"Crear nueva configuraci√≥n de empresa\"\"\"\n        # Verificar que no existe otra configuraci√≥n activa\n        existing = self.get_settings(db)\n        if existing:\n            raise ValueError(\"Ya existe una configuraci√≥n de empresa activa. Use update() en su lugar.\")\n        \n        try:\n            db_company = CompanySettings(**company_in.model_dump())\n            db.add(db_company)\n            db.commit()\n            db.refresh(db_company)\n            return db_company\n        except IntegrityError as e:\n            db.rollback()\n            if \"ruc\" in str(e):\n                raise ValueError(f\"El RUC {company_in.ruc} ya est√° registrado\")\n            raise ValueError(\"Error al crear la configuraci√≥n de empresa\")\n    \n    def update(self, db: Session, company_in: CompanySettingsUpdate) -> CompanySettings:\n        \"\"\"Actualizar configuraci√≥n de empresa existente\"\"\"\n        db_company = self.get_settings(db)\n        if not db_company:\n            raise ValueError(\"No existe configuraci√≥n de empresa. Use create() primero.\")\n        \n        try:\n            update_data = company_in.model_dump(exclude_unset=True)\n            \n            for field, value in update_data.items():\n                if hasattr(db_company, field):\n                    setattr(db_company, field, value)\n            \n            db.commit()\n            db.refresh(db_company)\n            return db_company\n        except IntegrityError as e:\n            db.rollback()\n            if \"ruc\" in str(e):\n                raise ValueError(f\"El RUC ya est√° registrado por otra empresa\")\n            raise ValueError(\"Error al actualizar la configuraci√≥n de empresa\")\n    \n    def update_by_id(self, db: Session, company_id: int, company_in: CompanySettingsUpdate) -> CompanySettings:\n        \"\"\"Actualizar configuraci√≥n espec√≠fica por ID\"\"\"\n        db_company = self.get_by_id(db, company_id)\n        if not db_company:\n            raise ValueError(\"Configuraci√≥n de empresa no encontrada\")\n        \n        try:\n            update_data = company_in.model_dump(exclude_unset=True)\n            \n            for field, value in update_data.items():\n                if hasattr(db_company, field):\n                    setattr(db_company, field, value)\n            \n            db.commit()\n            db.refresh(db_company)\n            return db_company\n        except IntegrityError as e:\n            db.rollback()\n            if \"ruc\" in str(e):\n                raise ValueError(f\"El RUC ya est√° registrado por otra empresa\")\n            raise ValueError(\"Error al actualizar la configuraci√≥n de empresa\")\n    \n    def deactivate(self, db: Session) -> bool:\n        \"\"\"Desactivar configuraci√≥n de empresa actual\"\"\"\n        db_company = self.get_settings(db)\n        if not db_company:\n            return False\n        \n        db_company.is_active = False  # type: ignore[assignment]\n        db.commit()\n        return True\n    \n    def get_next_invoice_number(self, db: Session) -> int:\n        \"\"\"Obtener y actualizar el siguiente n√∫mero de factura\"\"\"\n        db_company = self.get_settings(db)\n        if not db_company:\n            raise ValueError(\"No hay configuraci√≥n de empresa disponible\")\n        \n        next_number = db_company.numeracion_facturas_actual  # type: ignore[assignment]\n        db_company.numeracion_facturas_actual += 1  # type: ignore[assignment]\n        db.commit()\n        \n        return next_number  # type: ignore[return-value]\n    \n    def increment_invoice_number(self, db: Session) -> None:\n        \"\"\"Incrementar contador de facturas\"\"\"\n        db_company = self.get_settings(db)\n        if not db_company:\n            raise ValueError(\"No hay configuraci√≥n de empresa disponible\")\n        \n        db_company.numeracion_facturas_actual += 1  # type: ignore[assignment]\n        db.commit()\n    \n    def get_next_quote_number(self, db: Session) -> int:\n        \"\"\"Obtener y actualizar el siguiente n√∫mero de cotizaci√≥n\"\"\"\n        db_company = self.get_settings(db)\n        if not db_company:\n            raise ValueError(\"No hay configuraci√≥n de empresa disponible\")\n        \n        next_number = db_company.numeracion_cotizaciones_actual  # type: ignore[assignment]\n        db_company.numeracion_cotizaciones_actual += 1  # type: ignore[assignment]\n        db.commit()\n        \n        return next_number  # type: ignore[return-value]\n    \n    def reset_invoice_numbering(self, db: Session, start_number: int = 1) -> CompanySettings:\n        \"\"\"Reiniciar numeraci√≥n de facturas\"\"\"\n        db_company = self.get_settings(db)\n        if not db_company:\n            raise ValueError(\"No hay configuraci√≥n de empresa disponible\")\n        \n        db_company.numeracion_facturas_actual = start_number  # type: ignore[assignment]\n        db_company.numeracion_facturas_inicio = start_number  # type: ignore[assignment]\n        db.commit()\n        db.refresh(db_company)\n        \n        return db_company\n    \n    def reset_quote_numbering(self, db: Session, start_number: int = 1) -> CompanySettings:\n        \"\"\"Reiniciar numeraci√≥n de cotizaciones\"\"\"\n        db_company = self.get_settings(db)\n        if not db_company:\n            raise ValueError(\"No hay configuraci√≥n de empresa disponible\")\n        \n        db_company.numeracion_cotizaciones_actual = start_number  # type: ignore[assignment]\n        db_company.numeracion_cotizaciones_inicio = start_number  # type: ignore[assignment]\n        db.commit()\n        db.refresh(db_company)\n        \n        return db_company\n    \n    def mark_configuration_complete(self, db: Session) -> CompanySettings:\n        \"\"\"Marcar la configuraci√≥n como completa\"\"\"\n        db_company = self.get_settings(db)\n        if not db_company:\n            raise ValueError(\"No hay configuraci√≥n de empresa disponible\")\n        \n        # Verificar campos obligatorios\n        required_fields = [\n            'razon_social', 'ruc', 'timbrado', 'direccion'\n        ]\n        \n        for field in required_fields:\n            value = getattr(db_company, field)\n            if not value or (isinstance(value, str) and value.strip() == \"\"):\n                raise ValueError(f\"Campo obligatorio faltante: {field}\")\n        \n        db_company.configuracion_completa = True  # type: ignore[assignment]\n        db.commit()\n        db.refresh(db_company)\n        \n        return db_company\n\n# Instancia √∫nica del CRUD\ncompany_settings_crud = CRUDCompanySettings()","size_bytes":7329},"app/models/company.py":{"content":"from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, Enum, Date\nfrom sqlalchemy.types import Numeric\nfrom sqlalchemy.dialects.postgresql import ENUM as PGEnum\nfrom sqlalchemy.sql import func\nfrom app.core.database import Base\nimport enum\n\nclass CurrencyType(enum.Enum):\n    PYG = \"PYG\"  # Guaran√≠es paraguayos\n    USD = \"USD\"  # D√≥lares americanos\n\nclass PrintFormat(enum.Enum):\n    A4 = \"A4\"\n    TICKET = \"ticket\"\n\nclass CompanySettings(Base):\n    __tablename__ = \"company_settings\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    \n    # DATOS B√ÅSICOS DE LA EMPRESA\n    razon_social = Column(String(200), nullable=False, comment=\"Raz√≥n social de la empresa\")\n    nombre_comercial = Column(String(200), nullable=True, comment=\"Nombre comercial\")\n    \n    # DATOS FISCALES ESPEC√çFICOS PARA PARAGUAY\n    ruc = Column(String(20), nullable=False, unique=True, comment=\"RUC paraguayo (ej: 80012345-1)\")\n    timbrado = Column(String(20), nullable=False, comment=\"N√∫mero de timbrado fiscal\")\n    timbrado_fecha_vencimiento = Column(Date, nullable=True, comment=\"Fecha de vencimiento del timbrado\")\n    punto_expedicion = Column(String(10), nullable=False, default=\"001\", comment=\"Punto de expedici√≥n\")\n    dv_ruc = Column(String(2), nullable=True, comment=\"D√≠gito verificador del RUC\")\n    \n    # DATOS DE CONTACTO\n    direccion = Column(Text, nullable=False, comment=\"Direcci√≥n completa de la empresa\")\n    ciudad = Column(String(100), nullable=False, default=\"Asunci√≥n\", comment=\"Ciudad\")\n    departamento = Column(String(100), nullable=False, default=\"Central\", comment=\"Departamento/Estado\")\n    codigo_postal = Column(String(10), nullable=True, comment=\"C√≥digo postal\")\n    telefono = Column(String(20), nullable=True, comment=\"Tel√©fono fijo\")\n    celular = Column(String(20), nullable=True, comment=\"Tel√©fono celular\")\n    email = Column(String(100), nullable=True, comment=\"Email principal\")\n    sitio_web = Column(String(200), nullable=True, comment=\"Sitio web de la empresa\")\n    \n    # CONFIGURACI√ìN MONETARIA\n    moneda_defecto = Column(\n        PGEnum(\n            CurrencyType,\n            name=\"currency_type\",\n            values_callable=lambda e: [m.value for m in e],\n            create_type=False,\n        ),\n        default=CurrencyType.PYG,\n        nullable=False,\n        comment=\"Moneda por defecto\"\n    )\n    \n    # CONFIGURACI√ìN DE IVA PARA PARAGUAY\n    iva_10_porciento = Column(Numeric(5, 2), default=10.00, nullable=False, comment=\"Tasa IVA 10%\")\n    iva_5_porciento = Column(Numeric(5, 2), default=5.00, nullable=False, comment=\"Tasa IVA 5%\")\n    iva_exento = Column(Boolean, default=False, comment=\"Empresa exenta de IVA\")\n    \n    # CONFIGURACI√ìN DE NUMERACI√ìN AUTOM√ÅTICA\n    numeracion_facturas_inicio = Column(Integer, default=1, nullable=False, comment=\"N√∫mero inicial de facturas\")\n    numeracion_facturas_actual = Column(Integer, default=1, nullable=False, comment=\"N√∫mero actual de facturas\")\n    numeracion_cotizaciones_inicio = Column(Integer, default=1, nullable=False, comment=\"N√∫mero inicial de cotizaciones\")\n    numeracion_cotizaciones_actual = Column(Integer, default=1, nullable=False, comment=\"N√∫mero actual de cotizaciones\")\n    \n    # CONFIGURACI√ìN DE IMPRESI√ìN\n    formato_impresion = Column(\n        PGEnum(\n            PrintFormat,\n            name=\"print_format\",\n            values_callable=lambda e: [m.value for m in e],\n            create_type=False,\n        ),\n        default=PrintFormat.A4,\n        nullable=False,\n        comment=\"Formato de impresi√≥n por defecto\"\n    )\n    \n    # ARCHIVOS Y MULTIMEDIA\n    logo_empresa = Column(String(500), nullable=True, comment=\"Path del logo de la empresa\")\n    firma_digital = Column(String(500), nullable=True, comment=\"Path de la firma digital\")\n    \n    # CONFIGURACI√ìN ESPEC√çFICA PARA PARAGUAY\n    regimen_tributario = Column(String(50), default=\"GENERAL\", nullable=False, comment=\"R√©gimen tributario\")\n    contribuyente_iva = Column(Boolean, default=True, nullable=False, comment=\"Es contribuyente de IVA\")\n    \n    # INFORMACI√ìN ADICIONAL\n    actividad_economica = Column(String(200), nullable=True, comment=\"Actividad econ√≥mica principal\")\n    sector_economico = Column(String(100), nullable=True, comment=\"Sector econ√≥mico\")\n    notas_adicionales = Column(Text, nullable=True, comment=\"Notas y observaciones adicionales\")\n    \n    # CONFIGURACI√ìN DE SISTEMA\n    is_active = Column(Boolean, default=True, nullable=False)\n    configuracion_completa = Column(Boolean, default=False, nullable=False, comment=\"Indica si la configuraci√≥n est√° completa\")\n    \n    # TIMESTAMPS\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n    \n    def __repr__(self):\n        return f\"<CompanySettings(razon_social='{self.razon_social}', ruc='{self.ruc}')>\"","size_bytes":4905},"app/schemas/company.py":{"content":"from pydantic import BaseModel, EmailStr, field_validator\nfrom typing import Optional\nfrom enum import Enum\nfrom decimal import Decimal\nfrom datetime import date\n\nclass CurrencyType(str, Enum):\n    PYG = \"PYG\"  # Guaran√≠es paraguayos\n    USD = \"USD\"  # D√≥lares americanos\n\nclass PrintFormat(str, Enum):\n    A4 = \"A4\"\n    TICKET = \"ticket\"\n\nclass CompanySettingsBase(BaseModel):\n    # DATOS B√ÅSICOS DE LA EMPRESA\n    razon_social: str\n    nombre_comercial: Optional[str] = None\n    \n    # DATOS FISCALES ESPEC√çFICOS PARA PARAGUAY\n    ruc: str\n    timbrado: str\n    timbrado_fecha_vencimiento: Optional[date] = None\n    punto_expedicion: str = \"001\"\n    dv_ruc: Optional[str] = None\n    \n    # DATOS DE CONTACTO\n    direccion: str\n    ciudad: str = \"Asunci√≥n\"\n    departamento: str = \"Central\"\n    codigo_postal: Optional[str] = None\n    telefono: Optional[str] = None\n    celular: Optional[str] = None\n    email: Optional[EmailStr] = None\n    sitio_web: Optional[str] = None\n    \n    # CONFIGURACI√ìN MONETARIA\n    moneda_defecto: CurrencyType = CurrencyType.PYG\n    \n    # CONFIGURACI√ìN DE IVA PARA PARAGUAY\n    iva_10_porciento: Decimal = Decimal(\"10.00\")\n    iva_5_porciento: Decimal = Decimal(\"5.00\")\n    iva_exento: bool = False\n    \n    # CONFIGURACI√ìN DE NUMERACI√ìN AUTOM√ÅTICA\n    numeracion_facturas_inicio: int = 1\n    numeracion_facturas_actual: int = 1\n    numeracion_cotizaciones_inicio: int = 1\n    numeracion_cotizaciones_actual: int = 1\n    \n    # CONFIGURACI√ìN DE IMPRESI√ìN\n    formato_impresion: PrintFormat = PrintFormat.A4\n    \n    # ARCHIVOS Y MULTIMEDIA\n    logo_empresa: Optional[str] = None\n    firma_digital: Optional[str] = None\n    \n    # CONFIGURACI√ìN ESPEC√çFICA PARA PARAGUAY\n    regimen_tributario: str = \"GENERAL\"\n    contribuyente_iva: bool = True\n    \n    # INFORMACI√ìN ADICIONAL\n    actividad_economica: Optional[str] = None\n    sector_economico: Optional[str] = None\n    notas_adicionales: Optional[str] = None\n    \n    # CONFIGURACI√ìN DE SISTEMA\n    is_active: bool = True\n    configuracion_completa: bool = False\n\n    @field_validator('ruc')\n    @classmethod\n    def validate_ruc(cls, v):\n        \"\"\"Validar formato b√°sico de RUC paraguayo\"\"\"\n        if not v:\n            raise ValueError('RUC es obligatorio')\n        \n        # Eliminar espacios y guiones para validaci√≥n\n        ruc_clean = v.replace('-', '').replace(' ', '')\n        \n        # Verificar que sea num√©rico y tenga la longitud correcta\n        if not ruc_clean.isdigit():\n            raise ValueError('RUC debe contener solo n√∫meros')\n        \n        if len(ruc_clean) < 6 or len(ruc_clean) > 10:\n            raise ValueError('RUC debe tener entre 6 y 10 d√≠gitos')\n            \n        return v\n    \n    @field_validator('timbrado')\n    @classmethod\n    def validate_timbrado(cls, v):\n        \"\"\"Validar formato b√°sico de timbrado\"\"\"\n        if not v:\n            raise ValueError('Timbrado es obligatorio')\n        \n        timbrado_clean = v.replace('-', '').replace(' ', '')\n        \n        if not timbrado_clean.isdigit():\n            raise ValueError('Timbrado debe contener solo n√∫meros')\n        \n        if len(timbrado_clean) < 8:\n            raise ValueError('Timbrado debe tener al menos 8 d√≠gitos')\n            \n        return v\n    \n    @field_validator('punto_expedicion')\n    @classmethod\n    def validate_punto_expedicion(cls, v):\n        \"\"\"Validar formato de punto de expedici√≥n\"\"\"\n        if not v:\n            return \"001\"\n        \n        # Asegurar que tenga 3 d√≠gitos con ceros a la izquierda\n        return v.zfill(3)\n\nclass CompanySettingsCreate(CompanySettingsBase):\n    pass\n\nclass CompanySettingsUpdate(BaseModel):\n    # Todos los campos opcionales para actualizaci√≥n\n    razon_social: Optional[str] = None\n    nombre_comercial: Optional[str] = None\n    ruc: Optional[str] = None\n    timbrado: Optional[str] = None\n    timbrado_fecha_vencimiento: Optional[date] = None\n    punto_expedicion: Optional[str] = None\n    dv_ruc: Optional[str] = None\n    direccion: Optional[str] = None\n    ciudad: Optional[str] = None\n    departamento: Optional[str] = None\n    codigo_postal: Optional[str] = None\n    telefono: Optional[str] = None\n    celular: Optional[str] = None\n    email: Optional[EmailStr] = None\n    sitio_web: Optional[str] = None\n    moneda_defecto: Optional[CurrencyType] = None\n    iva_10_porciento: Optional[Decimal] = None\n    iva_5_porciento: Optional[Decimal] = None\n    iva_exento: Optional[bool] = None\n    numeracion_facturas_inicio: Optional[int] = None\n    numeracion_facturas_actual: Optional[int] = None\n    numeracion_cotizaciones_inicio: Optional[int] = None\n    numeracion_cotizaciones_actual: Optional[int] = None\n    formato_impresion: Optional[PrintFormat] = None\n    logo_empresa: Optional[str] = None\n    firma_digital: Optional[str] = None\n    regimen_tributario: Optional[str] = None\n    contribuyente_iva: Optional[bool] = None\n    actividad_economica: Optional[str] = None\n    sector_economico: Optional[str] = None\n    notas_adicionales: Optional[str] = None\n    is_active: Optional[bool] = None\n    configuracion_completa: Optional[bool] = None\n\n    # Aplicar las mismas validaciones cuando se actualizan los campos\n    @field_validator('ruc')\n    @classmethod\n    def validate_ruc(cls, v):\n        if v is None:\n            return v\n        return CompanySettingsBase.validate_ruc(v)\n    \n    @field_validator('timbrado')\n    @classmethod\n    def validate_timbrado(cls, v):\n        if v is None:\n            return v\n        return CompanySettingsBase.validate_timbrado(v)\n    \n    @field_validator('punto_expedicion')\n    @classmethod\n    def validate_punto_expedicion(cls, v):\n        if v is None:\n            return v\n        return CompanySettingsBase.validate_punto_expedicion(v)\n\nclass CompanySettings(CompanySettingsBase):\n    id: int\n    created_at: Optional[str] = None\n    updated_at: Optional[str] = None\n    \n    model_config = {\"from_attributes\": True}\n\nclass CompanySettingsPublic(BaseModel):\n    \"\"\"Configuraci√≥n p√∫blica de la empresa (para mostrar en facturas, etc.)\"\"\"\n    id: int\n    razon_social: str\n    nombre_comercial: Optional[str] = None\n    ruc: str\n    direccion: str\n    telefono: Optional[str] = None\n    email: Optional[str] = None\n    logo_empresa: Optional[str] = None\n    moneda_defecto: CurrencyType\n    \n    model_config = {\"from_attributes\": True}","size_bytes":6380},"frontend/src/pages/CompanySettings.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  TextField,\n  Button,\n  Divider,\n  Alert,\n  CircularProgress,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Switch,\n  Card,\n  CardContent,\n  CardHeader,\n  Chip,\n} from '@mui/material';\nimport {\n  Save,\n  Business,\n  Receipt,\n  ContactMail,\n  Settings,\n  CheckCircle,\n  Warning,\n} from '@mui/icons-material';\nimport { useAuth } from '../context/AuthContext';\nimport { apiService } from '../services/api';\n\ninterface CompanySettings {\n  id?: number;\n  razon_social: string;\n  nombre_comercial?: string;\n  ruc: string;\n  timbrado: string;\n  punto_expedicion: string;\n  dv_ruc?: string;\n  direccion: string;\n  ciudad: string;\n  departamento: string;\n  codigo_postal?: string;\n  telefono?: string;\n  celular?: string;\n  email?: string;\n  sitio_web?: string;\n  moneda_defecto: 'PYG' | 'USD';\n  iva_10_porciento: number;\n  iva_5_porciento: number;\n  iva_exento: boolean;\n  numeracion_facturas_inicio: number;\n  numeracion_facturas_actual: number;\n  numeracion_cotizaciones_inicio: number;\n  numeracion_cotizaciones_actual: number;\n  formato_impresion: 'A4' | 'ticket';\n  logo_empresa?: string;\n  firma_digital?: string;\n  regimen_tributario: string;\n  contribuyente_iva: boolean;\n  actividad_economica?: string;\n  sector_economico?: string;\n  notas_adicionales?: string;\n  is_active: boolean;\n  configuracion_completa: boolean;\n}\n\nconst defaultSettings: CompanySettings = {\n  razon_social: '',\n  nombre_comercial: '',\n  ruc: '',\n  timbrado: '',\n  punto_expedicion: '001',\n  dv_ruc: '',\n  direccion: '',\n  ciudad: 'Asunci√≥n',\n  departamento: 'Central',\n  codigo_postal: '',\n  telefono: '',\n  celular: '',\n  email: '',\n  sitio_web: '',\n  moneda_defecto: 'PYG',\n  iva_10_porciento: 10.00,\n  iva_5_porciento: 5.00,\n  iva_exento: false,\n  numeracion_facturas_inicio: 1,\n  numeracion_facturas_actual: 1,\n  numeracion_cotizaciones_inicio: 1,\n  numeracion_cotizaciones_actual: 1,\n  formato_impresion: 'A4',\n  logo_empresa: '',\n  firma_digital: '',\n  regimen_tributario: 'GENERAL',\n  contribuyente_iva: true,\n  actividad_economica: '',\n  sector_economico: '',\n  notas_adicionales: '',\n  is_active: true,\n  configuracion_completa: false,\n};\n\nexport default function CompanySettings() {\n  const { user } = useAuth();\n  const [settings, setSettings] = useState<CompanySettings>(defaultSettings);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isNewConfiguration, setIsNewConfiguration] = useState(false);\n\n  // Verificar permisos\n  const canEdit = user?.role === 'admin' || user?.role === 'manager';\n\n  useEffect(() => {\n    loadCompanySettings();\n  }, []);\n\n  const loadCompanySettings = async () => {\n    try {\n      setLoading(true);\n      setError('');\n      \n      const data = await apiService.getCompanySettings();\n      setSettings(data);\n      setIsNewConfiguration(false);\n    } catch (err: any) {\n      if (err.response?.status === 404) {\n        // No existe configuraci√≥n, usar valores por defecto\n        setSettings(defaultSettings);\n        setIsNewConfiguration(true);\n      } else {\n        setError('Error al cargar configuraci√≥n de empresa');\n        console.error('Error loading company settings:', err);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!canEdit) {\n      setError('No tienes permisos para modificar la configuraci√≥n');\n      return;\n    }\n\n    try {\n      setSaving(true);\n      setError('');\n      setSuccess('');\n\n      let savedSettings;\n      if (isNewConfiguration) {\n        savedSettings = await apiService.createCompanySettings(settings);\n        setIsNewConfiguration(false);\n      } else {\n        savedSettings = await apiService.updateCompanySettings(settings);\n      }\n\n      setSettings(savedSettings);\n      setSuccess('Configuraci√≥n guardada exitosamente');\n      \n      // Limpiar mensaje de √©xito despu√©s de 3 segundos\n      setTimeout(() => setSuccess(''), 3000);\n    } catch (err: any) {\n      setError(err.response?.data?.detail || 'Error al guardar configuraci√≥n');\n      console.error('Error saving company settings:', err);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof CompanySettings, value: any) => {\n    setSettings(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const validateRUC = (ruc: string) => {\n    const rucClean = ruc.replace(/[-\\s]/g, '');\n    if (rucClean.length < 6 || rucClean.length > 10) {\n      return 'RUC debe tener entre 6 y 10 d√≠gitos';\n    }\n    if (!/^\\d+$/.test(rucClean)) {\n      return 'RUC debe contener solo n√∫meros';\n    }\n    return '';\n  };\n\n  const validateTimbrado = (timbrado: string) => {\n    const timbradoClean = timbrado.replace(/[-\\s]/g, '');\n    if (timbradoClean.length < 8) {\n      return 'Timbrado debe tener al menos 8 d√≠gitos';\n    }\n    if (!/^\\d+$/.test(timbradoClean)) {\n      return 'Timbrado debe contener solo n√∫meros';\n    }\n    return '';\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Encabezado */}\n      <Box mb={3}>\n        <Typography variant=\"h4\" gutterBottom sx={{ fontWeight: 600 }}>\n          <Settings sx={{ mr: 1, verticalAlign: 'middle' }} />\n          Configuraci√≥n de Empresa\n        </Typography>\n        <Typography variant=\"h6\" color=\"text.secondary\">\n          Configure los datos fiscales y operativos de su empresa paraguaya\n        </Typography>\n        \n        {!canEdit && (\n          <Alert severity=\"warning\" sx={{ mt: 2 }}>\n            Solo los administradores pueden modificar la configuraci√≥n de empresa\n          </Alert>\n        )}\n      </Box>\n\n      {error && (\n        <Alert severity=\"error\" sx={{ mb: 3 }}>\n          {error}\n        </Alert>\n      )}\n\n      {success && (\n        <Alert severity=\"success\" sx={{ mb: 3 }} icon={<CheckCircle />}>\n          {success}\n        </Alert>\n      )}\n\n      {/* Estado de configuraci√≥n */}\n      <Card sx={{ mb: 3, bgcolor: settings.configuracion_completa ? 'success.light' : 'warning.light' }}>\n        <CardContent>\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Box display=\"flex\" alignItems=\"center\">\n              {settings.configuracion_completa ? (\n                <CheckCircle sx={{ color: 'success.main', mr: 1 }} />\n              ) : (\n                <Warning sx={{ color: 'warning.main', mr: 1 }} />\n              )}\n              <Typography variant=\"h6\">\n                Estado de Configuraci√≥n: {' '}\n                <Chip \n                  label={settings.configuracion_completa ? 'Completa' : 'Pendiente'}\n                  color={settings.configuracion_completa ? 'success' : 'warning'}\n                  size=\"small\"\n                />\n              </Typography>\n            </Box>\n            {isNewConfiguration && (\n              <Chip label=\"Nueva Configuraci√≥n\" color=\"primary\" />\n            )}\n          </Box>\n        </CardContent>\n      </Card>\n\n      <Grid container spacing={3}>\n        {/* DATOS B√ÅSICOS DE LA EMPRESA */}\n        <Grid {...({ item: true, xs: 12, md: 6 } as any)}>\n          <Card>\n            <CardHeader \n              title=\"Datos B√°sicos de la Empresa\"\n              avatar={<Business />}\n            />\n            <CardContent>\n              <Grid container spacing={2}>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Raz√≥n Social *\"\n                    value={settings.razon_social}\n                    onChange={(e) => handleInputChange('razon_social', e.target.value)}\n                    disabled={!canEdit}\n                    error={!settings.razon_social}\n                    helperText={!settings.razon_social ? 'Campo obligatorio' : ''}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Nombre Comercial\"\n                    value={settings.nombre_comercial}\n                    onChange={(e) => handleInputChange('nombre_comercial', e.target.value)}\n                    disabled={!canEdit}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    multiline\n                    rows={2}\n                    label=\"Direcci√≥n *\"\n                    value={settings.direccion}\n                    onChange={(e) => handleInputChange('direccion', e.target.value)}\n                    disabled={!canEdit}\n                    error={!settings.direccion}\n                    helperText={!settings.direccion ? 'Campo obligatorio' : ''}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Ciudad\"\n                    value={settings.ciudad}\n                    onChange={(e) => handleInputChange('ciudad', e.target.value)}\n                    disabled={!canEdit}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Departamento\"\n                    value={settings.departamento}\n                    onChange={(e) => handleInputChange('departamento', e.target.value)}\n                    disabled={!canEdit}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Actividad Econ√≥mica\"\n                    value={settings.actividad_economica}\n                    onChange={(e) => handleInputChange('actividad_economica', e.target.value)}\n                    disabled={!canEdit}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* DATOS FISCALES PARA PARAGUAY */}\n        <Grid {...({ item: true, xs: 12, md: 6 } as any)}>\n          <Card>\n            <CardHeader \n              title=\"Datos Fiscales Paraguay\"\n              avatar={<Receipt />}\n            />\n            <CardContent>\n              <Grid container spacing={2}>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"RUC *\"\n                    value={settings.ruc}\n                    onChange={(e) => handleInputChange('ruc', e.target.value)}\n                    disabled={!canEdit}\n                    error={!settings.ruc || !!validateRUC(settings.ruc)}\n                    helperText={\n                      !settings.ruc \n                        ? 'Campo obligatorio' \n                        : validateRUC(settings.ruc) || 'Ej: 80012345-1'\n                    }\n                    placeholder=\"80012345-1\"\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Timbrado *\"\n                    value={settings.timbrado}\n                    onChange={(e) => handleInputChange('timbrado', e.target.value)}\n                    disabled={!canEdit}\n                    error={!settings.timbrado || !!validateTimbrado(settings.timbrado)}\n                    helperText={\n                      !settings.timbrado \n                        ? 'Campo obligatorio' \n                        : validateTimbrado(settings.timbrado) || 'N√∫mero de timbrado fiscal'\n                    }\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Punto de Expedici√≥n\"\n                    value={settings.punto_expedicion}\n                    onChange={(e) => handleInputChange('punto_expedicion', e.target.value.padStart(3, '0'))}\n                    disabled={!canEdit}\n                    inputProps={{ maxLength: 3 }}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"DV RUC\"\n                    value={settings.dv_ruc}\n                    onChange={(e) => handleInputChange('dv_ruc', e.target.value)}\n                    disabled={!canEdit}\n                    inputProps={{ maxLength: 2 }}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <FormControl fullWidth>\n                    <InputLabel>R√©gimen Tributario</InputLabel>\n                    <Select\n                      value={settings.regimen_tributario}\n                      onChange={(e) => handleInputChange('regimen_tributario', e.target.value)}\n                      disabled={!canEdit}\n                      label=\"R√©gimen Tributario\"\n                    >\n                      <MenuItem value=\"GENERAL\">General</MenuItem>\n                      <MenuItem value=\"SIMPLIFICADO\">Simplificado</MenuItem>\n                      <MenuItem value=\"PEQUENO_CONTRIBUYENTE\">Peque√±o Contribuyente</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={settings.contribuyente_iva}\n                        onChange={(e) => handleInputChange('contribuyente_iva', e.target.checked)}\n                        disabled={!canEdit}\n                      />\n                    }\n                    label=\"Contribuyente de IVA\"\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* DATOS DE CONTACTO */}\n        <Grid {...({ item: true, xs: 12, md: 6 } as any)}>\n          <Card>\n            <CardHeader \n              title=\"Informaci√≥n de Contacto\"\n              avatar={<ContactMail />}\n            />\n            <CardContent>\n              <Grid container spacing={2}>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Tel√©fono\"\n                    value={settings.telefono}\n                    onChange={(e) => handleInputChange('telefono', e.target.value)}\n                    disabled={!canEdit}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Celular\"\n                    value={settings.celular}\n                    onChange={(e) => handleInputChange('celular', e.target.value)}\n                    disabled={!canEdit}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    type=\"email\"\n                    label=\"Email\"\n                    value={settings.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    disabled={!canEdit}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"Sitio Web\"\n                    value={settings.sitio_web}\n                    onChange={(e) => handleInputChange('sitio_web', e.target.value)}\n                    disabled={!canEdit}\n                    placeholder=\"https://www.miempresa.com.py\"\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <TextField\n                    fullWidth\n                    label=\"C√≥digo Postal\"\n                    value={settings.codigo_postal}\n                    onChange={(e) => handleInputChange('codigo_postal', e.target.value)}\n                    disabled={!canEdit}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* CONFIGURACI√ìN OPERATIVA */}\n        <Grid {...({ item: true, xs: 12, md: 6 } as any)}>\n          <Card>\n            <CardHeader \n              title=\"Configuraci√≥n Operativa\"\n              avatar={<Settings />}\n            />\n            <CardContent>\n              <Grid container spacing={2}>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <FormControl fullWidth>\n                    <InputLabel>Moneda por Defecto</InputLabel>\n                    <Select\n                      value={settings.moneda_defecto}\n                      onChange={(e) => handleInputChange('moneda_defecto', e.target.value)}\n                      disabled={!canEdit}\n                      label=\"Moneda por Defecto\"\n                    >\n                      <MenuItem value=\"PYG\">Guaran√≠es (PYG)</MenuItem>\n                      <MenuItem value=\"USD\">D√≥lares (USD)</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    type=\"number\"\n                    label=\"IVA 10%\"\n                    value={settings.iva_10_porciento}\n                    onChange={(e) => handleInputChange('iva_10_porciento', parseFloat(e.target.value) || 0)}\n                    disabled={!canEdit}\n                    inputProps={{ step: 0.01, min: 0, max: 100 }}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    type=\"number\"\n                    label=\"IVA 5%\"\n                    value={settings.iva_5_porciento}\n                    onChange={(e) => handleInputChange('iva_5_porciento', parseFloat(e.target.value) || 0)}\n                    disabled={!canEdit}\n                    inputProps={{ step: 0.01, min: 0, max: 100 }}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 12 } as any)}>\n                  <FormControl fullWidth>\n                    <InputLabel>Formato de Impresi√≥n</InputLabel>\n                    <Select\n                      value={settings.formato_impresion}\n                      onChange={(e) => handleInputChange('formato_impresion', e.target.value)}\n                      disabled={!canEdit}\n                      label=\"Formato de Impresi√≥n\"\n                    >\n                      <MenuItem value=\"A4\">A4 (Carta)</MenuItem>\n                      <MenuItem value=\"ticket\">Ticket (80mm)</MenuItem>\n                    </Select>\n                  </FormControl>\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    type=\"number\"\n                    label=\"Numeraci√≥n Facturas - Inicio\"\n                    value={settings.numeracion_facturas_inicio}\n                    onChange={(e) => handleInputChange('numeracion_facturas_inicio', parseInt(e.target.value) || 1)}\n                    disabled={!canEdit}\n                    inputProps={{ min: 1 }}\n                  />\n                </Grid>\n                <Grid {...({ item: true, xs: 6 } as any)}>\n                  <TextField\n                    fullWidth\n                    type=\"number\"\n                    label=\"Numeraci√≥n Facturas - Actual\"\n                    value={settings.numeracion_facturas_actual}\n                    onChange={(e) => handleInputChange('numeracion_facturas_actual', parseInt(e.target.value) || 1)}\n                    disabled={!canEdit}\n                    inputProps={{ min: 1 }}\n                  />\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Notas adicionales */}\n      <Paper sx={{ p: 3, mt: 3 }}>\n        <Typography variant=\"h6\" gutterBottom>\n          Notas Adicionales\n        </Typography>\n        <TextField\n          fullWidth\n          multiline\n          rows={3}\n          label=\"Observaciones y notas\"\n          value={settings.notas_adicionales}\n          onChange={(e) => handleInputChange('notas_adicionales', e.target.value)}\n          disabled={!canEdit}\n          placeholder=\"Ingrese cualquier informaci√≥n adicional sobre la empresa...\"\n        />\n      </Paper>\n\n      {/* Botones de acci√≥n */}\n      {canEdit && (\n        <Box display=\"flex\" justifyContent=\"flex-end\" gap={2} mt={3}>\n          <Button\n            variant=\"outlined\"\n            onClick={loadCompanySettings}\n            disabled={saving}\n          >\n            Cancelar\n          </Button>\n          <Button\n            variant=\"contained\"\n            startIcon={saving ? <CircularProgress size={20} /> : <Save />}\n            onClick={handleSave}\n            disabled={saving || !settings.razon_social || !settings.ruc || !settings.timbrado || !settings.direccion}\n          >\n            {saving ? 'Guardando...' : (isNewConfiguration ? 'Crear Configuraci√≥n' : 'Guardar Cambios')}\n          </Button>\n        </Box>\n      )}\n    </Box>\n  );\n}","size_bytes":21758},"app/utils/paraguay_fiscal.py":{"content":"\"\"\"\nUtilidades fiscales espec√≠ficas para Paraguay\nIncluye validaci√≥n de RUC, c√°lculos de IVA, y validaciones de timbrado\n\"\"\"\n\nimport re\nfrom datetime import date, datetime\nfrom typing import Optional, Dict, Tuple, Any\nfrom decimal import Decimal\n\nclass ParaguayFiscalValidator:\n    \"\"\"Validador fiscal para Paraguay\"\"\"\n    \n    @staticmethod\n    def validate_ruc(ruc: str) -> Dict[str, Any]:\n        \"\"\"\n        Validar RUC paraguayo con d√≠gito verificador\n        \n        Args:\n            ruc: RUC a validar (puede incluir guiones)\n            \n        Returns:\n            Dict con resultado de validaci√≥n y informaci√≥n extra√≠da\n        \"\"\"\n        if not ruc:\n            return {\n                \"valid\": False,\n                \"error\": \"RUC no puede estar vac√≠o\",\n                \"ruc_clean\": None,\n                \"dv\": None\n            }\n        \n        # Limpiar RUC (remover espacios y guiones)\n        ruc_clean = re.sub(r'[^0-9]', '', ruc)\n        \n        if len(ruc_clean) < 6:\n            return {\n                \"valid\": False,\n                \"error\": \"RUC debe tener al menos 6 d√≠gitos\",\n                \"ruc_clean\": ruc_clean,\n                \"dv\": None\n            }\n        \n        if len(ruc_clean) > 10:\n            return {\n                \"valid\": False,\n                \"error\": \"RUC no puede tener m√°s de 10 d√≠gitos\",\n                \"ruc_clean\": ruc_clean,\n                \"dv\": None\n            }\n        \n        # Extraer d√≠gito verificador si existe\n        if len(ruc_clean) >= 7:\n            ruc_base = ruc_clean[:-1]\n            dv_provided = ruc_clean[-1]\n            \n            # Calcular d√≠gito verificador\n            dv_calculated = ParaguayFiscalValidator._calculate_ruc_dv(ruc_base)\n            \n            if dv_provided != str(dv_calculated):\n                return {\n                    \"valid\": False,\n                    \"error\": f\"D√≠gito verificador incorrecto. Esperado: {dv_calculated}, Recibido: {dv_provided}\",\n                    \"ruc_clean\": ruc_clean,\n                    \"dv\": dv_provided\n                }\n            \n            return {\n                \"valid\": True,\n                \"error\": None,\n                \"ruc_clean\": ruc_clean,\n                \"ruc_base\": ruc_base,\n                \"dv\": dv_provided,\n                \"formatted\": f\"{ruc_base}-{dv_provided}\"\n            }\n        else:\n            # RUC sin d√≠gito verificador\n            dv_calculated = ParaguayFiscalValidator._calculate_ruc_dv(ruc_clean)\n            \n            return {\n                \"valid\": True,\n                \"error\": None,\n                \"ruc_clean\": ruc_clean,\n                \"ruc_base\": ruc_clean,\n                \"dv\": str(dv_calculated),\n                \"formatted\": f\"{ruc_clean}-{dv_calculated}\"\n            }\n    \n    @staticmethod\n    def _calculate_ruc_dv(ruc_base: str) -> int:\n        \"\"\"\n        Calcular d√≠gito verificador para RUC paraguayo\n        \n        Args:\n            ruc_base: Base del RUC sin d√≠gito verificador\n            \n        Returns:\n            D√≠gito verificador calculado\n        \"\"\"\n        if not ruc_base or not ruc_base.isdigit():\n            return 0\n        \n        # Algoritmo m√≥dulo 11 para RUC paraguayo\n        multipliers = [2, 3, 4, 5, 6, 7, 2, 3, 4]\n        total = 0\n        \n        # Procesar desde el √∫ltimo d√≠gito hacia el primero\n        ruc_reversed = ruc_base[::-1]\n        \n        for i, digit in enumerate(ruc_reversed):\n            if i < len(multipliers):\n                total += int(digit) * multipliers[i]\n        \n        remainder = total % 11\n        \n        if remainder < 2:\n            return remainder\n        else:\n            return 11 - remainder\n    \n    @staticmethod\n    def validate_timbrado(timbrado: str, fecha_vencimiento: Optional[date] = None) -> Dict[str, any]:\n        \"\"\"\n        Validar timbrado paraguayo\n        \n        Args:\n            timbrado: N√∫mero de timbrado\n            fecha_vencimiento: Fecha de vencimiento del timbrado\n            \n        Returns:\n            Dict con resultado de validaci√≥n\n        \"\"\"\n        if not timbrado:\n            return {\n                \"valid\": False,\n                \"error\": \"Timbrado no puede estar vac√≠o\"\n            }\n        \n        # Limpiar timbrado\n        timbrado_clean = re.sub(r'[^0-9]', '', timbrado)\n        \n        if not timbrado_clean.isdigit():\n            return {\n                \"valid\": False,\n                \"error\": \"Timbrado debe contener solo n√∫meros\"\n            }\n        \n        if len(timbrado_clean) < 8:\n            return {\n                \"valid\": False,\n                \"error\": \"Timbrado debe tener al menos 8 d√≠gitos\"\n            }\n        \n        # Validar fecha de vencimiento\n        if fecha_vencimiento:\n            today = date.today()\n            if fecha_vencimiento < today:\n                return {\n                    \"valid\": False,\n                    \"error\": f\"Timbrado vencido. Fecha de vencimiento: {fecha_vencimiento}\",\n                    \"expired\": True,\n                    \"days_expired\": (today - fecha_vencimiento).days\n                }\n            \n            # Advertir si est√° pr√≥ximo a vencer (30 d√≠as)\n            days_to_expire = (fecha_vencimiento - today).days\n            if days_to_expire <= 30:\n                return {\n                    \"valid\": True,\n                    \"error\": None,\n                    \"warning\": f\"Timbrado vence en {days_to_expire} d√≠as\",\n                    \"days_to_expire\": days_to_expire\n                }\n        \n        return {\n            \"valid\": True,\n            \"error\": None,\n            \"timbrado_clean\": timbrado_clean\n        }\n    \n    @staticmethod\n    def format_invoice_number(numero_actual: int, punto_expedicion: str = \"001\", timbrado: str = \"\") -> str:\n        \"\"\"\n        Formatear n√∫mero de factura paraguayo\n        \n        Args:\n            numero_actual: N√∫mero actual de factura\n            punto_expedicion: Punto de expedici√≥n (ej: \"001\")\n            timbrado: N√∫mero de timbrado\n            \n        Returns:\n            N√∫mero de factura formateado\n        \"\"\"\n        # Asegurar que punto de expedici√≥n tenga 3 d√≠gitos\n        punto_expedicion = punto_expedicion.zfill(3)\n        \n        # Formatear n√∫mero con 7 d√≠gitos\n        numero_formateado = str(numero_actual).zfill(7)\n        \n        return f\"{punto_expedicion}-{numero_formateado}\"\n\nclass ParaguayIVACalculator:\n    \"\"\"Calculadora de IVA para Paraguay\"\"\"\n    \n    @staticmethod\n    def calculate_iva_breakdown(lines: list, iva_10_rate: Decimal = Decimal(\"10\"), \n                              iva_5_rate: Decimal = Decimal(\"5\")) -> Dict[str, Decimal]:\n        \"\"\"\n        Calcular desglose de IVA paraguayo\n        \n        Args:\n            lines: Lista de l√≠neas con iva_category y line_total\n            iva_10_rate: Tasa de IVA 10%\n            iva_5_rate: Tasa de IVA 5%\n            \n        Returns:\n            Dict con desglose de IVA\n        \"\"\"\n        subtotal_gravado_10 = Decimal(\"0\")\n        subtotal_gravado_5 = Decimal(\"0\")\n        subtotal_exento = Decimal(\"0\")\n        \n        for line in lines:\n            line_total = Decimal(str(line.get(\"line_total\", 0)))\n            iva_category = line.get(\"iva_category\", \"10\").upper()\n            \n            if iva_category == \"10\":\n                subtotal_gravado_10 += line_total\n            elif iva_category == \"5\":\n                subtotal_gravado_5 += line_total\n            else:  # EXENTO\n                subtotal_exento += line_total\n        \n        # Calcular IVA\n        iva_10 = subtotal_gravado_10 * (iva_10_rate / Decimal(\"100\"))\n        iva_5 = subtotal_gravado_5 * (iva_5_rate / Decimal(\"100\"))\n        \n        total_iva = iva_10 + iva_5\n        subtotal = subtotal_gravado_10 + subtotal_gravado_5 + subtotal_exento\n        total = subtotal + total_iva\n        \n        return {\n            \"subtotal_gravado_10\": subtotal_gravado_10,\n            \"subtotal_gravado_5\": subtotal_gravado_5,\n            \"subtotal_exento\": subtotal_exento,\n            \"iva_10\": iva_10,\n            \"iva_5\": iva_5,\n            \"total_iva\": total_iva,\n            \"subtotal\": subtotal,\n            \"total\": total\n        }\n    \n    @staticmethod\n    def apply_tourism_regime(totals: Dict[str, Decimal], \n                           tourism_percentage: Decimal = Decimal(\"0\")) -> Dict[str, Decimal]:\n        \"\"\"\n        Aplicar r√©gimen tur√≠stico paraguayo\n        \n        Args:\n            totals: Totales calculados sin r√©gimen tur√≠stico\n            tourism_percentage: Porcentaje de exenci√≥n tur√≠stica\n            \n        Returns:\n            Totales con r√©gimen tur√≠stico aplicado\n        \"\"\"\n        if tourism_percentage <= 0:\n            return totals\n        \n        # Calcular descuento por r√©gimen tur√≠stico\n        tourism_discount_factor = tourism_percentage / Decimal(\"100\")\n        \n        # El r√©gimen tur√≠stico aplica sobre el IVA\n        iva_10_discount = totals[\"iva_10\"] * tourism_discount_factor\n        iva_5_discount = totals[\"iva_5\"] * tourism_discount_factor\n        total_iva_discount = iva_10_discount + iva_5_discount\n        \n        # Actualizar totales\n        new_totals = totals.copy()\n        new_totals[\"iva_10\"] -= iva_10_discount\n        new_totals[\"iva_5\"] -= iva_5_discount\n        new_totals[\"total_iva\"] -= total_iva_discount\n        new_totals[\"total\"] -= total_iva_discount\n        new_totals[\"tourism_discount\"] = total_iva_discount\n        \n        return new_totals\n\nclass ParaguayFiscalUtils:\n    \"\"\"Utilidades generales fiscales para Paraguay\"\"\"\n    \n    @staticmethod\n    def format_invoice_number(numero_actual: int, punto_expedicion: str = \"001\", timbrado: str = \"\") -> str:\n        \"\"\"Formatear n√∫mero de factura paraguayo - Delegado a ParaguayFiscalValidator\"\"\"\n        return ParaguayFiscalValidator.format_invoice_number(numero_actual, punto_expedicion, timbrado)\n    \n    @staticmethod\n    def get_condicion_venta_display(condicion: str) -> str:\n        \"\"\"Obtener texto display para condici√≥n de venta\"\"\"\n        condiciones = {\n            \"CONTADO\": \"Contado\",\n            \"CREDITO\": \"Cr√©dito\"\n        }\n        return condiciones.get(condicion.upper(), condicion)\n    \n    @staticmethod\n    def validate_punto_expedicion(punto: str) -> str:\n        \"\"\"Validar y formatear punto de expedici√≥n\"\"\"\n        if not punto:\n            return \"001\"\n        \n        # Limpiar y formatear con 3 d√≠gitos\n        punto_clean = re.sub(r'[^0-9]', '', punto)\n        return punto_clean.zfill(3)\n    \n    @staticmethod\n    def format_currency(amount: Decimal, currency: str = \"PYG\") -> str:\n        \"\"\"Formatear moneda paraguaya\"\"\"\n        if currency == \"PYG\":\n            # Formato paraguayo: 1.234.567 Gs.\n            return f\"{amount:,.0f} Gs.\".replace(\",\", \".\")\n        elif currency == \"USD\":\n            return f\"US$ {amount:,.2f}\"\n        else:\n            return f\"{amount:,.2f} {currency}\"","size_bytes":10963},"alembic/versions/6b40ae208cc4_fix_paraguay_fiscal_fields_and_company_.py":{"content":"\"\"\"Fix Paraguay fiscal fields and company settings\n\nRevision ID: 6b40ae208cc4\nRevises: 891f08c40066\nCreate Date: 2025-09-17 09:05:29.099460\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = '6b40ae208cc4'\ndown_revision: Union[str, Sequence[str], None] = '891f08c40066'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('company_settings', sa.Column('timbrado_fecha_vencimiento', sa.Date(), nullable=True, comment='Fecha de vencimiento del timbrado'))\n    \n    # Add iva_category with default value first\n    op.add_column('invoice_lines', sa.Column('iva_category', sa.String(length=10), nullable=True, comment='Categor√≠a IVA: 10, 5, EXENTO'))\n    # Update existing records with default value\n    op.execute(\"UPDATE invoice_lines SET iva_category = '10' WHERE iva_category IS NULL\")\n    # Make column NOT NULL after updating existing records\n    op.alter_column('invoice_lines', 'iva_category', nullable=False)\n    \n    op.add_column('invoice_lines', sa.Column('iva_amount', sa.Numeric(precision=10, scale=2), nullable=True, comment='Monto de IVA de esta l√≠nea'))\n    op.execute(\"UPDATE invoice_lines SET iva_amount = 0 WHERE iva_amount IS NULL\")\n    \n    op.add_column('invoices', sa.Column('punto_expedicion', sa.String(length=10), nullable=True, comment='Punto de expedici√≥n (ej: 001)'))\n    \n    # Add condicion_venta with default value first\n    op.add_column('invoices', sa.Column('condicion_venta', sa.String(length=20), nullable=True, comment='CONTADO o CREDITO'))\n    op.execute(\"UPDATE invoices SET condicion_venta = 'CREDITO' WHERE condicion_venta IS NULL\")\n    op.alter_column('invoices', 'condicion_venta', nullable=False)\n    \n    op.add_column('invoices', sa.Column('lugar_emision', sa.String(length=100), nullable=True, comment='Ciudad de emisi√≥n de la factura'))\n    op.add_column('invoices', sa.Column('subtotal_gravado_10', sa.Numeric(precision=12, scale=2), nullable=True, comment='Subtotal gravado al 10%'))\n    op.execute(\"UPDATE invoices SET subtotal_gravado_10 = 0 WHERE subtotal_gravado_10 IS NULL\")\n    \n    op.add_column('invoices', sa.Column('subtotal_gravado_5', sa.Numeric(precision=12, scale=2), nullable=True, comment='Subtotal gravado al 5%'))\n    op.execute(\"UPDATE invoices SET subtotal_gravado_5 = 0 WHERE subtotal_gravado_5 IS NULL\")\n    \n    op.add_column('invoices', sa.Column('subtotal_exento', sa.Numeric(precision=12, scale=2), nullable=True, comment='Subtotal exento de IVA'))\n    op.execute(\"UPDATE invoices SET subtotal_exento = 0 WHERE subtotal_exento IS NULL\")\n    \n    op.add_column('invoices', sa.Column('iva_10', sa.Numeric(precision=12, scale=2), nullable=True, comment='IVA 10%'))\n    op.execute(\"UPDATE invoices SET iva_10 = 0 WHERE iva_10 IS NULL\")\n    \n    op.add_column('invoices', sa.Column('iva_5', sa.Numeric(precision=12, scale=2), nullable=True, comment='IVA 5%'))\n    op.execute(\"UPDATE invoices SET iva_5 = 0 WHERE iva_5 IS NULL\")\n    \n    op.add_column('invoices', sa.Column('tourism_regime_applied', sa.Boolean(), nullable=True, comment='Se aplic√≥ r√©gimen tur√≠stico'))\n    op.execute(\"UPDATE invoices SET tourism_regime_applied = false WHERE tourism_regime_applied IS NULL\")\n    \n    op.add_column('invoices', sa.Column('tourism_regime_percentage', sa.Numeric(precision=5, scale=2), nullable=True, comment='Porcentaje de exenci√≥n tur√≠stica'))\n    op.execute(\"UPDATE invoices SET tourism_regime_percentage = 0 WHERE tourism_regime_percentage IS NULL\")\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('invoices', 'tourism_regime_percentage')\n    op.drop_column('invoices', 'tourism_regime_applied')\n    op.drop_column('invoices', 'iva_5')\n    op.drop_column('invoices', 'iva_10')\n    op.drop_column('invoices', 'subtotal_exento')\n    op.drop_column('invoices', 'subtotal_gravado_5')\n    op.drop_column('invoices', 'subtotal_gravado_10')\n    op.drop_column('invoices', 'lugar_emision')\n    op.drop_column('invoices', 'condicion_venta')\n    op.drop_column('invoices', 'punto_expedicion')\n    op.drop_column('invoice_lines', 'iva_amount')\n    op.drop_column('invoice_lines', 'iva_category')\n    op.drop_column('company_settings', 'timbrado_fecha_vencimiento')\n    # ### end Alembic commands ###\n","size_bytes":4577},"alembic/versions/ba585b231cdd_add_can_create_customers_permission.py":{"content":"\"\"\"add_can_create_customers_permission\n\nRevision ID: ba585b231cdd\nRevises: 6b40ae208cc4\nCreate Date: 2025-09-17 13:26:19.228744\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'ba585b231cdd'\ndown_revision: Union[str, Sequence[str], None] = '6b40ae208cc4'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('can_create_customers', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'can_create_customers')\n    # ### end Alembic commands ###\n","size_bytes":910},"alembic/versions/c87db5e40a35_add_can_create_quotes_permission_to_.py":{"content":"\"\"\"add_can_create_quotes_permission_to_users\n\nRevision ID: c87db5e40a35\nRevises: ba585b231cdd\nCreate Date: 2025-09-17 14:54:14.609840\n\n\"\"\"\nfrom typing import Sequence, Union\n\nfrom alembic import op\nimport sqlalchemy as sa\n\n\n# revision identifiers, used by Alembic.\nrevision: str = 'c87db5e40a35'\ndown_revision: Union[str, Sequence[str], None] = 'ba585b231cdd'\nbranch_labels: Union[str, Sequence[str], None] = None\ndepends_on: Union[str, Sequence[str], None] = None\n\n\ndef upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('can_create_quotes', sa.Boolean(), nullable=True))\n    # ### end Alembic commands ###\n\n\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'can_create_quotes')\n    # ### end Alembic commands ###\n","size_bytes":910}},"version":1}